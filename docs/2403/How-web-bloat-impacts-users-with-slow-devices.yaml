- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:00:18'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:00:18'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: How web bloat impacts users with slow devices
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网页臃肿如何影响使用慢速设备的用户
- en: 来源：[https://danluu.com/slow-device/](https://danluu.com/slow-device/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://danluu.com/slow-device/](https://danluu.com/slow-device/)
- en: <main>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <main>
- en: In 2017, [we looked at how web bloat affects users with slow connections](/web-bloat/).
    Even in the U.S., [many users didn't have broadband speeds](https://twitter.com/danluu/status/1116565029791260672),
    making much of the web difficult to use. It's still the case that many users don't
    have broadband speeds, both inside and outside of the U.S. and that much of the
    modern web isn't usable for people with slow internet, but the exponential increase
    in bandwidth (Nielsen suggests this is 50% per year for high-end connections)
    has outpaced web bloat for typical sites, making this less of a problem than it
    was in 2017, although it's still a serious problem for people with poor connections.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年，我们研究了网页臃肿如何影响使用慢速连接的用户。即使在美国，许多用户也没有宽带速度，使得许多网站难以使用。如今，许多用户依然没有宽带速度，不论在美国内外，现代网页对于使用慢速互联网的人来说仍然不可用。但带宽的指数增长（尼尔森建议高端连接每年增长50%）已经超过了典型网站的网页臃肿，使得这个问题不像2017年那样严重，尽管对于连接质量较差的人仍然是个严重问题。
- en: CPU performance for web apps hasn't scaled nearly as quickly as bandwidth so,
    while more of the web is becoming accessible to people with low-end connections,
    more of the web is becoming inaccessible to people with low-end devices even if
    they have high-end connections. For example, if I try browsing a "modern" Discourse-powered
    forum on a `Tecno Spark 8C`, it sometimes crashes the browser. Between crashes,
    on measuring the performance, the responsiveness is significantly worse than browsing
    a BBS with an `8 MHz 286` and a `1200 baud` modem. On my `1Gbps` home internet
    connection, the `2.6 MB` compressed payload size "necessary" to load message titles
    is relatively light. The over-the-wire payload size has "only" increased by `1000x`,
    which is dwarfed by the increase in internet speeds. But the opposite is true
    when it comes to CPU speeds — for web browsing and forum loading performance,
    the `8-core (2 1.6 GHz Cortex-A75 / 6 1.6 GHz Cortex-A55)` CPU can't handle Discourse.
    The CPU is something like `100000x` faster than our `286`. Perhaps a `1000000x`
    faster device would be sufficient.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Web应用程序而言，CPU性能的提升远远不及带宽的增长速度，因此，尽管越来越多的网页对低端连接的人变得可访问，但对于低端设备的人来说，即使他们拥有高端连接，许多网页也变得无法访问。例如，如果我试图在`Tecno
    Spark 8C`上浏览一个“现代”的Discourse驱动的论坛，有时会导致浏览器崩溃。在崩溃之间，在测量性能时，响应速度比使用`8 MHz 286`和`1200
    baud`调制解调器浏览BBS的情况显著更差。在我`1Gbps`的家庭互联网连接上，“必要”加载消息标题的`2.6 MB`压缩负载大小相对较轻。通过电线传输的负载大小“仅”增加了`1000倍`，这在互联网速度增长中显得微不足道。但是在CPU速度方面情况正好相反——对于Web浏览和论坛加载性能，`8核（2个1.6
    GHz Cortex-A75 / 6个1.6 GHz Cortex-A55）`的CPU无法处理Discourse。CPU的速度大约是我们`286`的`100000倍`。也许一个`1000000倍`更快的设备就足够了。
- en: For anyone not familiar with the `Tecno Spark 8C`, today, a new `Tecno Spark
    8C`, a quick search indicates that one can be hand for `USD 50-60` in Nigeria
    and perhaps `USD 100-110` in India. As a fraction of median household income,
    that's substantially more than a current generation iPhone in the U.S. today.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不熟悉`Tecno Spark 8C`的任何人来说，今天，通过快速搜索，你可以在尼日利亚以及印度分别以`USD 50-60`和`USD 100-110`的价格购买到一台新的`Tecno
    Spark 8C`。作为家庭收入中位数的一部分，这比当今美国最新一代iPhone的价格高出很多。
- en: By worldwide standards, the `Tecno Spark 8C` isn't even close to being a low-end
    device, so we'll also look at performance on an `Itel P32`, which is a lower end
    device (though still far from the lowest-end device people are using today). Additionally,
    we'll look at performance with an `M3 Max Macbook (14-core)`, an `M1 Pro Macbook
    (8-core)`, and the `M3 Max` set to `10x` throttling in Chrome dev tools. In order
    to give these devices every advantage, we'll be on fairly high-speed internet
    (1Gbps, with a WiFi router that's benchmarked as having lower latency under load
    than most of its peers). We'll look at some blogging platforms and micro-blogging
    platforms (this blog, Substack, Medium, Ghost, Hugo, Tumblr, Mastodon, Twitter,
    Threads, Bluesky, Patreon), forum platforms (Discourse, Reddit, Quora, vBulletin,
    XenForo, phpBB, and myBB), and platforms commonly used by small businesses (Wix,
    Squarespace, Shopify, and WordPress again).
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以全球标准来看，`Tecno Spark 8C` 并不算低端设备，因此我们还将看看低端设备 `Itel P32` 的表现（尽管它距今天人们使用的最低端设备仍有一定距离）。此外，我们还将看看
    `M3 Max Macbook (14-core)`、`M1 Pro Macbook (8-core)` 和 `M3 Max` 在 Chrome 开发工具中设置为
    `10x` 限流时的表现。为了使这些设备充分发挥优势，我们将连接到相当高速的互联网（1Gbps），使用的WiFi路由器在负载下的延迟低于大多数同类产品。我们将研究一些博客平台和微博平台（本博客、Substack、Medium、Ghost、Hugo、Tumblr、Mastodon、Twitter、Threads、Bluesky、Patreon）、论坛平台（Discourse、Reddit、Quora、vBulletin、XenForo、phpBB
    和 myBB）以及小型企业常用的平台（Wix、Squarespace、Shopify 和再次是 WordPress）。
- en: In the table below, every row represents a website and every non-label column
    is a metric. After the website name column, we have the compressed size transferred
    over the wire (`wire`) and the raw, uncompressed, size (`raw`). Then we have,
    for each device, Largest Contentful Paint* (`LCP*`) and CPU usage on the main
    thread (`CPU`). Google's docs explain `LCP` as
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在下表中，每一行代表一个网站，每个非标签列都是一个指标。在网站名称列之后，我们有通过传输的压缩大小 (`wire`) 和原始未压缩大小 (`raw`)。然后我们有每个设备的最大内容绘制时间*
    (`LCP*`) 和主线程 CPU 使用率 (`CPU`)。Google 的文档解释 `LCP` 如
- en: Largest Contentful Paint (LCP) measures when a user perceives that the largest
    content of a page is visible. The metric value for LCP represents the time duration
    between the user initiating the page load and the page rendering its primary content
  id: totrans-split-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 最大内容绘制时间（LCP）指的是用户感知到页面中最大内容可见的时间。LCP 指标的值表示用户启动页面加载到页面呈现其主要内容之间的时间。
- en: '`LCP` is a common optimization target because it''s presented as one of the
    primary metrics in Google PageSpeed Insights, a "Core Web Vital" metric. There''s
    an asterisk next to `LCP` as used in this document because, `LCP` as measured
    by Chrome is about painting a large fraction of the screen, as opposed to the
    definition above, which is about content. As sites have optimized for `LCP`, it''s
    not uncommon to have a large paint (update) that''s completely useless to the
    user, with the actual content of the page appearing well after the `LCP`. In cases
    where that happens, I''ve used the timestamp when useful content appears, not
    the `LCP` as defined by when a large but useless update occurs. The full details
    of the tests and why these metrics were chosen are discussed in an appendix.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`LCP` 是一个常见的优化目标，因为它被视为 Google PageSpeed Insights 的主要指标之一，是“核心网页关键指标”。本文档中使用
    `LCP` 时有一个星号，因为 Chrome 测量的 `LCP` 是指绘制屏幕的大部分区域，而不是上述定义中的内容。随着网站对 `LCP` 的优化，经常出现大而无用的更新，实际内容在
    `LCP` 之后才显现。在这种情况下，我使用有用内容出现的时间戳，而不是 `LCP` 的定义时间。关于测试的详细信息以及选择这些指标的原因将在附录中讨论。'
- en: Although CPU time isn't a "Core Web Vital", it's presented here because it's
    a simple metric that's highly correlated with my and other users' perception of
    usability on slow devices. See appendix for more detailed discussion on this.
    One reason CPU time works as a metric is that, if a page has great numbers for
    all other metrics but uses a ton of CPU time, the page is not going to be usable
    on a slow device. If it takes 100% CPU for 30 seconds, the page will be completely
    unusable for 30 seconds, and if it takes 50% CPU for 60 seconds, the page will
    be barely usable for 60 seconds, etc. Another reason it works is that, relative
    to commonly used metrics, it's hard to cheat on CPU time and make optimizations
    that significantly move the number without impacting user experience.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: CPU 时间虽不是“核心 Web 要素”，但由于它是一个简单的指标，与我和其他用户在慢速设备上的可用性感知高度相关，因此在此提供。有关此内容的更详细讨论，请参见附录。CPU
    时间作为指标之所以有效，一个原因是，如果页面在其他所有指标上表现出色，但使用了大量 CPU 时间，该页面在慢速设备上将无法使用。如果需要 100% 的 CPU
    30 秒钟，页面将完全无法使用 30 秒钟；如果需要 50% 的 CPU 60 秒钟，页面在 60 秒钟内将几乎无法使用，等等。另一个原因是，相对于常用指标，CPU
    时间很难作弊，即使进行优化也很难显著提高数字而不影响用户体验。
- en: The color scheme in the table below is that, for sizes, more green = smaller
    / fast and more red = larger / slower. Extreme values are in black.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 表格中的颜色方案如下，对于大小来说，越绿表示更小/更快，越红表示更大/更慢。极端值为黑色。
- en: '| Site | Size | M3 Max | M1 Pro | M3/10 | Tecno S8C | Itel P32 |'
  id: totrans-split-16
  prefs: []
  type: TYPE_TB
  zh: '| Site | Size | M3 Max | M1 Pro | M3/10 | Tecno S8C | Itel P32 |'
- en: '| wire | raw | LCP* | CPU | LCP* | CPU | LCP* | CPU | LCP* | CPU | LCP* | CPU
    |'
  id: totrans-split-17
  prefs: []
  type: TYPE_TB
  zh: '| wire | raw | LCP* | CPU | LCP* | CPU | LCP* | CPU | LCP* | CPU | LCP* | CPU
    |'
- en: '| danluu.com | 6kB | 18kB | 50ms | 20ms | 50ms | 30ms | 0.2s | 0.3s | 0.4s
    | 0.3s | 0.5s | 0.5s |'
  id: totrans-split-18
  prefs: []
  type: TYPE_TB
  zh: '| danluu.com | 6kB | 18kB | 50ms | 20ms | 50ms | 30ms | 0.2s | 0.3s | 0.4s
    | 0.3s | 0.5s | 0.5s |'
- en: '| HN | 11kB | 50kB | 0.1s | 30ms | 0.1s | 30ms | 0.3s | 0.3s | 0.5s | 0.5s
    | 0.7s | 0.6s |'
  id: totrans-split-19
  prefs: []
  type: TYPE_TB
  zh: '| HN | 11kB | 50kB | 0.1s | 30ms | 0.1s | 30ms | 0.3s | 0.3s | 0.5s | 0.5s
    | 0.7s | 0.6s |'
- en: '| MyBB | 0.1MB | 0.3MB | 0.3s | 0.1s | 0.3s | 0.1s | 0.6s | 0.6s | 0.8s | 0.8s
    | 2.1s | 1.9s |'
  id: totrans-split-20
  prefs: []
  type: TYPE_TB
  zh: '| MyBB | 0.1MB | 0.3MB | 0.3s | 0.1s | 0.3s | 0.1s | 0.6s | 0.6s | 0.8s | 0.8s
    | 2.1s | 1.9s |'
- en: '| phpBB | 0.4MB | 0.9MB | 0.3s | 0.1s | 0.4s | 0.1s | 0.7s | 1.1s | 1.7s |
    1.5s | 4.1s | 3.9s |'
  id: totrans-split-21
  prefs: []
  type: TYPE_TB
  zh: '| phpBB | 0.4MB | 0.9MB | 0.3s | 0.1s | 0.4s | 0.1s | 0.7s | 1.1s | 1.7s |
    1.5s | 4.1s | 3.9s |'
- en: '| WordPress | 1.4MB | 1.7MB | 0.2s | 60ms | 0.2s | 80ms | 0.7s | 0.7s | 1s
    | 1.5s | 1.2s | 2.5s |'
  id: totrans-split-22
  prefs: []
  type: TYPE_TB
  zh: '| WordPress | 1.4MB | 1.7MB | 0.2s | 60ms | 0.2s | 80ms | 0.7s | 0.7s | 1s
    | 1.5s | 1.2s | 2.5s |'
- en: '| WordPress (old) | 0.3MB | 1.0MB | 80ms | 70ms | 90ms | 90ms | 0.4s | 0.9s
    | 0.7s | 1.7s | 1.1s | 1.9s |'
  id: totrans-split-23
  prefs: []
  type: TYPE_TB
  zh: '| WordPress（旧版） | 0.3MB | 1.0MB | 80ms | 70ms | 90ms | 90ms | 0.4s | 0.9s |
    0.7s | 1.7s | 1.1s | 1.9s |'
- en: '| XenForo | 0.3MB | 1.0MB | 0.4s | 0.1s | 0.6s | 0.2s | 1.4s | 1.5s | 1.5s
    | 1.8s | FAIL | FAIL |'
  id: totrans-split-24
  prefs: []
  type: TYPE_TB
  zh: '| XenForo | 0.3MB | 1.0MB | 0.4s | 0.1s | 0.6s | 0.2s | 1.4s | 1.5s | 1.5s
    | 1.8s | FAIL | FAIL |'
- en: '| Ghost | 0.7MB | 2.4MB | 0.1s | 0.2s | 0.2s | 0.2s | 1.1s | 2.2s | 1s | 2.4s
    | 1.1s | 3.5s |'
  id: totrans-split-25
  prefs: []
  type: TYPE_TB
  zh: '| Ghost | 0.7MB | 2.4MB | 0.1s | 0.2s | 0.2s | 0.2s | 1.1s | 2.2s | 1s | 2.4s
    | 1.1s | 3.5s |'
- en: '| vBulletin | 1.2MB | 3.4MB | 0.5s | 0.2s | 0.6s | 0.3s | 1.1s | 2.9s | 4.4s
    | 4.8s | 13s | 16s |'
  id: totrans-split-26
  prefs: []
  type: TYPE_TB
  zh: '| vBulletin | 1.2MB | 3.4MB | 0.5s | 0.2s | 0.6s | 0.3s | 1.1s | 2.9s | 4.4s
    | 4.8s | 13s | 16s |'
- en: '| Squarespace | 1.9MB | 7.1MB | 0.1s | 0.4s | 0.2s | 0.4s | 0.7s | 3.6s | 14s
    | 5.1s | 16s | 19s |'
  id: totrans-split-27
  prefs: []
  type: TYPE_TB
  zh: '| Squarespace | 1.9MB | 7.1MB | 0.1s | 0.4s | 0.2s | 0.4s | 0.7s | 3.6s | 14s
    | 5.1s | 16s | 19s |'
- en: '| Mastodon | 3.8MB | 5.3MB | 0.2s | 0.3s | 0.2s | 0.4s | 1.8s | 4.7s | 2.0s
    | 7.6s | FAIL | FAIL |'
  id: totrans-split-28
  prefs: []
  type: TYPE_TB
  zh: '| Mastodon | 3.8MB | 5.3MB | 0.2s | 0.3s | 0.2s | 0.4s | 1.8s | 4.7s | 2.0s
    | 7.6s | FAIL | FAIL |'
- en: '| Tumblr | 3.5MB | 7.1MB | 0.7s | 0.6s | 1.1s | 0.7s | 1.0s | 7.0s | 14s |
    7.9s | 8.7s | 8.7s |'
  id: totrans-split-29
  prefs: []
  type: TYPE_TB
  zh: '| Tumblr | 3.5MB | 7.1MB | 0.7s | 0.6s | 1.1s | 0.7s | 1.0s | 7.0s | 14s |
    7.9s | 8.7s | 8.7s |'
- en: '| Quora | 0.6MB | 4.9MB | 0.7s | 1.2s | 0.8s | 1.3s | 2.6s | 8.7s | FAIL |
    FAIL | 19s | 29s |'
  id: totrans-split-30
  prefs: []
  type: TYPE_TB
  zh: '| Quora | 0.6MB | 4.9MB | 0.7s | 1.2s | 0.8s | 1.3s | 2.6s | 8.7s | FAIL |
    FAIL | 19s | 29s |'
- en: '| Bluesky | 4.8MB | 10MB | 1.0s | 0.4s | 1.0s | 0.5s | 5.1s | 6.0s | 8.1s |
    8.3s | FAIL | FAIL |'
  id: totrans-split-31
  prefs: []
  type: TYPE_TB
  zh: '| Bluesky | 4.8MB | 10MB | 1.0s | 0.4s | 1.0s | 0.5s | 5.1s | 6.0s | 8.1s |
    8.3s | FAIL | FAIL |'
- en: '| Wix | 7.0MB | 21MB | 2.4s | 1.1s | 2.5s | 1.2s | 18s | 11s | 5.6s | 10s |
    FAIL | FAIL |'
  id: totrans-split-32
  prefs: []
  type: TYPE_TB
  zh: '| Wix | 7.0MB | 21MB | 2.4s | 1.1s | 2.5s | 1.2s | 18s | 11s | 5.6s | 10s |
    FAIL | FAIL |'
- en: '| Substack | 1.3MB | 4.3MB | 0.4s | 0.5s | 0.4s | 0.5s | 1.5s | 4.9s | 14s
    | 14s | FAIL | FAIL |'
  id: totrans-split-33
  prefs: []
  type: TYPE_TB
  zh: '| Substack | 1.3MB | 4.3MB | 0.4s | 0.5s | 0.4s | 0.5s | 1.5s | 4.9s | 14s
    | 14s | FAIL | FAIL |'
- en: '| Threads | 9.3MB | 13MB | 1.5s | 0.5s | 1.6s | 0.7s | 5.1s | 6.1s | 6.4s |
    16s | 28s | 66s |'
  id: totrans-split-34
  prefs: []
  type: TYPE_TB
  zh: '| Threads | 9.3MB | 13MB | 1.5s | 0.5s | 1.6s | 0.7s | 5.1s | 6.1s | 6.4s |
    16s | 28s | 66s |'
- en: '| Twitter | 4.7MB | 11MB | 2.6s | 0.9s | 2.7s | 1.1s | 5.6s | 6.6s | 12s |
    19s | 24s | 43s |'
  id: totrans-split-35
  prefs: []
  type: TYPE_TB
  zh: '| Twitter | 4.7MB | 11MB | 2.6s | 0.9s | 2.7s | 1.1s | 5.6s | 6.6s | 12s |
    19s | 24s | 43s |'
- en: '| Shopify | 3.0MB | 5.5MB | 0.4s | 0.2s | 0.4s | 0.3s | 0.7s | 2.3s | 10s |
    26s | FAIL | FAIL |'
  id: totrans-split-36
  prefs: []
  type: TYPE_TB
  zh: '| Shopify | 3.0MB | 5.5MB | 0.4s | 0.2s | 0.4s | 0.3s | 0.7s | 2.3s | 10s |
    26s | FAIL | FAIL |'
- en: '| Discourse | 2.6MB | 10MB | 1.1s | 0.5s | 1.5s | 0.6s | 6.5s | 5.9s | 15s
    | 26s | FAIL | FAIL |'
  id: totrans-split-37
  prefs: []
  type: TYPE_TB
  zh: '| Discourse | 2.6MB | 10MB | 1.1s | 0.5s | 1.5s | 0.6s | 6.5s | 5.9s | 15s
    | 26s | FAIL | FAIL |'
- en: '| Patreon | 4.0MB | 13MB | 0.6s | 1.0s | 1.2s | 1.2s | 1.2s | 14s | 1.7s |
    31s | 9.1s | 45s |'
  id: totrans-split-38
  prefs: []
  type: TYPE_TB
  zh: '| Patreon | 4.0MB | 13MB | 0.6s | 1.0s | 1.2s | 1.2s | 1.2s | 14s | 1.7s |
    31s | 9.1s | 45s |'
- en: '| Medium | 1.2MB | 3.3MB | 1.4s | 0.7s | 1.4s | 1s | 2s | 11s | 2.8s | 33s
    | 3.2s | 63s |'
  id: totrans-split-39
  prefs: []
  type: TYPE_TB
  zh: '| Medium | 1.2MB | 3.3MB | 1.4s | 0.7s | 1.4s | 1s | 2s | 11s | 2.8s | 33s
    | 3.2s | 63s |'
- en: '| Reddit | 1.7MB | 5.4MB | 0.9s | 0.7s | 0.9s | 0.9s | 6.2s | 12s | 1.2s |
    ∞ | FAIL | FAIL |'
  id: totrans-split-40
  prefs: []
  type: TYPE_TB
  zh: '| Reddit | 1.7MB | 5.4MB | 0.9s | 0.7s | 0.9s | 0.9s | 6.2s | 12s | 1.2s |
    ∞ | FAIL | FAIL |'
- en: At a first glance, the table seems about right, in that the sites that feel
    slow unless you have a super fast device show up as slow in the table (as in,
    `max(LCP*,CPU))` is high on lower-end devices). When I polled folks about what
    platforms they thought would be fastest and slowest on our slow devices ([Mastodon](https://mastodon.social/@danluu/111994437263038931),
    [Twitter](https://twitter.com/danluu/status/1761875263359537652), [Threads](https://www.threads.net/@danluu.danluu/post/C3yVpfKS-RP)),
    they generally correctly predicted that Wordpress and Ghost would be faster than
    Substack and Medium, and that Discourse would be much slower than old PHP forums
    like phpBB, XenForo, and vBulletin. I also pulled Google PageSpeed Insights (PSI)
    scores for pages (not shown) and the correlation isn't as strong with those numbers
    because a handful of sites have managed to optimize their PSI scores without actually
    speeding up their pages for users.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，这张表看起来是正确的，即除非你有超快速设备，否则感觉缓慢的网站在表中显示为慢（如`max(LCP*,CPU)`在低端设备上很高）。当我询问人们对我们的慢设备上哪些平台速度最快和最慢的看法时（[Mastodon](https://mastodon.social/@danluu/111994437263038931)，[Twitter](https://twitter.com/danluu/status/1761875263359537652)，[Threads](https://www.threads.net/@danluu.danluu/post/C3yVpfKS-RP)），他们普遍正确地预测到
    Wordpress 和 Ghost 比 Substack 和 Medium 更快，而 Discourse 比旧的 PHP 论坛如 phpBB、XenForo
    和 vBulletin 慢得多。我还提取了 Google PageSpeed Insights（PSI）页面的分数（未显示），与这些数字的相关性并不强，因为一些网站设法优化了它们的
    PSI 分数，但实际上并没有加快页面加载速度给用户。
- en: If you've never used a low-end device like this, the general experience is that
    many sites are unusable on the device and loading anything resource intensive
    (an app or a huge website) can cause crashes. Doing something too intense in a
    resource intensive app can also cause crashes. While [reviews note](https://www.youtube.com/watch?v=U1JMRFQWK70)
    that [you can run PUBG and other 3D games with decent performance](https://www.youtube.com/watch?v=McawfNlydqk)
    on a `Tecno Spark 8C`, this doesn't mean that the device is fast enough to read
    posts on modern text-centric social media platforms or modern text-centric web
    forums. While `40fps` is achievable in PUBG, we can easily see less than `0.4fps`
    when scrolling on these sites.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从未使用过像这样的低端设备，一般的体验是，许多网站在这种设备上是无法使用的，加载任何资源密集型的东西（应用程序或大型网站）可能会导致崩溃。在资源密集型应用程序中做过于激烈的事情也可能会导致崩溃。虽然[评论指出](https://www.youtube.com/watch?v=U1JMRFQWK70)你可以在`Tecno
    Spark 8C`上以相当好的性能运行 PUBG 和其他3D游戏，但这并不意味着该设备速度足够快以阅读现代文本为中心的社交媒体平台或现代文本为中心的网络论坛上的帖子。虽然在PUBG中可以达到`40fps`，但在这些网站上滚动时我们可以轻易看到不到`0.4fps`。
- en: We can see from the table how many of the sites are unusable if you have a slow
    device. All of the pages with `10s+ CPU` are a fairly bad experience even after
    the page loads. Scrolling is very jerky, frequently dropping to a few frames per
    second and sometimes well below. When we tap on any link, the delay is so long
    that we can't be sure if our tap actually worked. If we tap again, we can get
    the dreaded situation where the first tap registers, which then causes the second
    tap to do the wrong thing, but if we wait, we often end up waiting too long because
    the original tap didn't actually register (or it registered, but not where we
    thought it did). Although MyBB doesn't serve up a mobile site and is penalized
    by Google for not having a mobile friendly page, it's actually much more usable
    on these slow mobiles than all but the fastest sites because scrolling and tapping
    actually work.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从表中看出，如果你有一个慢速设备，有多少网站是无法使用的。所有页面的`10s+ CPU`在页面加载后体验都很差。滚动非常卡顿，频繁降至每秒几帧甚至更低。当我们点击任何链接时，延迟如此之长，以至于我们无法确定我们的点击是否有效。如果我们再次点击，可能会出现第一次点击注册了，然后导致第二次点击执行错误操作的可怕情况，但如果我们等待，往往会等得太久，因为原始的点击实际上没有注册（或者注册了，但不是我们认为的位置）。虽然
    MyBB 不提供移动网站并因此被 Google 处罚，因为没有移动友好页面，但实际上在这些慢速移动设备上比大多数速度更快的网站更可用，因为滚动和点击实际上是有效的。
- en: Another thing we can see is how much variance there is in the relative performance
    on different devices. For example, comparing an `M3/10` and a `Tecno Spark 8C`,
    for danluu.com and Ghost, an `M3/10` gives a halfway decent approximation of the
    `Tecno Spark 8C` (although danluu.com loads much too quickly), but the `Tecno
    Spark 8C` is about three times slower (`CPU`) for Medium, Substack, and Twitter,
    roughly four times slower for Reddit and Discourse, and over an order of magnitude
    faster for Shopify. For Wix, the `CPU` approximation is about accurate, but our
    ``Tecno Spark 8C` is more than 3 times slower on `LCP*`. It's great that Chrome
    lets you conveniently simulate a slower device from the convenience of your computer,
    but just enabling Chrome's CPU throttling (or using any combination of out-of-the-box
    options that are available) gives fairly different results than we get on many
    real devices. The full reasons for this are beyond the scope of the post; for
    the purposes of this post, it's sufficient to note that slow pages are often super-linearly
    slow as devices get slower and that slowness on one page doesn't strongly predict
    slowness on another page.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到在不同设备上相对性能存在多大差异。例如，比较`M3/10`和`Tecno Spark 8C`，对于danluu.com和Ghost来说，`M3/10`能相对合理地近似`Tecno
    Spark 8C`（尽管danluu.com加载速度过快），但在Medium、Substack和Twitter上，`Tecno Spark 8C`的速度大约慢了三倍（`CPU`），在Reddit和Discourse上大约慢了四倍，并且在Shopify上快了一个数量级。对于Wix来说，`CPU`近似值是准确的，但我们的`Tecno
    Spark 8C`在`LCP*`上比较慢了超过三倍。Chrome允许您方便地在计算机上模拟较慢的设备，但仅启用Chrome的CPU限制（或使用其他可用的组合选项）与我们在许多真实设备上得到的结果有所不同。这些完整的原因超出了本文的范围；就本文的目的而言，只需指出，随着设备变慢，慢页面通常表现出超线性的慢，并且一页上的慢不强烈预测另一页上的慢。
- en: If take a site-centric view instead of a device-centric view, another way to
    look at it is that sites like Discourse, Medium, and Reddit, don't use all that
    much CPU on our fast `M3` and `M1` computers, but they're among the slowest on
    our `Tecno Spark 8C` (Reddit's CPU is shown as `∞` because, no matter how long
    we wait with no interaction, Reddit uses `~90% CPU`). Discourse also sometimes
    crashed the browser after interacting a bit or just waiting a while. For example,
    one time, the browser crashed after loading Discourse, scrolling twice, and then
    leaving the device still for a minute or two. For consistency's sake, this wasn't
    marked as `FAIL` in the table since the page did load but, realistically, having
    a page so resource intensive that the browser crashes is a significantly worse
    user experience than any of the `FAIL` cases in the table. When we looked at how
    [web bloat impacts users with slow connections](/web-bloat/), we found that much
    of the web was unusable for people with slow connections and slow devices are
    no different.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从站点中心的视角而不是设备中心的视角来看，另一种观察方式是像Discourse、Medium和Reddit这样的站点在我们的快速`M3`和`M1`电脑上不会使用太多CPU，但它们在我们的`Tecno
    Spark 8C`上是最慢的（Reddit的CPU显示为`∞`，因为无论我们等多久都没有交互，Reddit都会使用约`~90%`的CPU）。Discourse有时在互动一段时间后会导致浏览器崩溃，或者仅仅是等待一段时间。例如，有一次加载Discourse后，滚动两次并在设备静止一两分钟后，浏览器崩溃了。为了保持一致性，这并未标记为表格中的`FAIL`，因为页面确实加载了，但实际上，拥有一个资源密集型页面导致浏览器崩溃的用户体验远比表格中任何`FAIL`案例都要糟糕得多。当我们研究了[网页膨胀如何影响使用速度慢的连接的用户](/web-bloat/)时，我们发现对于那些网络连接慢和设备慢的人来说，许多网络对其是不可用的。
- en: Another pattern we can see is how the older sites are, in general, faster than
    the newer ones, with sites that (visually) look like they haven't been updated
    in a decade or two tending to be among the fastest. For example, MyBB, the least
    modernized and oldest looking forum is `3.6x / 5x faster (LCP* / CPU)` than Discourse
    on the `M3`, but on the `Tecno Spark 8C`, the difference is `19x / 33x` and, given
    the overall scaling, it seems safe to guess that the difference would be even
    larger on the Itel P32 if Discourse worked on such a cheap device.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到另一个模式是老旧网站通常比更新的网站更快，看起来几乎没有更新过十年或两十年的网站通常是最快的。例如，MyBB这个外观最不现代化、最老的论坛比在`M3`上的Discourse快`3.6x
    / 5x`（`LCP* / CPU`），但在`Tecno Spark 8C`上，差异是`19x / 33x`，考虑到整体规模，可以安全地猜测如果Discourse能在Itel
    P32这样的廉价设备上运行，差异将会更大。
- en: Another example is Wordpress (old) vs. newer, trendier, blogging platforms like
    Medium and Substack. Wordpress (old) is is `17.5x / 10x faster (LCP* / CPU)` than
    Medium and `5x / 7x faster (LCP* / CPU)` faster than Substack on our `M3 Max`,
    and `4x / 19x` and `20x / 8x` faster, respectively, on our `Tecno Spark 8C`. Ghost
    is a notable exception to this, being a modern platform (launched a year after
    Medium) that's competitive with older platforms (modern Wordpress is also arguably
    an exception, but many folks would probably still consider that to be an old platform).
    Among forums, NodeBB also seems to be a bit of an exception (see appendix for
    details).
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是 Wordpress（老）与 Medium 和 Substack 等更新潮的博客平台的比较。在我们的 `M3 Max` 上，Wordpress（老）比
    Medium 快 `17.5x / 10x`（LCP* / CPU），比 Substack 快 `5x / 7x`；在我们的 `Tecno Spark 8C`
    上，分别比 Medium 快 `4x / 19x` 和比 Substack 快 `20x / 8x`。Ghost 是一个显著的例外，作为一个现代平台（在 Medium
    后推出），与老平台竞争力强（现代的 Wordpress 也可以算是一个例外，但许多人可能仍然认为它是一个老平台）。在论坛中，NodeBB 也似乎是一个例外（详细信息见附录）。
- en: Sites that use modern techniques like partially loading the page and then dynamically
    loading the rest of it, such as Discourse, Reddit, and Substack, tend to be less
    usable than the scores in the table indicate. Although, in principle, you could
    build such a site in a simple way that works well with cheap devices but, in practice
    sites that use dynamic loading tend to be complex enough that the sites are extremely
    janky on low-end devices. It's generally difficult or impossible to scroll a predictable
    distance, which means that users will sometimes accidentally trigger more loading
    by scrolling too far, causing the page to lock up. Many pages actually remove
    the parts of the page you scrolled past as you scroll; all such pages are essentially
    unusable. Other basic web features, like page search, also generally stop working.
    Pages with this kind of dynamic loading can't rely on the simple and fast ctrl/command+F
    search and have to build their own search. How well this works varies (this used
    to work quite well in Google docs, but for the past few months or maybe a year,
    it takes so long to load that I have to deliberately wait after opening a doc
    to avoid triggering the browser's useless built in search; Discourse search has
    never really worked on slow devices or even not very fast but not particular slow
    devices).
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用现代技术，如部分加载页面，然后动态加载其余内容的网站，例如 Discourse、Reddit 和 Substack，通常比表中的得分所示的可用性差。虽然原则上可以以简单的方式构建这样的网站，使其在廉价设备上表现良好，但实际上使用动态加载的网站往往足够复杂，以至于在低端设备上非常卡顿。通常很难或不可能滚动预测距离，这意味着用户有时会因为滚动太远而意外触发更多加载，导致页面锁定。许多页面实际上会在您滚动过去的页面部分后删除这些部分；所有这些页面基本上都无法使用。其他基本的网页功能，如页面搜索，通常也无法使用。这种动态加载的页面不能依赖简单快速的
    ctrl/command+F 搜索，而必须构建自己的搜索。这种搜索的效果因情况而异（以前在 Google 文档中这样做效果非常好，但在过去的几个月或一年里，加载时间太长，我不得不在打开文档后故意等待，以避免触发浏览器无用的内置搜索；Discourse
    的搜索从来没有在慢设备上或者即使不是特别慢但不快的设备上真正工作过）。
- en: In principle, these modern pages that burn a ton of CPU when loading could be
    doing pre-work that means that later interactions on the page are faster and cheaper
    than on the pages that do less up-front work (this is a common argument in favor
    of these kinds of pages), but that's not the case for pages tested, which are
    slower to load initially, slower on subsequent loads, and slower after they've
    loaded.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，这些现代页面在加载时会消耗大量 CPU，可能在前期做了一些预处理工作，导致后续页面交互比不做前期工作的页面更快更便宜（这是支持这类页面的常见论点），但在测试的页面上并非如此。这些页面的初始加载速度更慢，后续加载也更慢，加载后也更慢。
- en: 'To understand why the theoretical idea that doing all this work up-front doesn''t
    generally result in a faster experience later, this exchange between a distinguished
    engineer at Google and one of the founders of Discourse (and CEO at the time)
    is illustrative, in [a discussion where the founder of Discourse says that you
    should test mobile sites on laptops with throttled bandwidth but not throttled
    CPU](/jeff-atwood-trashes-qualcomm-engineering.png):'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解为什么理论上做所有这些预先工作通常不会导致后来的体验更快，谷歌一位杰出工程师和 Discourse 的创始人（当时是 CEO）之间的这次交流很有说明性，在[讨论中，Discourse
    的创始人表示应该在带有限制带宽但不限制 CPU 的笔记本电脑上测试移动站点](/jeff-atwood-trashes-qualcomm-engineering.png)：
- en: '**Google**: *you* also don''t have slow 3G. These two settings go together.
    Empathy needs to extend beyond iPhone XS users in a tunnel.'
  id: totrans-split-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**谷歌**：*你* 也没有慢 3G。这两个设置是相关的。同情心需要延伸到隧道中的 iPhone XS 用户以外。'
- en: '**Discourse**: Literally any phone of vintage iPhone 6 or greater is basically
    as fast as the "average" laptop. You have to understand how brutally bad Qualcomm
    is at their job. Look it up if you don''t believe me.'
  id: totrans-split-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Discourse**: 实际上，任何一部iPhone 6或更新的手机基本上都和“平均”笔记本电脑一样快。你必须了解Qualcomm在他们的工作上表现得多么糟糕。如果你不信，请查一下。'
- en: '**Google**: I don''t need to believe you. I know. This is well known by people
    who care. My point was that just like not everyone has a fast connection not everyone
    has a fast phone. Certainly the iPhone 6 is frequently very CPU bound on real
    world websites. But that isn''t the point.'
  id: totrans-split-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google**: 我不需要相信你。我知道。关心这些的人都知道这个。我的观点是，就像不是每个人都有快速连接一样，也不是每个人都有快速手机。当然，iPhone
    6 在真实世界的网站上经常非常受CPU限制。但这不是重点。'
- en: '**Discourse**: we''ve been trending towards infinite CPU speed for decades
    now (and we''ve been asymptotically there for ~5 years on desktop), what we are
    not and will never trend towards is infinite bandwidth. Optimize for the things
    that matter. and I have zero empathy for @qualcomm. Fuck Qualcomm, they''re terrible
    at their jobs. I hope they go out of business and the ground their company existed
    on is plowed with salt so nothing can ever grow there again.'
  id: totrans-split-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Discourse**: 我们数十年来一直在朝着无限的CPU速度趋势发展（并且在桌面上已经渐近于这一趋势已有约5年），但我们永远不会朝着无限带宽的方向发展。优化那些真正重要的事情。对@qualcomm，我一点同情心都没有。该死的Qualcomm，他们在自己的工作上表现得太差劲了。我希望他们破产，他们公司的土地上撒盐，以致永远不再生长任何东西。'
- en: '**Google**: Mobile devices are not at all bandwidth constraint in most circumstances.
    They are latency constraint. Even the latest iPhone is CPU constraint before it
    is bandwidth constraint. If you do well on 4x slow down on a MBP things are pretty
    alright'
  id: totrans-split-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google**: 在大多数情况下，移动设备并不受带宽限制。它们受到的是延迟的限制。即使是最新的iPhone，在成为带宽限制之前也是CPU限制。如果你在MBP上的速度减慢4倍仍表现不错。'
- en: '...'
  id: totrans-split-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '...'
- en: '**Google**: Are 100% of users on iOS?'
  id: totrans-split-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google**: 使用iOS的用户占总用户的百分之百吗？'
- en: '**Discourse**: The influential users who spend money tend to be, I’ll tell
    you that ... Pointless to worry about cpu, it is effectively infinite already
    on iOS, and even with Qualcomm’s incompetence, will be within 4 more years on
    their embarrassing SoCs as well'
  id: totrans-split-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Discourse**: 那些花钱的有影响力的用户，我可以告诉你... 担心CPU是毫无意义的，在iOS上它已经几乎是无限的，即使在Qualcomm的无能下，在他们令人尴尬的SoCs上再过4年也会如此。'
- en: When someone asks the founder of Discourse, "just wondering why you hate them",
    he responds with a link that cites the Kraken and Octane benchmarks from [this
    Anandtech review](https://www.anandtech.com/show/9146/the-samsung-galaxy-s6-and-s6-edge-review/5),
    which have the Qualcomm chip at 74% and 85% of the performance of the then-current
    Apple chip, respectively.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当有人问Discourse的创始人，“只是想知道你为什么讨厌他们”，他回答了一个链接，引用了Anandtech评测中Kraken和Octane基准测试结果，显示Qualcomm芯片分别达到了当时当前苹果芯片性能的74%和85%。
- en: The founder and then-CEO of Discourse considers Qualcomm's mobile performance
    embarrassing and finds this so offensive that he thinks Qualcomm engineers should
    all lose their jobs for delivering 74% to 85% of the performance of Apple. Apple
    has what I consider to be an all-time great performance team. Reasonable people
    could disagree on that, but one has to at least think of them as a world-class
    team. So, producing a product with 74% to 85% of an all-time-great team is considered
    an embarrassment worthy of losing your job.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: Discourse的创始人兼前CEO认为Qualcomm的移动性能令人尴尬，并认为这太令人反感，以至于他认为Qualcomm的工程师们应该因为提供了苹果性能的74%到85%而失去工作。苹果拥有我认为是有史以来最伟大的性能团队。理性的人可能对此持不同意见，但至少必须把他们看作是世界一流的团队。因此，生产出仅达到全球顶级团队74%到85%性能的产品被视为一种令人丢脸、足以失去工作的尴尬。
- en: There are two attitudes on display here which I see in a lot of software folks.
    First, that CPU speed is infinite and one shouldn't worry about CPU optimization.
    And second, that gigantic speedups from hardware should be expected and the only
    reason hardware engineers wouldn't achieve them is due to spectacular incompetence,
    so the slow software should be blamed on hardware engineers, not software engineers.
    Donald Knuth expressed a similar sentiment in
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里展示了两种软件人员常见的态度。第一种是CPU速度是无限的，不必担心CPU优化。第二种是期望从硬件获得巨大的加速，而硬件工程师未能实现这一点只能归因于极度的无能，因此应该将慢速软件归咎于硬件工程师，而不是软件工程师。唐纳德·克努斯在《计算机程序设计艺术》中表达了类似的观点。
- en: 'I might as well flame a bit about my personal unhappiness with the current
    trend toward multicore architecture. To me, it looks more or less like the hardware
    designers have run out of ideas, and that they’re trying to pass the blame for
    the future demise of Moore’s Law to the software writers by giving us machines
    that work faster only on a few key benchmarks! I won’t be surprised at all if
    the whole multiithreading idea turns out to be a flop, worse than the "Itanium"
    approach that was supposed to be so terrific—until it turned out that the wished-for
    compilers were basically impossible to write. Let me put it this way: During the
    past 50 years, I’ve written well over a thousand programs, many of which have
    substantial size. I can’t think of even five of those programs that would have
    been enhanced noticeably by parallelism or multithreading. Surely, for example,
    multiple processors are no help to TeX ... I know that important applications
    for parallelism exist—rendering graphics, breaking codes, scanning images, simulating
    physical and biological processes, etc. But all these applications require dedicated
    code and special-purpose techniques, which will need to be changed substantially
    every few years. Even if I knew enough about such methods to write about them
    in TAOCP, my time would be largely wasted, because soon there would be little
    reason for anybody to read those parts ... The machine I use today has dual processors.
    I get to use them both only when I’m running two independent jobs at the same
    time; that’s nice, but it happens only a few minutes every week.'
  id: totrans-split-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我也想多谈谈我个人对当前多核架构趋势的不满。对我来说，这看起来更像是硬件设计师已经没有了新思路，他们试图把摩尔定律未来的衰退归咎于软件编写者，给我们提供的机器只在少数几个关键基准测试上表现得更快！如果整个多线程的想法最终被证明是一种失败，甚至比预期的"Itanium"方法更糟，我一点也不会感到惊讶——直到事实证明，希望的编译器基本上是不可能编写的。让我这样说吧：在过去的50年里，我写过一千多个程序，其中许多规模相当大。我几乎想不出有哪五个程序会因并行或多线程而显著增强。例如，多处理器对于TeX来说肯定没有任何帮助……我知道并行处理对于渲染图形、破解代码、扫描图像、模拟物理和生物过程等重要应用是必要的，但所有这些应用都需要专门的代码和特定的技术，而且这些技术每隔几年就需要进行大幅度的修改。即使我了解这些方法足够可以在TAOCP中写一些内容，我的时间也会大量浪费，因为很快就没有人有理由去阅读那些部分……我今天使用的机器有双处理器。只有在我同时运行两个独立的作业时才能同时使用它们两个；这很好，但每周只会发生几分钟。
- en: In the case of Discourse, a hardware engineer is an embarrassment not deserving
    of a job if they can't hit 90% of the performance of an all-time-great performance
    team but, as a software engineer, delivering 3% the performance of a non-highly-optimized
    application like MyBB is no problem. In Knuth's case, hardware engineers gave
    programmers a 100x performance increase every decade for decades with little to
    no work on the part of programmers. The moment this slowed down and programmers
    had to adapt to take advantage of new hardware, hardware engineers were "all out
    of ideas", but learning a few "new" (1970s and 1980s era) ideas to take advantage
    of current hardware would be a waste of time. And [we've previously discussed
    Alan Kay's claim that hardware engineers are "unsophisticated" and "uneducated"
    and aren't doing "real engineering" and how we'd get a 1000x speedup if we listened
    to Alan Kay's "sophisticated" ideas](https://www.patreon.com/posts/54329188).
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Discourse来说，如果硬件工程师无法达到全球最优秀性能团队90%的性能水平，他们是一种令人尴尬的存在，不配拥有这份工作。但作为软件工程师，如果只能提供类似于MyBB这样未经高度优化应用程序3%的性能，却不是问题。在Knuth的案例中，几十年来，硬件工程师每十年为程序员带来了100倍的性能提升，而程序员几乎不用付出多少努力。当这种增长放缓并且程序员必须适应利用新硬件时，硬件工程师却"没有新思路"，但学习一些利用当前硬件的"新"（上世纪70年代和80年代的）思想却是浪费时间。而且，我们之前已经讨论过Alan
    Kay的说法，即硬件工程师"不成熟"、"无知"，不从事"真正的工程"，如果听取Alan Kay的"成熟"思想，我们可以获得1000倍的速度提升。
- en: It's fairly common for programmers to expect that hardware will solve all their
    problems, and then, when that doesn't happen, pass the issue onto the user, explaining
    why the programmer needn't do anything to help the user. A question one might
    ask is how much performance improvement programmers have given us. There are cases
    of algorithmic improvements that result in massive speedups but, as we noted above,
    Discourse, the fastest growing forum software today, seems to have given us an
    approximately `1000000x` slowdown in performance.
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对程序员来说，他们普遍期望硬件能解决所有问题，但当事实不是如此时，将问题推给用户，解释为何程序员无需为用户做任何事情是很常见的。一个可能要问的问题是程序员为我们带来了多少性能提升。有些算法改进能带来显著的速度提升，但正如我们上面提到的，Discourse，当今增长最快的论坛软件，似乎给我们带来了大约`1000000x`的性能下降。
- en: Another common attitude on display above is the idea that users who aren't wealthy
    don't matter. When asked if 100% of users are on iOS, the founder of Discourse
    says "The influential users who spend money tend to be, I’ll tell you that". We
    see the same attitude all over comments on [Tonsky's JavaScript Bloat post](https://tonsky.me/blog/js-bloat/),
    with people expressing [cocktail-party sentiments](/cocktail-ideas/) like "Phone
    apps are hundreds of megs, why are we obsessing over web apps that are a few megs?
    Starving children in Africa can download Android apps but not web apps? Come on"
    and "surely no user of gitlab would be poor enough to have a slow device, let's
    be serious" (paraphrased for length).
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见的态度是认为贫困用户并不重要。在被问及是否所有用户都在使用iOS时，Discourse的创始人表示：“那些花钱的有影响力的用户往往是，我可以告诉你这个”。我们在[Tonsky的JavaScript臃肿帖子评论](https://tonsky.me/blog/js-bloat/)中也看到同样的态度，人们表达出像“手机应用程序有几百兆，我们为什么要如此关注几兆的Web应用程序呢？非洲的饥饿儿童可以下载Android应用程序但不能下载Web应用程序吗？得了吧”和“显然gitlab的用户不会太穷到用慢设备，让我们认真点”（为了简化引述而改写）的[鸡尾酒会见解](/cocktail-ideas/)。
- en: But when we look at the size of apps that are downloaded in Africa, we see that
    people who aren't on high-end devices use apps like Facebook Lite (a couple megs)
    and commonly use apps that are a single digit to low double digit number of megabytes.
    There are multiple reasons app makers care about their app size. One is just the
    total storage available on the phone; if you watch real users install apps, they
    often have to delete and uninstall things to put a new app on, so the smaller
    size is both easier to to install and has a lower chance of being uninstalled
    when the user is looking for more space. Another is that, if you look at data
    on app size and usage (I don't know of any public data on this; please pass it
    along if you have something public I can reference), when large apps increase
    the size and memory usage, they get more crashes, which drives down user retention,
    growth, and engagement and, conversely, when they optimize their size and memory
    usage, they get fewer crashes and better user retention, growth, and engagement.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 但是当我们看非洲下载的应用程序的大小时，我们会发现并不是所有用户都使用高端设备，他们使用的应用程序如Facebook Lite（几兆）和常用的几个到两位数兆字节的应用程序。应用程序制造商关心应用程序大小的原因有多个。一个是手机上的总存储空间；如果你看真正的用户安装应用程序，他们经常需要删除和卸载东西来安装新的应用程序，因此较小的大小安装起来更容易，并且在用户寻找更多空间时被卸载的几率更低。另一个是，如果你查看应用程序大小和使用情况的数据（我不知道是否有任何公开数据；如果你有公开的数据可供参考，请告知），当大型应用程序增加大小和内存使用时，它们会导致更多的崩溃，从而降低用户保留率、增长和参与度；相反，当它们优化大小和内存使用时，崩溃减少，用户保留率、增长和参与度更好。
- en: '[Alex Russell points out that iOS has 7% market share in India (a 1.4B person
    market) and 6% market share in Latin America (a 600M person market)](https://infrequently.org/2024/01/performance-inequality-gap-2024/).
    Although the founder of Discourse says that these aren''t "influential users"
    who matter, these are still real human beings. Alex further points out that, according
    to Windows telemetry, which covers the vast majority of desktop users, most laptop/desktop
    users are on low-end machines which are likely slower than a modern iPhone.'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[Alex Russell指出iOS在印度（14亿人口市场）的市场份额为7%，在拉丁美洲（6亿人口市场）为6%](https://infrequently.org/2024/01/performance-inequality-gap-2024/)。尽管Discourse的创始人称这些不是“重要的用户”，但这些依然是真实的人类。Alex进一步指出，根据Windows遥测数据（涵盖了绝大多数桌面用户），大多数笔记本/台式机用户使用的是低端机器，很可能比现代iPhone慢。'
- en: On the bit about no programmers having slow devices, I know plenty of people
    who are using hand-me-down devices that are old and slow. Many of them aren't
    even really poor; they just don't see why (for example) their kid needs a super
    fast device, and they don't understand how much of the modern web works poorly
    on slow devices. After all, the "slow" device can play 3d games and (with the
    right OS) compile codebases like Linux or Chromium, so why shouldn't the device
    be able to interact with a site like gitlab?
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 至于没有程序员使用慢设备的说法，我知道很多人使用旧的、缓慢的传手设备。他们中的许多人甚至并不是真正的贫困；他们只是不明白为什么（例如）他们的孩子需要超快速的设备，他们不明白现代网络在慢设备上运行不佳的原因。毕竟，“慢”设备可以玩
    3D 游戏，并且（通过正确的操作系统）可以编译像 Linux 或 Chromium 这样的代码库，那么为什么设备不能与像 GitLab 这样的网站互动呢？
- en: Contrary to the claim from the founder of Discourse that, within years, every
    Android user will be on some kind of super fast Android device, it's been six
    years since his comment and it's going to be at least a decade before almost everyone
    in the world who's using a phone has a high-speed device and this could easily
    take two decades or more. If you look up marketshare stats for Discourse, it's
    extremely successful; it appears to be the fastest growing forum software in the
    world by a large margin. The impact of having the fastest growing forum software
    in the world created by an organization whose then-leader was willing to state
    that he doesn't really care about users who aren't "influential users who spend
    money", who don't have access to "infinite CPU speed", is that a lot of forums
    are now inaccessible to people who don't have enough wealth to buy a device with
    effectively infinite CPU.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Discourse 创始人声称的相反，在几年内，每个 Android 用户都会使用某种超快速 Android 设备，自从他发表此言论以来已经过去了六年，而且在全球几乎每个使用手机的人都拥有高速设备之前至少还需十年，这可能需要两十年甚至更久。如果查看
    Discourse 的市场份额统计数据，它非常成功；它似乎是世界上增长最快的论坛软件，而且增长幅度非常大。由一个组织创造的世界上增长最快的论坛软件的影响是，其当时的领导者愿意表明他并不真的关心那些不是“有影响力、花钱的用户”，那些没有“无限
    CPU 速度”的用户，这导致许多论坛现在对那些没有足够财富购买设备的人不可访问。
- en: If the founder of Discourse were an anomaly, this wouldn't be too much of a
    problem, but he's just verbalizing the implicit assumptions a lot of programmers
    have, which is why we see that so many modern websites are unusable if you buy
    the income-adjusted equivalent of a new, current generation, iPhone in a low-income
    country.
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Discourse 的创始人是一个例外，这不会是太大的问题，但他只是表达了许多程序员的隐含假设，这就是为什么我们看到如此多的现代网站在低收入国家购买与当前一代
    iPhone 等价的设备时不可用。
- en: '*Thanks to Yossi Kreinen, Fabian Giesen, John O''Nolan, Joseph Scott, Loren
    McIntyre, Daniel Filan, @acidshill, Alex Russell, Chris Adams, Tobias Marschner,
    Matt Stuchlik, @gekitsu@toot.cat, Justin Blank, Andy Kelley, Julian Lam, Matthew
    Thomas, avarcat, @eamon@social.coop, William Ehlhardt, Philip R. Boulain, and
    David Turner for comments/corrections/discussion.*'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢 Yossi Kreinen、Fabian Giesen、John O''Nolan、Joseph Scott、Loren McIntyre、Daniel
    Filan、@acidshill、Alex Russell、Chris Adams、Tobias Marschner、Matt Stuchlik、@gekitsu@toot.cat、Justin
    Blank、Andy Kelley、Julian Lam、Matthew Thomas、avarc、@eamon@social.coop、William Ehlhardt、Philip
    R. Boulain 和 David Turner 提供的评论、更正和讨论。*'
- en: 'Appendix: gaming LCP'
  id: totrans-split-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附录：游戏 LCP
- en: We noted above that we used `LCP*` and not `LCP`. This is because `LCP` basically
    measures when the largest change happens. When this metric was not deliberately
    gamed in ways that don't benefit the user, this was a great metric, but this metric
    has become less representative of the actual user experience as more people have
    gamed it. In the less blatant cases, people do small optimizations that improve
    `LCP` but barely improve or don't improve the actual user experience.
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面指出我们使用 `LCP*` 而不是 `LCP`。这是因为 `LCP` 基本上是测量最大变化发生的时间。当这个度量标准没有被故意操纵以不符合用户利益时，这是一个很好的度量标准，但随着更多的人操纵它，这个度量标准已经不再代表实际用户体验。在不那么明显的情况下，人们进行小优化可以改善
    `LCP`，但几乎不改善或者根本不改善实际用户体验。
- en: In the more blatant cases, developers will deliberately flash a very large change
    on the page as soon as possible, generally a loading screen that has no value
    to the user (actually negative value because doing this increases the total amount
    of work done and the total time it takes to load the page) and then they carefully
    avoid making any change large enough that any later change would get marked as
    the `LCP`.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在更明显的情况下，开发人员将故意尽快在页面上显示非常大的变化，通常是一个对用户没有价值的加载屏幕（实际上具有负面价值，因为这样做会增加总工作量和加载页面所需的总时间），然后他们小心翼翼地避免进行任何足够大的更改，以免后续的任何更改被标记为
    `LCP`。
- en: For the same reason [that VW didn't publicly discuss how it was gaming its emissions
    numbers](https://en.wikipedia.org/wiki/Volkswagen_emissions_scandal), developers
    tend to shy away from discussing this kind of `LCP` optimization in public. An
    exception to this is Discourse, where [they publicly announced this kind of `LCP`
    optimization, with comments from their devs and the then-CTO (now CEO)](https://meta.discourse.org/t/introducing-discourse-splash-a-visual-preloader-displayed-while-site-assets-load/232003),
    noting that their new "Discourse Splash" feature hugely reduced `LCP` for sites
    after they deployed it. And then developers ask why their `LCP` is high, the standard
    advice from Discourse developers is to keep elements smaller than the "Discourse
    Splash", so that the `LCP` timestamp is computed from this useless element that's
    thrown up to optimize `LCP`, as opposed to having the timestamp be computed from
    any actual element that's relevant to the user. [Here's a typical, official, comment
    from Discourse](https://meta.discourse.org/t/theme-components-and-largest-contentful-paint-lcp/258680)
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由于与 VW 的排放数据造假事件类似的原因，开发人员倾向于避免在公开场合讨论这种 `LCP` 优化。一个例外是 Discourse，在 [他们公开宣布这种
    `LCP` 优化时，包括开发人员和当时的首席技术官（现任首席执行官）的评论](https://meta.discourse.org/t/introducing-discourse-splash-a-visual-preloader-displayed-while-site-assets-load/232003)，指出他们的新
    “Discourse Splash” 功能大大减少了站点部署后的 `LCP`。然后开发人员问为什么他们的 `LCP` 很高时，来自 Discourse 开发人员的标准建议是保持元素小于
    “Discourse Splash”，这样 `LCP` 时间戳就是从这个无用元素计算出来的，该元素被投放以优化 `LCP`，而不是从任何真正与用户相关的元素计算时间戳。[这是来自
    Discourse 的典型官方评论](https://meta.discourse.org/t/theme-components-and-largest-contentful-paint-lcp/258680)
- en: If your banner is larger than the element we use for the "Introducing Discourse
    Splash - A visual preloader displayed while site assets load" you gonna have a
    bad time for LCP.
  id: totrans-split-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果您的横幅比我们用于 “Introducing Discourse Splash - A visual preloader displayed while
    site assets load” 的元素更大，那么 LCP 将会很糟糕。
- en: The official response from Discourse is that you should make sure that your
    content doesn't trigger the `LCP` measurement and that, instead, our loading animation
    timestamp is what's used to compute `LCP`.
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: Discourse 的官方回应是，你应该确保你的内容不会触发 `LCP` 的测量，相反，我们的加载动画时间戳将用于计算 `LCP`。
- en: 'The sites with the most extreme ratio of `LCP` of useful content vs. Chrome''s
    measured `LCP` were:'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`LCP` 对于有用内容与 Chrome 测量的 `LCP` 的极端比例最高的网站包括：'
- en: Wix
  id: totrans-split-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wix
- en: '`M3`: `6`'
  id: totrans-split-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M3`: `6`'
- en: '`M1`: `12`'
  id: totrans-split-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M1`: `12`'
- en: '`Tecno Spark 8C`: `3`'
  id: totrans-split-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tecno Spark 8C`: `3`'
- en: '`Itel P32`: `N/A` `(FAIL)`'
  id: totrans-split-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Itel P32`: `N/A` `(FAIL)`'
- en: 'Discourse:'
  id: totrans-split-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Discourse：
- en: '`M3`: `10`'
  id: totrans-split-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M3`: `10`'
- en: '`M1`: `12`'
  id: totrans-split-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M1`: `12`'
- en: '`Tecno Spark 8C`: `4`'
  id: totrans-split-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tecno Spark 8C`: `4`'
- en: '`Itel P32`: `N/A` `(FAIL)`'
  id: totrans-split-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Itel P32`: `N/A` `(FAIL)`'
- en: Although we haven't discussed the gaming of other metrics, it appears that some
    websites also game other metrics and "optimize" them even when this has no benefit
    to users.
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们还没有讨论其他指标的优化，但一些网站似乎也在优化其他指标，并且即使这对用户没有好处，他们也在“优化”它们。
- en: 'Appendix: the selfish argument for optimizing sites'
  id: totrans-split-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附录：为优化网站提出自私的论据
- en: This will depend on the scale of the site as well as its performance, but when
    I've looked at this data for large companies I've worked for, improving site and
    app performance is worth a mind boggling amount of money. It's measurable in A/B
    tests and it's also among the interventions that has, in long-term holdbacks,
    a relatively large impact on growth and retention (many interventions test well
    but don't look as good long term, whereas performance improvements tend to look
    better long term).
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将取决于网站的规模以及其性能，但当我查看为大公司工作时的数据时，改善网站和应用程序的性能是非常值得的。这在 A/B 测试中可衡量，并且在长期阻碍中，对增长和留存的影响相对较大（许多干预措施在短期内测试良好，但从长远来看，性能改进往往更好）。
- en: Of course you can see this from the direct numbers, but you can also implicitly
    see this in a lot of ways when looking at the data. One angle is that (just for
    example), at Twitter, user-observed p99 latency was about `60s` in India as well
    as a number of African countries (even excluding relatively wealthy ones like
    Egypt and South Africa) and also about `60s` in the United States. Of course,
    across the entire population, people have faster devices and connections in the
    United States, but in every country, there are enough users that have slow devices
    or connections that the limiting factor is really user patience and not the underlying
    population-level distribution of devices and connections. Even if you don't care
    about users in Nigeria or India and only care about U.S. ad revenue, improving
    performance for low-end devices and connections has enough of impact that we could
    easily see the impact in global as well as U.S. revenue in A/B tests, especially
    in long-term holdbacks. And you also see the impact among users who have fast
    devices since a change that improves the latency for a user with a "low-end" device
    from `60s` to `50s` might improve the latency for a user with a high-end device
    from `5s` to `4.5s`, which has an impact on revenue, growth, and retention numbers
    as well.
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以从直接的数据数字中看出来，但当观察数据时，你也可以从许多方面隐含地看出来。一个角度是（仅举例说明），在Twitter，印度以及一些非洲国家的用户观察到的p99延迟大约为`60s`（甚至排除埃及和南非等相对富裕的国家），而在美国也是如此。当然，整体人口范围内，美国的设备和连接更快，但在每个国家，都有足够数量的用户使用慢设备或连接，使得限制因素实际上是用户的耐心，而不是设备和连接的基础人群级分布。即使你不关心尼日利亚或印度的用户，只关心美国的广告收入，为低端设备和连接改善性能的影响足以在A/B测试中轻松看到全球以及美国收入的影响，尤其是在长期保留中。而且你还会看到在使用快速设备的用户中的影响，因为将针对“低端”设备的延迟从`60s`改善到`50s`可能会将针对高端设备的延迟从`5s`改善到`4.5s`，这对收入、增长和留存数据也有影响。
- en: For [a variety of reasons that are beyond the scope of this doc](/bad-decisions/),
    this kind of boring, quantifiable, growth and revenue driving work has been difficult
    to get funded at most large companies I've worked for relative to flash product
    work that ends up showing little to no impact in long-term holdbacks.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 出于[这个文档范围之外的各种原因](/bad-decisions/)，这种无聊但量化的增长和收入推动工作相对于我工作过的大多数大公司中的闪光产品工作来说，通常很难获得资金支持，而这些产品工作最终显示出的影响很小或没有影响。
- en: 'Appendix: designing for low performance devices'
  id: totrans-split-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附录：针对低性能设备的设计
- en: When using slow devices or any device with low bandwidth and/or poor connectivity,
    the best experiences, by far, are generally the ones that load a lot of content
    at once into a static page. If the images have proper width and height attributes
    and alt text, that's very helpful. Progressive images (as in progressive jpeg)
    isn't particularly helpful.
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用慢设备或任何带有低带宽和/或连接质量不佳的设备时，远程体验通常最佳的是将大量内容一次性加载到静态页面中。如果图像具有适当的宽度和高度属性以及alt文本，则非常有帮助。渐进式图像（如渐进式JPEG）并不特别有帮助。
- en: On a slow device with high bandwidth, any lightweight, static, page works well,
    and lightweight dynamic pages can work well if designed for performance. Heavy,
    dynamic, pages are doomed unless the page weight doesn't cause the page to be
    complex.
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有高带宽的慢设备上，任何轻量级静态页面都可以很好地工作，如果设计用于性能，轻量级动态页面也可以很好地工作。重型动态页面则注定失败，除非页面重量不会导致页面复杂化。
- en: With low bandwidth and/or poor connectivity, lightweight pages are fine. With
    heavy pages, the best experience I've had is when I trigger a page load, go do
    something else, and then come back when it's done (or at least the HTML and CSS
    are done). I can then open each link I might want to read in a new tab, and then
    do something else while I wait for those to load.
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在低带宽和/或连接质量差的情况下，轻量级页面效果很好。对于重型页面，我有过的最佳体验是触发页面加载，然后做其他事情，等加载完成后再回来（或者至少HTML和CSS加载完成）。然后我可以在新标签页中打开我可能想阅读的每个链接，然后在等待它们加载时做其他事情。
- en: A lot of the optimizations that modern websites do, such as partial loading
    that causes more loading when you scroll down the page, and the concomitant hijacking
    of search (because the browser's built in search is useless if the page isn't
    fully loaded) causes the interaction model that works to stop working and makes
    pages very painful to interact with.
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现代网站进行的许多优化，如在向下滚动页面时引起更多加载的部分加载，以及随之而来的搜索劫持（因为如果页面没有完全加载，浏览器内置的搜索就毫无用处），导致原本有效的交互模型停止工作，并使页面非常难以交互。
- en: 'Just for example, a number of people have noted that Substack performs poorly
    for them because it does partial page loads. [Here''s a video by @acidshill of
    what it looks like to load a Substack article and then scroll on an iPhone 8](/substack.mp4),
    where the post has a fairly fast `LCP`, but if you want to scroll past the header,
    you have to wait `6s` for the next page to load, and then on scrolling again,
    you have to wait maybe another `1s` to `2s`:'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，许多人指出Substack对他们的性能表现不佳，因为它进行部分页面加载。[@acidshill展示了在iPhone 8上加载Substack文章然后滚动的视频](/substack.mp4)，尽管该帖子有相当快的
    `LCP`，但如果你想滚动到标题之后，你必须等待 `6s` 才能加载下一页，然后再次滚动时，可能还需要等待 `1s` 到 `2s`：
- en: As an example of the opposite approach, I tried loading some fairly large plain
    HTML pages, such as [https://danluu.com/diseconomies-scale/](https://danluu.com/diseconomies-scale/)
    (`0.1 MB wire` / `0.4 MB raw`) and [https://danluu.com/threads-faq/](https://danluu.com/threads-faq/)
    (`0.4 MB wire` / `1.1 MB raw`) and these were still quite usable for me even on
    slow devices. `1.1 MB` seems to be larger than optimal and breaking that into
    a few different pages would be better on a low-end devices, but a single page
    with `1.1 MB` of text works much better than most modern sites on a slow device.
    While you can get into trouble with HTML pages that are so large that browsers
    can't really handle them, for pages with a normal amount of content, it generally
    isn't until you have [complex CSS payloads](https://nolanlawson.com/2023/01/17/my-talk-on-css-runtime-performance/)
    or JS that the pages start causing problems for slow devices. Below, we test pages
    that are relatively simple, some of which have a fair amount of media (`14 MB`
    in one case) and find that these pages work ok, as long as they stay simple.
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 作为相反方法的例子，我尝试加载一些相当大的纯HTML页面，比如 [https://danluu.com/diseconomies-scale/](https://danluu.com/diseconomies-scale/)
    （`0.1 MB wire` / `0.4 MB raw`）和 [https://danluu.com/threads-faq/](https://danluu.com/threads-faq/)
    （`0.4 MB wire` / `1.1 MB raw`），即使在慢速设备上，这些页面对我来说仍然很可用。`1.1 MB` 似乎比最佳大小大，将其拆分成几个页面对低端设备更好，但单页
    `1.1 MB` 的文本比大多数现代网站在慢速设备上表现更好。尽管你可能会因为HTML页面太大而遇到问题，但对于内容量正常的页面来说，通常只有在有[复杂的CSS负载](https://nolanlawson.com/2023/01/17/my-talk-on-css-runtime-performance/)或JS时，页面才会对慢速设备造成问题。下面，我们测试了一些相对简单的页面，其中一些包含相当多的媒体（在某些情况下达到
    `14 MB`），发现这些页面运行良好，只要它们保持简单。
- en: Chris Adams has also noted that blind users, using screen readers, often report
    that dynamic loading makes the experience much worse for them. Like dynamic loading
    to improve performance, while this can be done well, it's often either done badly
    or bundled with so much other complexity that the result is worse than a simple
    page.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: Chris Adams还指出，使用屏幕阅读器的盲人用户经常报告动态加载使他们的体验变得更糟。就像动态加载以提高性能一样，虽然这样做可以做得很好，但通常要么做得很糟糕，要么与太多其他复杂性捆绑在一起，结果比简单的页面还糟糕。
- en: '@Qingcharles noted another accessibility issue — the (prison) parolees he works
    with are given "lifeline" phones, which are often very low end devices. From a
    quick search, in 2024, some people will get an iPhone 6 or an iPhone 8, but there
    are also plenty of devices that are lower end than an Itel P32, let alone a Tecno
    Spark 8C. They also get plans with highly limited data, and then when they run
    out, some people "can''t fill out any forms for jobs, welfare, or navigate anywhere
    with Maps".'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: '@Qingcharles指出了另一个无障碍问题 —— 他与一些“生活支持电话”（lifeline phones）的假释人员合作，这些电话通常是非常低端的设备。从快速搜索看，在2024年，有些人会得到iPhone
    6或iPhone 8，但也有很多设备比Itel P32低端得多，更别提Tecno Spark 8C了。他们还获得高度限制的数据套餐，当用尽时，一些人“无法填写任何工作、福利表格，或者在地图上找到任何地方”。'
- en: 'For sites that do up-front work and actually give you a decent experience on
    low end devices, Andy Kelley pointed out an example of a site that does up front
    work that seems to work ok on a slow device (although it would struggle on a very
    slow connection), [the Zig standard library documentation](https://ziglang.org/documentation/master/std/):'
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些提前完成工作并在低端设备上实际提供良好体验的网站，Andy Kelley指出了一个例子，这个网站在慢速设备上似乎运行良好（尽管在非常慢的连接上可能会遇到困难），[Zig标准库文档](https://ziglang.org/documentation/master/std/)是一个例子：
- en: I made the controversial decision to have it fetch all the source code up front
    and then do all the content rendering locally. In theory, this is CPU intensive
    but in practice... even those old phones have really fast CPUs!
  id: totrans-split-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我做出了一个有争议的决定，让它提前获取所有源代码，然后在本地进行所有内容渲染。理论上来说，这会消耗大量的CPU资源，但实际上...即使那些老旧的手机也有非常快的CPU！
- en: On the `Tecno Spark 8C`, this uses `4.7s` of CPU and, afterwards, is fairly
    responsive (relative to the device — [of course an iPhone responds much more quickly](/input-lag/).
    Taps cause links to load fairly quickly and scrolling also works fine (it's a
    little jerky, but almost nothing is really smooth on this device). This seems
    like the kind of thing people are referring to when they say that you can get
    better performance if you ship a heavy payload, but there aren't many examples
    of that which actually improve performance on low-end devices.
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Tecno Spark 8C`上，这使用了`4.7s`的CPU时间，之后响应还算迅速（相对于设备来说 —— 当然，iPhone的响应速度要快得多）。点击链接加载速度相当快，滚动也可以工作正常（略有卡顿，但在这种设备上几乎没有什么是真正流畅的）。这似乎是人们在说如果传输重的负载可以获得更好性能时指的情况，但实际上能够改善低端设备性能的例子并不多。
- en: 'Appendix: articles on web performance issues'
  id: totrans-split-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附录：关于网页性能问题的文章
- en: '2015: Maciej Cegłowski: [The Website Obesity Crisis](https://idlewords.com/talks/website_obesity.htm)'
  id: totrans-split-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2015年：Maciej Cegłowski：[网站肥胖危机](https://idlewords.com/talks/website_obesity.htm)
- en: 'Size: `1.0 MB` / `1.1 MB`'
  id: totrans-split-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小：`1.0 MB` / `1.1 MB`
- en: '`Tecno Spark 8C`: `0.9s` / `1.4s`'
  id: totrans-split-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tecno Spark 8C`：`0.9s` / `1.4s`'
- en: Scrolling a bit jerky, images take a little bit of time to appear if scrolling
    very quickly (jumping halfway down page from top), but delay is below what almost
    any user would perceive when scrolling a normal distance.
  id: totrans-split-110
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动有些卡顿，如果快速滚动（从页面顶部跳到页面中间），图片会稍微延迟显示，但延迟在大多数用户正常滚动时不会感知到。
- en: '2015: Nate Berkopec: [Page Weight Doesn''t Matter](https://www.speedshop.co/2015/11/05/page-weight-doesnt-matter.html)'
  id: totrans-split-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2015年：Nate Berkopec：[页面重量无关紧要](https://www.speedshop.co/2015/11/05/page-weight-doesnt-matter.html)
- en: 'Size: `80 kB` / `0.2 MB`'
  id: totrans-split-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小：`80 kB` / `0.2 MB`
- en: '`Tecno Spark 8C`: `0.8s` / `0.7s`'
  id: totrans-split-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tecno Spark 8C`：`0.8s` / `0.7s`'
- en: Does lazy loading, page downloads `650 kB` / `1.8 MB` if you scroll through
    the entire page, but scrolling is only a little jerky and the lazy loading doesn't
    cause delays. Probably the only page I've tried that does lazy loading in a way
    that makes the experience better and not worse on a slow device; I didn't test
    on a slow connection, where this would still make the experience worse.
  id: totrans-split-114
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了延迟加载，如果整个页面滚动，页面下载`650 kB` / `1.8 MB`，但滚动仅稍微卡顿，延迟加载不会导致延迟。这可能是我尝试过的唯一一种在慢速设备上延迟加载体验更好而不是更差的页面；我没有在慢连接上测试过，那种情况下这仍可能导致体验变差。
- en: '`Itel P32`: `1.1s` / `1s`'
  id: totrans-split-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Itel P32`：`1.1s` / `1s`'
- en: Scrolling basically unusable; scroll extremely jerky and moves a random distance,
    often takes over `1s` for text to render when scrolling to new text; can be much
    worse with images that are lazy loaded. Even though this is the best implementation
    of lazy loading I've seen in the wild, the `Itel P32` still can't handle it.
  id: totrans-split-116
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动基本无法使用；滚动极其卡顿且随机移动距离，当滚动到新文本时，文本渲染通常需要超过`1s`；即使这是我见过的最好的延迟加载实现，`Itel P32`仍无法处理。
- en: '2017: Dan Luu: [How web bloat impacts users with slow connections](/web-bloat/)'
  id: totrans-split-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2017年：Dan Luu：[网页肥胖如何影响使用慢速连接的用户](/web-bloat/)
- en: 'Size: `14 kB` / `57 kB`'
  id: totrans-split-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小：`14 kB` / `57 kB`
- en: '`Tecno Spark 8C`: `0.5s` / `0.3s`'
  id: totrans-split-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tecno Spark 8C`：`0.5s` / `0.3s`'
- en: Scrolling and interaction work fine.
  id: totrans-split-120
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动和交互工作正常。
- en: '`Itel P32`:`0.7s` / `0.5 s`'
  id: totrans-split-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Itel P32`：`0.7s` / `0.5 s`'
- en: '2017-2024+: Alex Russell: [The Performance Inequality Gap (series)](https://infrequently.org/series/performance-inequality/)'
  id: totrans-split-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2017-2024+：Alex Russell：[性能不平等差距（系列）](https://infrequently.org/series/performance-inequality/)
- en: 'Size: `82 kB` / `0.1 MB`'
  id: totrans-split-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小：`82 kB` / `0.1 MB`
- en: '`Tecno Spark 8C`: `0.5s` / `0.4s`'
  id: totrans-split-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tecno Spark 8C`：`0.5s` / `0.4s`'
- en: Scrolling and interaction work fine.
  id: totrans-split-125
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动和交互工作正常。
- en: '`Itel P32`: `0.7s` / `0.4s`'
  id: totrans-split-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Itel P32`：`0.7s` / `0.4s`'
- en: Scrolling and interaction work fine.
  id: totrans-split-127
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动和交互工作正常。
- en: '2024: Nikita Prokopov (Tonsky): [JavaScript Bloat in 2024](https://tonsky.me/blog/js-bloat/)'
  id: totrans-split-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2024年：Nikita Prokopov（Tonsky）：[2024年的JavaScript膨胀](https://tonsky.me/blog/js-bloat/)
- en: 'Size: `14 MB` / `14 MB`'
  id: totrans-split-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小：`14 MB` / `14 MB`
- en: '`Tecno Spark 8C`: `0.8s` / `1.9s`'
  id: totrans-split-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tecno Spark 8C`：`0.8s` / `1.9s`'
- en: When scrolling, it takes a while for images to show up (500ms or so) and the
    scrolling isn't smooth, but it's not jerky enough that it's difficult to scroll
    to the right place.
  id: totrans-split-131
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动时，图片需要一段时间才能显示出来（大约500ms），滚动不是很流畅，但并不会非常卡顿，仍能顺利滚动到想要的位置。
- en: '`Itel P32`: `2.5s` / `3s`'
  id: totrans-split-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Itel P32`：`2.5s` / `3s`'
- en: Scrolling isn't smooth. Scrolling accurately is a bit difficult, but can generally
    scroll to where you want if very careful. Generally takes a bit more than `1s`
    for new content to appear when you scroll a significant distance.
  id: totrans-split-133
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动不是很流畅。要精确滚动有些困难，但通常可以滚动到想要的位置，如果滚动距离较大，新内容出现通常需要超过`1s`。
- en: '2024: Dan Luu: [This post](/slow-device/)'
  id: totrans-split-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2024年：Dan Luu：[这篇文章](/slow-device/)
- en: 'Size: `25 kB` / `74 kB`'
  id: totrans-split-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小：`25 kB` / `74 kB`
- en: '`Tecno Spark 8C`: `0.6s` / `0.5s`'
  id: totrans-split-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tecno Spark 8C`：`0.6s` / `0.5s`'
- en: Scrolling and interaction work fine.
  id: totrans-split-137
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动和交互工作正常。
- en: '`Itel P32`: `1.3s` / `1.1s`'
  id: totrans-split-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Itel P32`：`1.3s` / `1.1s`'
- en: Scrolling and interaction work fine, although I had to make a change for this
    to be the case — this doc originally had an embedded video, which the `Itel P32`
    couldn't really handle.
  id: totrans-split-139
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滚动和交互工作正常，尽管我不得不进行一些更改才能达到这个效果 — 这个文档最初包含一个内嵌视频，而`Itel P32`无法真正处理。
- en: Note that, while these numbers are worse than the numbers for "Page Weight Doesn't
    Matter", this page is usable after load, which that other page isn't beacuse it
    execute some kind of lazy loading that's too complex for this phone to handle
    in a reasonable timeframe.
  id: totrans-split-140
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，虽然这些数字比“页面重量并不重要”的数字要差，但加载后这个页面是可以使用的，而另一页则不行，因为它执行了某种对这款手机来说时间太长的惰性加载。
- en: 'Appendix: empathy for non-rich users'
  id: totrans-split-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附录：对非富裕用户的同情心
- en: Something I've observed over time, as programming has become more prestigious
    and more lucrative, is [that people have tended to come from wealthier backgrounds](https://mastodon.social/@danluu/109901711437753852)
    and have less exposure to people with different income levels. An example we've
    discussed before, is at a well-known, prestigious, startup that has a very left-leaning
    employee base, where everyone got rich, on a discussion about the covid stimulus
    checks, in a slack discussion, a well meaning progressive employee said that it
    was pointless because people would just use their stimulus checks to buy stock.
    This person had, apparently, never talked to any middle-class (let alone poor)
    person about where their money goes or looked at the data on who owns equity.
    And that's just looking at American wealth. When we look at world-wide wealth,
    the general level of understanding is much lower. People seem to really underestimate
    the dynamic range in wealth and income across the world. From having talked to
    quite a few people about this, a lot of people seem to have mental buckets for
    "poor by American standards" (buys stock with stimulus checks) and "poor by worldwide
    standards" (maybe doesn't even buy stock), but the range of poverty in the world
    dwarfs the range of poverty in America to an extent that not many wealthy programmers
    seem to realize.
  id: totrans-split-142
  prefs: []
  type: TYPE_NORMAL
  zh: 随着编程变得更加有声望和更具有盈利性，我长期观察到的一点是，[人们倾向于来自更富裕的背景](https://mastodon.social/@danluu/109901711437753852)，并且对具有不同收入水平的人有较少的接触。我们曾经讨论过的一个例子是，在一个非常左倾的员工群体的知名创业公司，每个人都变得富有，在一次关于COVID刺激支票的讨论中，在一个Slack讨论中，一位富有进步思想的员工说这是毫无意义的，因为人们只会用他们的刺激支票来买股票。这个人显然从未与任何中产阶级（更不用说穷人）讨论过他们的钱花在哪里，也没有看过有关谁拥有股权的数据。这只是看美国财富时的一个例子。当我们看全球财富时，人们对财富和收入的一般理解水平要低得多。人们似乎真的低估了全球财富和收入的动态范围。从与很多人讨论过这个问题的经验来看，很多人对“按美国标准算穷”（用刺激支票购买股票）和“按全球标准算穷”（甚至可能连买股票都不会）有心理上的认知偏差，但世界范围内的贫困范围远远超过了美国的贫困范围，而这是不多有钱的程序员似乎意识不到的。
- en: 'Just for example, [in this discussion how lucky I was (in terms of financial
    opportunities) that my parents made it to America](https://mastodon.social/@danluu/109537302116865694),
    someone mentioned that it''s not that big a deal because they had great financial
    opportunities in Poland. For one thing, with respect to the topic of the discussion,
    the probability that someone will end up with a high-paying programming job (senior
    staff eng at a high-paying tech company) or equivalent, I suspect that, when I
    was born, being born poor in the U.S. gives you better odds than being fairly
    well off in Poland, but I could believe the other case as well if presented with
    data. But if we''re comparing Poland v. U.S. to Vietnam v. U.S., if I spend 15
    seconds looking up rough wealth numbers for these countries in the year I was
    born, the GDP/capita ratio of U.S. : Poland was ~8:1, whereas it was ~50 : 1 for
    Poland : Vietnam. The difference in wealth between Poland and Vietnam was roughly
    the square of the difference between the U.S. and Poland, so Poland to Vietnam
    is roughly equivalent to Poland vs. some hypothetical country that''s richer than
    the U.S. by the amount that the U.S. is richer than Poland. These aren''t even
    remotely comparable, but a lot of people seem to have this mental model that there''s
    "rich countries" and "not rich countries" and "not rich countries" are all roughly
    in the same bucket. GDP/capita isn''t ideal, but it''s easier to find than percentile
    income statistics; the quick search I did also turned up that annual income in
    Vietnam then was something like $200-$300 a year. Vietnam was also going through
    the tail end of a famine whose impacts are a bit difficult to determine because
    statistics here seem to be gamed, but if you believe the mortality rate statistics,
    the famine caused total overall mortality rate to jump to double the normal baseline.'
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，[在这次讨论中，有人提到我有多幸运（在财务机会上），因为我的父母移居美国](https://mastodon.social/@danluu/109537302116865694)，有人提到这并不是什么大不了的事，因为他们在波兰也有很好的财务机会。至于讨论的主题，例如，某人提到，就讨论主题而言，我出生时，在美国贫穷的出生给你更好的机会比波兰相对较好的机会更好，但如果提供数据，我也可以相信另一种情况。但是，如果我们比较波兰与美国与越南与美国，如果我花15秒查找这些国家在我出生年份的大致财富数据，那么美国与波兰的GDP/人均收入比大约是8：1，而波兰与越南的比率大约是50：1。波兰与越南之间的财富差距大致相当于波兰与某个假设的比美国更富有的国家的财富差距的平方。这些根本不可比较，但很多人似乎有这样的心理模型，即有“富裕国家”和“非富裕国家”，而“非富裕国家”都大致属于同一类别。GDP/人均收入并不理想，但比百分位收入统计数据更容易找到；我做的快速搜索也显示，越南当时的年收入大约是每年200到300美元。越南也正在经历一场饥荒的尾声，其影响有点难以确定，因为这里的统计数据似乎是有预谋的，但如果你相信死亡率统计数据，饥荒导致总体死亡率跳升到正常基线的两倍。
- en: Of course, at the time, the median person in a low-income country wouldn't have
    had a computer, let alone internet access. But, today it's fairly common for people
    in low-income countries to have devices. Many people either don't seem to realize
    this or don't understand what sorts of devices a lot of these folks use.
  id: totrans-split-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在当时，低收入国家的普通人可能连电脑都没有，更不用说互联网了。但是，如今低收入国家的人们拥有设备是相当普遍的。很多人似乎要么没有意识到这一点，要么不了解这些人使用的设备类型。
- en: On the Discourse founder's comments on iOS vs. Android marketshare, Fabian notes
  id: totrans-split-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在论述创始人对 iOS 与 Android 市场份额的评论中，法比安指出：
- en: In the US, according to the most recent data I could find (for 2023), iPhones
    have around 60% marketshare. In the EU, it's around 33%. This has knock-on effects.
    Not only do iOS users skew towards the wealthier end, they also skew towards the
    US.
  id: totrans-split-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 根据我找到的最新数据（截至2023年），在美国，iPhone 的市场份额约为60%。在欧盟，大约为33%。这造成了连锁反应。iOS 用户不仅倾向于富裕端，而且也倾向于美国。
- en: There's some secondary effects from this too. For example, in the US, iMessage
    is very popular for group chats etc. and infamous for interoperating very poorly
    with Android devices in a way that makes the experience for Android users very
    annoying (almost certainly intentionally so).
  id: totrans-split-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 还有一些次生效应。例如，在美国，iMessage 在群聊等方面非常流行，并且以一种使Android用户体验非常糟糕的方式与Android设备互不兼容而臭名昭著（几乎可以肯定是故意的）。
- en: In the EU, not least because Android is so much more prominent, iMessage is
    way less popular and anecdotally, even iPhone users among my acquaintances who
    would probably use iMessage in the US tend to use WhatsApp instead.
  id: totrans-split-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在欧盟，特别是因为 Android 更为突出，iMessage 的流行程度要低得多，根据个人经验，即使是在我认识的 iPhone 用户中，他们在美国可能会使用
    iMessage，但在德国却更倾向于使用 WhatsApp。
- en: Point being, globally speaking, recent iOS + fast Internet is even more skewed
    towards a particular demographic than many app devs in the US seem to be aware.
  id: totrans-split-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 总体来看，最近的 iOS 加快互联网速度更加偏向某个特定人群，比许多美国应用开发者意识到的还要多。
- en: 'And on the comment about mobile app vs. web app sizes, Fabian said:'
  id: totrans-split-150
  prefs: []
  type: TYPE_NORMAL
  zh: 至于关于移动应用与 Web 应用大小的评论，Fabian 表示：
- en: 'One more note from experience: apps you install when you install them, and
    generally have some opportunity to hold off on updates while you''re on a slow
    or metered connection (or just don''t have data at all).'
  id: totrans-split-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 根据经验，你安装应用时就得立即使用它们，并且通常在慢速或计量连接下，你有机会延迟更新（或者根本没有数据）。
- en: Back when I originally got my US phone, I had no US credit history and thus
    had to use prepaid plans. I still do because it's fine for what I actually use
    my phone for most of the time, but it does mean that when I travel to Germany
    once a year, I don't get data roaming at all. (Also, phone calls in Germany cost
    me $1.50 apiece, even though T-Mobile is the biggest mobile provider in Germany
    - though, of course, not T-Mobile US.)
  id: totrans-split-152
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当我最初获得美国电话时，由于没有美国信用记录，所以必须使用预付费计划。尽管我现在仍然如此，因为这对我平时使用手机来说没问题，但这也意味着，每年去德国旅行时，我根本不能使用数据漫游。（此外，在德国打电话每次都要花费我1.50美元，尽管
    T-Mobile 是德国最大的移动运营商，但当然不是美国的 T-Mobile。）
- en: Point being, I do get access to free and fast Wi-Fi at T-Mobile hotspots (e.g.
    major train stations, airports etc.) and on inter-city trains that have them,
    but I effectively don't have any data plan when in Germany at all.
  id: totrans-split-153
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关键是，我确实可以在 T-Mobile 热点（例如主要火车站、机场等）和设有此类热点的市际列车上免费高速上网！但是，在德国时，我实际上根本没有数据套餐。
- en: This is completely fine with mobile phone apps that work offline and sync their
    data when they have a connection. But web apps are unusable while I'm not near
    a public Wi-Fi.
  id: totrans-split-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 移动电话应用程序完全可以在离线状态下工作，并在连接时同步数据。但是当我不在公共无线网络覆盖范围内时，Web 应用程序就无法使用。
- en: Likewise I'm fine sending an email over a slow metered connection via the Gmail
    app, but I for sure wouldn't use any web-mail client that needs to download a
    few MBs worth of zipped JS to do anything on a metered connection.
  id: totrans-split-155
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 类似地，我可以通过 Gmail 应用程序在慢速计量连接上发送电子邮件没问题，但我肯定不会使用需要下载几 MB 压缩 JS 文件才能在计量连接上做任何操作的任何
    Web 邮件客户端。
- en: At least with native app downloads, I can prepare in advance and download them
    while I'm somewhere with good internet!
  id: totrans-split-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 至少对于本地应用程序下载而言，我可以提前准备，在有良好网络的地方下载它们！
- en: Another comment from Fabian (this time paraphrased since this was from a conversation),
    is that people will often justify being quantitatively hugely slower because there's
    a qualitative reason something should be slow. One example he gave was that screens
    often take a long time to sync their connection and this is justified because
    there are operations that have to be done that take time. For a long time, these
    operations would often take seconds. Recently, a lot of displays sync much more
    quickly because Nvidia specifies how long this can take for something to be "G-Sync"
    certified, so display makers actually do this in a reasonable amount of time now.
    While it's true that there are operations that have to be done that take time,
    there's no fundamental reason they should take as much time as they often used
    to. Another example he gave was on how someone was justifying how long it took
    to read thousands of files because the operation required a lot of syscalls and
    "syscalls are slow", which is a qualitatively true statement, but if you look
    at the actual cost of a syscall, in the case under discussion, the cost of a syscall
    was many orders of magnitude from being costly enough to be a reasonable explanation
    for why it took so long to read thousands of files.
  id: totrans-split-157
  prefs: []
  type: TYPE_NORMAL
  zh: 另外一个来自法比安的评论（这次是由于对话中的释义），是人们经常会因为某些事情应该慢的定性原因而辩解量化上的大幅度减慢。他举了一个例子，屏幕通常需要很长时间来同步它们的连接，这是有道理的，因为必须进行一些需要时间的操作。长时间以来，这些操作通常需要几秒钟。最近，许多显示器的同步速度快得多，因为Nvidia规定了对于“G-Sync”认证需要多长时间，所以现在显示器制造商实际上在合理的时间内完成了这些操作。虽然确实存在需要花费时间的操作，但并没有根本性的理由说明它们通常需要花费的时间那么长。他举的另一个例子是，有人正试图为读取成千上万个文件所花费的时间辩护，因为这个操作需要大量的系统调用，“系统调用很慢”，这是一个定性上的真实陈述，但如果你看一下系统调用的实际成本，在讨论中的情况下，一个系统调用的成本相差了多个数量级，远不足以合理解释为什么读取成千上万个文件需要这么长时间。
- en: On this topic, when people point out that a modern website is slow, someone
    will generally respond with the qualitative defense that the modern website has
    these great features, which the older website is lacking. And while it's true
    that (for example) Discourse has features that MyBB doesn't, it's hard to argue
    that its feature set justifies being `33x` slower.
  id: totrans-split-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个话题上，当人们指出现代网站速度慢时，一般会有人回应说，现代网站有这些很棒的功能，而老式网站缺少这些。尽管（例如）Discourse有MyBB没有的功能，这是事实，但很难争辩说它的功能集合能够合理地解释为何它的速度要慢`33x`。
- en: 'Appendix: experimental details'
  id: totrans-split-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附录：实验细节
- en: With the exception of danluu.com and, arguably, HN, for each site, I tried to
    find the "most default" experience. For example, for WordPress, this meant a demo
    blog with the current default theme, twentytwentyfour. In some cases, this may
    not be the most likely thing someone uses today, e.g., for Shopify, I looked at
    the first thing that theme they give you when you browse their themes, but I didn't
    attempt to find theme data to see what the most commonly used theme is. For this
    post, I wanted to do all of the data collection and analysis as a short project,
    something that takes less than a day, so there were a number of shortcuts like
    this, which will be described below. I don't think it's wrong to use the first-presented
    Shopify theme in a decent fraction of users will probably use the first-presente
    theme, but that is, of course, less representative than grabbing whatever the
    most common theme is and then also testing many different sites that use that
    theme to see how real-world performance varies when people modify the theme for
    their own use. If I worked for Shopify or wanted to do competitive analysis on
    behalf of a competitor, I would do that, but for a one-day project on how large
    websites impact users on low-end devices, the performance of Shopify demonstrated
    here seems ok. I actually [did the initial work for this around when I ran these
    polls](https://mastodon.social/@danluu/111994372051118539), back in February;
    I just didn't have time to really write this stuff up for a month.
  id: totrans-split-160
  prefs: []
  type: TYPE_NORMAL
  zh: 除了danluu.com和可以说是HN之外，对于每个网站，我尝试找到“最默认”的体验。例如，对于WordPress来说，这意味着一个带有当前默认主题twentytwentyfour的演示博客。在某些情况下，这可能不是今天某人最有可能使用的东西，例如对于Shopify，我查看了他们的主题浏览时给出的第一件事，但我没有尝试查找主题数据来了解最常用的主题是什么。对于这篇文章，我希望将所有的数据收集和分析作为一个短期项目完成，这样的项目不超过一天，因此像这样的许多快捷方式将在下面描述。我认为在一个体面的用户分数中使用第一次呈现的Shopify主题并不是错误，但当然，这比抓取最常见的主题然后测试许多使用该主题的不同网站在用户修改主题以符合自己使用时，看现实世界的性能差异还要少。如果我为Shopify工作或想要代表竞争对手进行竞争分析，我会这样做，但对于一个关于大型网站如何影响低端设备用户的一天项目，这里展示的Shopify性能似乎还可以。实际上，[我在进行这些调查时做了最初的工作](https://mastodon.social/@danluu/111994372051118539)，那是在二月份；我只是没有时间真正写这些东西一个月。
- en: For the tests on laptops, I tried to have the laptop at ~60% battery, not plugged
    in, and the laptop was idle for enough time to return to thermal equilibrium in
    a room at 20°C, so pages shouldn't be impacted by prior page loads or other prior
    work that was happening on the machine.
  id: totrans-split-161
  prefs: []
  type: TYPE_NORMAL
  zh: 对于笔记本电脑的测试，我试图让笔记本电池保持在约60%的电量，未插电，并且笔记本在20°C的室温中处于空闲状态足够长的时间，因此页面不应受到先前页面加载或其他在机器上正在进行的先前工作的影响。
- en: For the mobile tests, the phones were at ~100% charge and plugged in, and also
    previously at 100% charge so the phones didn't have any heating effect you can
    get from rapidly charging. As noted above, these tests were formed with `1Gbps`
    WiFi. No other apps were running, the browser had no other tabs open, and the
    only apps that were installed on the device, so no additional background tasks
    should've been running other than whatever users are normally subject to by the
    device by default. A real user with the same device is going to see worse performance
    than we measured here in almost every circumstance except if running Chrome Dev
    Tools on a phone significantly degrades performance. I noticed that, on the Itel
    P32, scrolling was somewhat jerkier with Dev Tools running than when running normally
    but, since this was a one-day project, I didn't attempt to quantify this and if
    it impacts some sites much more than others. In absolute terms, the overhead can't
    be all that large because the fastest sites are still fairly fast with Dev Tools
    running, but if there's some kind of overhead that's super-linear in the amount
    of work the site does (possibly indirectly, if it causes some kind of resource
    exhaustion), then that could be a problem in measurements of some sites.
  id: totrans-split-162
  prefs: []
  type: TYPE_NORMAL
  zh: 对于移动测试，手机电量约为 100%，并插入电源，之前也已经充满电，因此手机没有由快速充电引起的发热效应。如上所述，这些测试是在`1Gbps` WiFi下进行的。没有运行其他应用程序，浏览器也没有打开其他标签页，设备上只安装了应用程序，因此除了设备默认情况下用户通常受到的任何额外后台任务之外，不应运行任何其他后台任务。与设备具有相同设备的真实用户在几乎所有情况下都会看到比我们这里测量的性能更差，除非在手机上运行
    Chrome Dev 工具显著降低性能。我注意到，在 Itel P32 上，使用 Dev 工具时滚动有些不流畅，比正常运行时要滚动，但由于这是一个一天的项目，我没有试图量化这一点，如果它比其他站点更严重影响了某些站点，那么在绝对术语中，开销不可能那么大，因为最快的站点仍然相对快速地进行
    Dev Tools 运行，但如果有某种超线性的开销与站点进行的工作量有关（可能间接地，如果它导致某种资源耗尽），那么在某些站点的测量中可能存在问题。
- en: Sizes were all measured on mobile, so in cases where different assets are loaded
    on mobile vs. desktop, the we measured the mobile asset sizes. `CPU` was measured
    as CPU time on the main thread (I did also record time on other threads for sites
    that used other threads, but didn't use this number; if `CPU` were a metric people
    wanted to game, time on other threads would have to be accounted for to prevent
    sites from trying to offload as much work as possible to other threads, but this
    isn't currently an issue and time on main thread is more directly correlated to
    usability than sum of time across all threads, and the metric that would work
    for gaming is less legible with no upside for now).
  id: totrans-split-163
  prefs: []
  type: TYPE_NORMAL
  zh: 所有尺寸都是在移动设备上测量的，因此在移动与桌面加载不同资源的情况下，我们测量了移动资产的大小。`CPU` 是主线程上的 CPU 时间（我也记录了其他线程的时间，但对于使用其他线程的站点，我没有使用这个数字；如果`CPU`是一个人们想要操纵的指标，那么必须考虑到其他线程的时间，以防止站点试图将尽可能多的工作转移到其他线程，但目前这不是问题，主线程上的时间更直接地与可用性相关，而适用于操纵的指标在没有现在的情况下更难以读取。）
- en: 'For WiFi speeds, speed tests had the following numbers:'
  id: totrans-split-164
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 WiFi 速度，速度测试显示以下数字：
- en: '`M3 Max`'
  id: totrans-split-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`M3 Max`'
- en: Netflix (fast.com)
  id: totrans-split-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netflix（fast.com）
- en: 'Download: `850 Mbps`'
  id: totrans-split-167
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载：`850 Mbps`
- en: 'Upload: `840 Mbps`'
  id: totrans-split-168
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传：`840 Mbps`
- en: 'Latency (unloaded / loaded): `3ms` / `8ms`'
  id: totrans-split-169
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟（未加载 / 已加载）：`3ms` / `8ms`
- en: Ookla
  id: totrans-split-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ookla
- en: 'Download: `900 Mbps`'
  id: totrans-split-171
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载：`900 Mbps`
- en: 'Upload: `840 Mbps`'
  id: totrans-split-172
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传：`840 Mbps`
- en: 'Latency (unloaded / download / upload): `3ms` / `8ms` / `13ms`'
  id: totrans-split-173
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟（未加载 / 下载 / 上传）：`3ms` / `8ms` / `13ms`
- en: '`Tecno Spark 8C`'
  id: totrans-split-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tecno Spark 8C`'
- en: Netflix (fast.com)
  id: totrans-split-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netflix（fast.com）
- en: 'Download: `390 Mbps`'
  id: totrans-split-176
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载：`390 Mbps`
- en: 'Upload: `210 Mbps`'
  id: totrans-split-177
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传：`210 Mbps`
- en: 'Latency (unloaded / loaded): `2ms` / `30ms`'
  id: totrans-split-178
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟（未加载 / 已加载）：`2ms` / `30ms`
- en: Oookla
  id: totrans-split-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oookla
- en: Ookla web app fails, can't see results
  id: totrans-split-180
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ookla 网页应用程序失败，无法查看结果
- en: '`Itel P32`'
  id: totrans-split-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Itel P32`'
- en: Netflix
  id: totrans-split-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netflix
- en: 'Download: `44 Mbps`'
  id: totrans-split-183
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载：`44 Mbps`
- en: 'Upload: test fails to work (sends one chunk of data and then hangs, sending
    no more data)'
  id: totrans-split-184
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传：测试无法正常工作（发送一块数据，然后挂起，不再发送数据）
- en: 'Latency (unloaded / loaded): `4ms` / `400ms`'
  id: totrans-split-185
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟（未加载 / 已加载）：`4ms` / `400ms`
- en: Okta
  id: totrans-split-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Okta
- en: 'Download: `45 Mbps`'
  id: totrans-split-187
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载：`45 Mbps`
- en: 'Upload: test fails to work'
  id: totrans-split-188
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上传：测试无法正常工作
- en: 'Latency: test fails to display latency'
  id: totrans-split-189
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 延迟：无法显示延迟
- en: One thing to note is that the `Itel P32` doesn't really have the ability to
    use the bandwidth that it nominally has. Looking at the top Google reviews, none
    of them mention this. [The first review reads](https://www.nairaland.com/4628841/itel-p32-review-great-those)
  id: totrans-split-190
  prefs: []
  type: TYPE_NORMAL
  zh: 有一点需要注意的是，`Itel P32` 实际上无法充分利用其名义上的带宽。查看顶级的 Google 评论中，没有一个提到这一点。[第一条评论如下](https://www.nairaland.com/4628841/itel-p32-review-great-those)
- en: Performance-wise, the phone doesn’t lag. It is powered by the latest Android
    8.1 (GO Edition) ... we have 8GB+1GB ROM and RAM, to run on a power horse of 1.3GHz
    quad-core processor for easy multi-tasking ... I’m impressed with the features
    on the P32, especially because of the price. I would recommend it for those who
    are always on the move. And for those who take battery life in smartphones has
    their number one priority, then P32 is your best bet.
  id: totrans-split-191
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从性能角度来看，手机没有滞后。它配备了最新的 Android 8.1（GO 版本）...我们有 8GB+1GB ROM 和 RAM，以运行 1.3GHz
    四核处理器的强大马力来实现轻松多任务处理...我对 P32 的功能印象深刻，尤其是考虑到价格。我推荐给那些经常在路上的人。对于那些将智能手机电池寿命视为首要考虑因素的人来说，P32
    是您最好的选择。
- en: '[The second review reads](https://techjaja.com/itel-p32-review-dual-camera-smartphone-alarming-price-tag/)'
  id: totrans-split-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[第二篇评论](https://techjaja.com/itel-p32-review-dual-camera-smartphone-alarming-price-tag/)阅读'
- en: Itel mobile is one of the leading Africa distributors ranking 3rd on a continental
    scale ... the light operating system acted up to our expectations with no sluggish
    performance on a 1GB RAM device ... fairly fast processing speeds ... the Itel
    P32 smartphone delivers the best performance beyond its capabilities ... at a
    whooping UGX 330,000 price tag, the Itel P32 is one of those amazing low-range
    like smartphones that deserve a mid-range flag for amazing features embedded in
    a single package.
  id: totrans-split-193
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Itel 移动是非洲领先的分销商之一，在全球范围内排名第三...轻操作系统没有在 1GB RAM 设备上表现出惰性...处理速度相当快...Itel P32
    智能手机在其能力范围之外提供了最佳性能...以高达 UGX 330,000 的价格标签，Itel P32 是那些令人惊叹的低端智能手机之一，其内置了一整套令人惊叹的功能。
- en: '[The third review reads](https://pctechmag.com/2018/08/itel-p32-full-review-much-more-than-just-a-budget-entry-level-smartphone/)'
  id: totrans-split-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[第三篇评论](https://pctechmag.com/2018/08/itel-p32-full-review-much-more-than-just-a-budget-entry-level-smartphone/)阅读'
- en: '"Much More Than Just a Budget Entry-Level Smartphone ... Our full review after
    2 weeks of usage ... While switching between apps, and browsing through heavy
    web pages, the performance was optimal. There were few lags when multiple apps
    were running in the background, while playing games. However, the overall performance
    is average for maximum phone users, and is best for average users [screenshot
    of game] Even though the game was skipping some frames, and automatically dropped
    graphical details it was much faster if no other app was running on the phone.'
  id: totrans-split-195
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “不仅仅是一款预算入门级智能手机...我们在使用了 2 周后的全面评论...在切换应用程序和浏览大量网页时，性能表现非常理想。在后台运行多个应用程序时可能会有些卡顿，尤其是在玩游戏时。然而，整体性能对大多数手机用户来说都是平均水平，适合普通用户[screenshot
    of game]即使游戏跳帧并自动降低了图形细节，如果手机上没有运行其他应用程序，它的速度要快得多。”
- en: 'Notes on sites:'
  id: totrans-split-196
  prefs: []
  type: TYPE_NORMAL
  zh: 网站注意事项：
- en: Wix
  id: totrans-split-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wix
- en: 'www.wix.com/website-template/view/html/3173?originUrl=https%3A%2F%2Fwww.wix.com%2Fwebsite%2Ftemplates%2Fhtml%2Fmost-popular&tpClick=view_button&esi=a30e7086-28db-4e2e-ba22-9d1ecfbb1250:
    this was the first entry when I clicked to get a theme'
  id: totrans-split-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: www.wix.com/website-template/view/html/3173?originUrl=https%3A%2F%2Fwww.wix.com%2Fwebsite%2Ftemplates%2Fhtml%2Fmost-popular&tpClick=view_button&esi=a30e7086-28db-4e2e-ba22-9d1ecfbb1250：这是我点击获取主题时的第一个条目
- en: '`LCP` was misleading on every device'
  id: totrans-split-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LCP` 在每台设备上都误导'
- en: On the `Tecno Spark 8C`, scrolling never really works. It's very jerky and this
    never settles down
  id: totrans-split-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Tecno Spark 8C` 上，滚动从未真正起作用。非常卡顿，而且从未稳定下来。
- en: On the `Itel P32`, the page fails non-deterministically (different errors on
    different loads); it can take quite a while to error out; it was `23s` on the
    first run, with the CPU pegged for `28s`
  id: totrans-split-201
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Itel P32` 上，页面以不确定的方式失败（在不同的加载时出现不同的错误）；出错可能需要相当长的时间；首次运行时为 `23s`，CPU 一直保持在
    `28s`。
- en: Patreon
  id: totrans-split-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Patreon
- en: 'www.patreon.com/danluu: used my profile where possible'
  id: totrans-split-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: www.patreon.com/danluu：在可能的情况下使用我的个人资料
- en: Scrolling on Patreon and finding old posts is so painful that I maintain [my
    own index of my Patreon posts](/#pt) so that I can find my old posts without having
    to use Patreon. Although Patreon's numbers in the table don't look that bad in
    the table when you're on a fast laptop, that's just for the initial load. The
    performance as you scroll is bad enough that I don't think that, today, there
    exists a computer and internet connection that browse Patreon with decent performance.
  id: totrans-split-204
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Patreon 上滚动并找到旧帖子非常痛苦，所以我维护[自己的 Patreon 帖子索引](/#pt)，这样我就可以在不使用 Patreon 的情况下找到我的旧帖子。尽管在快速笔记本电脑上，Patreon
    的表中的数字看起来并不那么糟糕，但那只是初始加载。当你滚动时，性能太差，以至于我不认为今天存在一台电脑和互联网连接可以以良好的性能浏览 Patreon。
- en: Threads
  id: totrans-split-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Threads
- en: 'threads.net/danluu.danluu: used my profile where possible'
  id: totrans-split-206
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: threads.net/danluu.danluu：在可能的情况下使用我的个人资料
- en: On the `Itel P32`, this technically doesn't load correctly and could be marked
    as `FAIL`, but it's close enough that I counted it. The thing that's incorrect
    is that profile photos have a square box around then
  id: totrans-split-207
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Itel P32`上，这在技术上加载不正确，并且可能标记为`FAIL`，但接近正确我算数了。不正确的地方在于概要照片周围有一个正方形框
- en: However, as with the other heavy pages, interacting with the page doesn't really
    work and the page is unusable, but this appears to be for the standard performance
    reasons and not because the page failed to render
  id: totrans-split-208
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，与其他重页面一样，与页面的交互实际上并不起作用，页面无法使用，但这似乎是因为标准性能原因，而不是因为页面未能渲染
- en: Twitter
  id: totrans-split-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter
- en: 'twitter.com/danluu: used my profile where possible'
  id: totrans-split-210
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: twitter.com/danluu：尽可能使用我的个人资料
- en: Discourse
  id: totrans-split-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Discourse
- en: 'meta.discourse.org: this is what turned up when I searched for an official
    forum.'
  id: totrans-split-212
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: meta.discourse.org：这是我搜索官方论坛时找到的结果。
- en: As discussed above, the `LCP` is highly gamed and basically meaningless. We
    linked to a post where the Discourse folks note that, on slow loads, they put
    a giant splash screen up at `2s` to cap the `LCP` at `2s`. Also notable is that,
    on loads that are faster than the 2s, the `LCP` is also highly gamed. For example,
    on the `M3 Max` with low-latency `1Gbps` internet, the `LCP` was reported as `115ms`,
    but the page loads actual content at `1.1s`. This appears to use the same fundamental
    trick as "Discourse Splash", in that it paints a huge change onto the screen and
    then carefully loads smaller elements to avoid having the actual page content
    detected as the `LCP`.
  id: totrans-split-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如上所述，`LCP`被高度操控，基本上毫无意义。我们链接到了一个帖子，Discourse的人们在慢加载时会在`2s`处放置一个巨大的闪屏来限制`LCP`在`2s`。还值得注意的是，在快于2s的加载中，`LCP`也被大幅操控。例如，在具有低延迟`1Gbps`互联网的`M3
    Max`上，报告的`LCP`为`115ms`，但页面实际加载内容的时间为`1.1s`。这似乎使用了与“Discourse Splash”相同的基本技巧，即在屏幕上绘制一个巨大的变化，然后小心地加载较小的元素，以避免将实际页面内容检测为`LCP`。
- en: On the `Tecno Spark 8C`, scrolling is unpredictable and can jump too far, triggering
    loading from infinite scroll, which hangs the page for `3s-10s`. Also, the entire
    browser sometimes crashes if you just let the browser sit on this page for a while.
  id: totrans-split-214
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Tecno Spark 8C`上，滚动是不可预测的，可能会跳得太远，触发无限滚动加载，导致页面挂起`3s-10s`。有时，如果你让浏览器在这个页面上坐一段时间，整个浏览器会崩溃。
- en: On the `Itel P32`, an error message is displayed after `7.5s`
  id: totrans-split-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Itel P32`上，`7.5s`后显示错误消息
- en: Bluesky
  id: totrans-split-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bluesky
- en: bsky.app/profile/danluu.com
  id: totrans-split-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: bsky.app/profile/danluu.com
- en: Displays a blank screen on the `Itel P32`
  id: totrans-split-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Itel P32`上显示空白屏幕
- en: Squarespace
  id: totrans-split-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Squarespace
- en: 'cedar-fluid-demo.squarespace.com: this was the second theme that showed up
    when I clicked themes to get a theme; the first was one called "Bogart", but that
    was basically a "coming soon" single page screen with no content, so I used the
    second theme instead of the first one.'
  id: totrans-split-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: cedar-fluid-demo.squarespace.com：这是我点击主题获取主题时出现的第二个主题；第一个是一个名为“Bogart”的主题，但基本上只是一个“即将推出”的单页屏幕，没有内容，所以我使用了第二个主题而不是第一个。
- en: A lot of errors and warnings in the console with the `Itel P32`, but the page
    appears to load and work, although interacting with it is fairly slow and painful
  id: totrans-split-221
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Itel P32`上有大量错误和警告信息，但页面似乎加载并工作，尽管与之交互非常缓慢和痛苦
- en: '`LCP` on the `Tecno Spark 8C` was significantly before the page content actually
    loaded'
  id: totrans-split-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Tecno Spark 8C`上的`LCP`显著早于实际加载页面内容
- en: Tumblr
  id: totrans-split-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tumblr
- en: 'www.tumblr.com/slatestarscratchpad: used this because I know this tumblr exists.
    I don''t read a lot of tumblers (maybe three or four), and this one seemed like
    the closest thing to my blog that I know of on tumblr.'
  id: totrans-split-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: www.tumblr.com/slatestarscratchpad：因为我知道这个Tumblr存在，所以我用了它。我不怎么看Tumblr（可能只看了三四个），而这个看起来是我在Tumblr上知道的最接近我的博客的东西。
- en: This page fails on the `Itel P32`, but doesn't `FAIL`. The console shows that
    the JavaScript errors out, but the page still works fine (I tried scrolling, clicking
    links, etc., and these all worked), so you can actually go to the post you want
    and read it. The JS error appears to have made this page load much more quickly
    than it other would have and also made interacting with the page after it loaded
    fairly zippy.
  id: totrans-split-225
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个页面在`Itel P32`上失败了，但并没有`FAIL`。控制台显示JavaScript出错，但页面仍然正常工作（我尝试滚动、点击链接等操作，这些都有效），所以你实际上可以进入你想要的帖子并阅读它。JS错误似乎使得该页面加载速度比平常快了很多，也使得加载后与页面交互变得相当迅速。
- en: Shopify
  id: totrans-split-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shopify
- en: 'themes.shopify.com/themes/motion/styles/classic/preview?surface_detail=listing&surface_inter_position=1&surface_intra_position=1&surface_type=all:
    this was the first theme that showed up when I looked for themes'
  id: totrans-split-227
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: themes.shopify.com/themes/motion/styles/classic/preview?surface_detail=listing&surface_inter_position=1&surface_intra_position=1&surface_type=all：这是我搜索主题时看到的第一个主题
- en: On the first `M3/10` run, Chrome dev tools reported a nonsensical `697s` of
    CPU time (the run completed in a normal amount of time, well under `697s` or even
    `697/10s`. This run was ignored when computing results.
  id: totrans-split-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一次`M3/10`运行中，Chrome开发工具报告了不合理的`697s` CPU时间（运行时间正常，远远不到`697s`甚至`697/10s`。在计算结果时忽略了此次运行。
- en: On the `Itel P32`, the page load never completes and it just shows a flashing
    cursor-like image, which is deliberately loaded by the theme. On devices that
    load properly, the flashing cursor image is immediately covered up by another
    image, but that never happens here.
  id: totrans-split-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Itel P32`上，页面加载从未完成，只显示一个闪烁的光标状图像，这是主题故意加载的。在能够正常加载的设备上，闪烁的光标图像会立即被另一个图像覆盖，但这里从未发生过。
- en: I wondered if it wasn't fair to use this example theme because there's some
    stuff on the page that lets you switch theme styles, so I checked out actual uses
    of the theme (the page that advertises the theme lists users of the theme). I
    tried the first two listed real examples and they were both much slower than this
    demo page.
  id: totrans-split-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我想知道是否公平使用这个示例主题，因为页面上有一些东西可以让您切换主题样式，所以我检查了实际使用的主题（宣传主题的页面列出了主题的用户）。我尝试了列出的前两个真实示例，它们都比这个演示页面慢得多。
- en: Reddit
  id: totrans-split-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Reddit
- en: reddit.com
  id: totrans-split-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: reddit.com
- en: Has an unusually low `LCP*` compared to how long it takes for the page to become
    usable. Although not measured in this test, I generally find the page slow and
    sort of unusable on Intel Macbooks which are, by historical standards, extremely
    fast computers (unless I use old.reddit.com)
  id: totrans-split-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与页面变得可用需要的时间相比，`LCP*`异常低。尽管此次测试未测量，但我通常发现在英特尔Macbook上，页面速度缓慢且几乎无法使用（除非我使用old.reddit.com）。
- en: Mastodon
  id: totrans-split-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mastodon
- en: 'mastodon.social/@danluu: used my profile where possible'
  id: totrans-split-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: mastodon.social/@danluu：在可能的情况下使用了我的个人资料
- en: Fails to load on `Itel P32`, just gives you a blank screen. Due to how long
    things generally take on the `Itel P32`, it's not obvious for a while if the page
    is failing or if it's just slow
  id: totrans-split-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Itel P32`上加载失败，只会显示空白屏幕。由于在`Itel P32`上一般的事情需要很长时间，所以一段时间内不清楚页面是失败还是仅仅缓慢。
- en: Quora
  id: totrans-split-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Quora
- en: 'www.quora.com/Ever-felt-like-giving-up-on-your-dreams-How-did-you-come-out-of-it:
    I tried googling for quora + the username of a metafilter user who I''ve heard
    is now prolific on Quora. Rather than giving their profile page, Google returned
    this page, which appears to have nothing to do with the user I searched for. So,
    this isn''t comparable to the social media profiles, but getting a random irrelevant
    Quora result from Google is how I tend to interact with Quora, so I guess this
    is representative of my Quora usage.'
  id: totrans-split-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: www.quora.com/Ever-felt-like-giving-up-on-your-dreams-How-did-you-come-out-of-it：我尝试搜索Quora
    +一个我听说现在在Quora上很活跃的metafilter用户的用户名。而不是给出他们的个人资料页面，Google返回了这个页面，似乎与我搜索的用户无关。所以，这与社交媒体配置文件不可比，但是从Google获得一个随机的无关Quora结果是我与Quora互动的方式，所以我想这代表了我的Quora使用情况。
- en: On the `Itel P32`, the page stops executing scripts at some point and doesn't
    fully load. This causes it to fail to display properly. Interacting with the page
    doesn't really work either.
  id: totrans-split-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Itel P32`上，页面在某个时候停止执行脚本，并且无法完全加载。这导致它无法正确显示。与页面互动也不太起作用。
- en: Substack
  id: totrans-split-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Substack
- en: Used thezvi.substack.com because I know Zvi has a substack and writes about
    similar topics.
  id: totrans-split-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用了thezvi.substack.com，因为我知道Zvi有一个Substack并且写了类似的主题。
- en: 'vBulletin:'
  id: totrans-split-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: vBulletin：
- en: 'forum.vbulletin.com: this is what turned up when I searched for an official
    forum.'
  id: totrans-split-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: forum.vbulletin.com：这是我搜索官方论坛时找到的结果。
- en: Medium
  id: totrans-split-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Medium
- en: 'medium.com/swlh: I don''t read anything on Medium, so I googled for programming
    blogs on Medium and this was the top hit. From looking at the theme, it doesn''t
    appear to be unusually heavy or particularly customized for a Medium blog. Since
    it appears to be widely read and popular, it''s more likely to be served from
    a CDN and than some of the other blogs here.'
  id: totrans-split-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: medium.com/swlh：我不在Medium上阅读任何内容，所以我在Google上搜索了一些关于编程的博客，这是排名最高的结果。从主题上看，它似乎并不特别沉重或特别定制为Medium博客。由于它似乎被广泛阅读和流行，更可能是从CDN中提供的，而不是这里的其他一些博客。
- en: On a run that wasn't a benchmark reference run, on the `Itel P32`, I tried scrolling
    starting 35s after loading the page. The delay to scroll was `5s-8s` and scrolling
    moved an unpredictable amount, making the page completely unusable. This wasn't
    marked as a `FAIL` in the table, but one could argue that this should be a `FAIL`
    since the page is unusable.
  id: totrans-split-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一次不是基准参考的运行中，在 `Itel P32` 上，我尝试从加载页面后的第35秒开始滚动。滚动的延迟为 `5s-8s`，而且滚动的距离是不可预测的，使得页面完全无法使用。在表格中，这并没有标记为“FAIL”，但可以认为这应该是一个“FAIL”，因为页面无法使用。
- en: Ghost
  id: totrans-split-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ghost
- en: source.ghost.io because this is the current default Ghost theme and it was the
    first example I found
  id: totrans-split-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[source.ghost.io](https://source.ghost.io) 因为这是当前的默认 Ghost 主题，而且这是我找到的第一个例子。'
- en: Wordpress
  id: totrans-split-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wordpress
- en: 2024.wordpress.net because this is the current default wordpress theme and this
    was the first example of it I found
  id: totrans-split-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2024.wordpress.net](https://2024.wordpress.net) 因为这是当前的默认 Wordpress 主题，这是我找到的第一个例子。'
- en: XenForo
  id: totrans-split-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XenForo
- en: 'xenforo.com/community/: this is what turned up when I searched for an official
    forum'
  id: totrans-split-252
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[xenforo.com/community/](https://xenforo.com/community/)：这是我在搜索官方论坛时找到的结果。'
- en: On the `Itel P32`, the layout is badly wrong and page content overlaps itself.
    There's no reasonable way to interact with the element you want because of this,
    and reading the text requires reading text that's been overprinted multiple times.
  id: totrans-split-253
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Itel P32` 上，布局严重错误，页面内容重叠。由于这个问题，几乎没有合理的方式与想要的元素进行交互，而且阅读文本需要读取多次重叠的文本。
- en: Wordpress (old)
  id: totrans-split-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wordpress（旧版）
- en: Used thezvi.wordpress.com because it has the same content as Zvi's substack,
    and happens to be on some old wordpress theme that used to be a very common choice
  id: totrans-split-255
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用了 [thezvi.wordpress.com](https://thezvi.wordpress.com)，因为它与 Zvi 的 substack
    内容相同，并且碰巧使用了一种曾经非常常见的老式 Wordpress 主题。
- en: phpBB
  id: totrans-split-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: phpBB
- en: 'www.phpbb.com/community/index.php: this is what turned up when I searched for
    an official forum.'
  id: totrans-split-257
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[www.phpbb.com/community/index.php](https://www.phpbb.com/community/index.php)：这是我在搜索官方论坛时找到的结果。'
- en: MyBB
  id: totrans-split-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MyBB
- en: 'community.mybb.com: this is what turned up when I searched for an official
    forum.'
  id: totrans-split-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[community.mybb.com](https://community.mybb.com)：这是我在搜索官方论坛时找到的结果。'
- en: Site doesn't serve up a mobile version. In general, I find the desktop version
    of sites to be significantly better than the mobile version when on a slow device,
    so this works quite well, although they're likely penalized by Google for this.
  id: totrans-split-260
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站没有提供移动版本。一般来说，在慢速设备上，我发现桌面版本的网站要比移动版本好得多，所以这个设计非常有效，尽管它们可能因此而受到谷歌的惩罚。
- en: HN
  id: totrans-split-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hacker News
- en: news.ycombinator.com
  id: totrans-split-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[news.ycombinator.com](https://news.ycombinator.com)'
- en: In principle, HN should be the slowest social media site or link aggregator
    because it's written in a custom Lisp that isn't highly optimized and the code
    was originally written with brevity and cleverness in mind, which generally gives
    you fairly poor performance. However, that's only poor relative to what you'd
    get if you were writing high-performance code, which is not a relevant point of
    comparison here.
  id: totrans-split-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原则上，Hacker News 应该是最慢的社交媒体站点或链接聚合站点，因为它是用自定义 Lisp 编写的，没有高度优化，并且代码最初是以简洁和聪明为目标编写的，这通常会导致性能非常糟糕。然而，这只是相对于写高性能代码而言，这不是一个相关的比较点。
- en: danluu.com
  id: totrans-split-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[danluu.com](https://danluu.com)'
- en: Self explanatory
  id: totrans-split-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自解释
- en: This currently uses a bit less CPU than HN, but I expect this to eventually
    use more CPU as the main page keeps growing. At the moment, this page has 176
    links to 168 articles vs. HN's 199 links to 30 articles but, barring an untimely
    demise, this page should eventually have more links than HN.
  id: totrans-split-266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前，这比 Hacker News 使用的 CPU 少一点，但我预计随着主页的不断增长，这个页面最终会使用更多的 CPU。目前，这个页面有176个链接指向168篇文章，而
    Hacker News 有199个链接指向30篇文章，但是除非意外，否则这个页面最终会比 Hacker News 拥有更多的链接。
- en: As noted above, I find that pagination for such small pages makes the browsing
    experience much worse on slow devices or with bad connections, so I don't want
    to "optimize" this by paginating it or, even worse, doing some kind of dynamic
    content loading on scroll.
  id: totrans-split-267
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如上所述，我发现对于这样小的页面来说，分页会使在慢速设备或差网络连接下的浏览体验变得更糟，因此我不希望通过分页或者更糟糕的是在滚动时加载动态内容来“优化”它。
- en: Woo Commerce
  id: totrans-split-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Woo Commerce
- en: I originally measured Woo Commerce as well but, unlike the pages and platforms
    tested above, I didn't find that being fast or slow on the initial load was necessarily
    representative of subsequent performance of other action, so this wasn't included
    in the table because having this in the table is sort of asking for a comparison
    against Shopify. In particular, while the "most default" Woo theme I could find
    was significantly faster than the "most default" Shopify theme on initial load
    on a slow device, performance was multidimensional enough that it was easy to
    find realistic scenarios where Shopify was faster than Woo and vice versa on a
    slow device, which is quite different from what I saw with newer blogging platforms
    like Substack and Medium compared to older platforms like Wordpress, or a modern
    forum like Discourse versus the older PHP-based forums. A real comparison of shopping
    sites that have carts, checkout flows, etc., would require a better understanding
    of real-world usage of these sites than I was going to get in a single day.
  id: totrans-split-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最初我也测量了Woo Commerce，但与上述测试的页面和平台不同，我并没有发现初始加载速度快或慢能代表其他操作的后续性能，所以这并没有包含在表格中，因为这样做有点要求与Shopify进行比较。特别是，虽然我能找到的“最默认”的Woo主题在慢设备上的初始加载速度显著快于“最默认”的Shopify主题，但性能足够多维，以至于很容易找到在慢设备上Shopify比Woo更快，反之亦然的现实场景，这与我在像Substack和Medium这样的新博客平台与像Wordpress这样的老平台，或像Discourse这样的现代论坛与基于PHP的老论坛之间看到的情况大不相同。要进行真正的购物网站比较，包括购物车、结账流程等，需要比我在一天内能得到的更好的理解。
- en: NodeBB
  id: totrans-split-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NodeBB
- en: community.nodebb.org
  id: totrans-split-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[NodeBB社区](https://community.nodebb.org)'
- en: This wasn't in my original tests and I only tried this out because one of the
    founders of NodeBB suggested it, saying "I am interested in seeing whether @nodebb@fosstodon.org
    would fare better in your testing. We spent quite a bit of time over the years
    on making it wicked fast, and I personally feel it is a better representation
    of modern forum software than Discourse, at least on speed and initial payload."
  id: totrans-split-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这不在我的原始测试范围内，我只是因为NodeBB的一位创始人建议尝试了这个，他说：“我很想知道@nodebb@fosstodon.org在你的测试中表现如何。多年来，我们花了大量时间使其速度非常快，我个人认为在速度和初始负载方面，NodeBB比Discourse更好地代表了现代论坛软件。”
- en: I didn't do the full set of tests because I don't keep the `Itel P32` charged
    (the battery is in rough shape and discharges quite quickly once unplugged, so
    I'd have to wait quite a while to get it into a charged state)
  id: totrans-split-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我没有进行完整的测试，因为我不保持Itel P32充电（电池状况不佳，一旦断电就会迅速放电，所以我需要等待相当长的时间才能将其充电至充电状态）。
- en: On the tests I did, it got `0.3s/0.4s` on the `M1` and `3.4s/7.2s` on the `Tecno
    Spark 8C`. This is moderately slower than vBulletin and significantly slower than
    the faster php forums, but much faster than Discourse. If you need a "modern"
    forum for some reason and want to have your forum be usable by people who aren't,
    by global standards, rich, this seems like it could work.
  id: totrans-split-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我做的测试中，它在M1上为`0.3s/0.4s`，在Tecno Spark 8C上为`3.4s/7.2s`。这比vBulletin稍慢，比更快的php论坛显著慢，但比Discourse快得多。如果出于某些原因需要一个“现代”论坛，并且希望您的论坛能够被全球标准下的普通人使用，那么NodeBB看起来似乎是一个不错的选择。
- en: Another notable thing, given that it's a "modern" site, is that interaction
    works fine after initial load; you can scroll and tap on things and this all basically
    works, nothing crashed, etc.
  id: totrans-split-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个值得注意的事情是，考虑到它是一个“现代”网站，交互在初始加载后运行良好；您可以滚动并点击各种内容，这一切基本都能正常工作，没有崩溃等问题。
- en: Sizes were `0.9 MB` / `2.2 MB`, so also fairly light for a "modern" site and
    possibly usable on a slow connection, although slow connections weren't tested
    here.
  id: totrans-split-276
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大小为`0.9 MB` / `2.2 MB`，对于一个“现代”网站来说也相当轻量，可能在慢速连接上也能使用，尽管这里没有进行慢速连接的测试。
- en: Another kind of testing would be to try to configure pages to look as similar
    as possible. I'd be interested in seeing that results for that if anyone does
    it, but that test would be much more time consuming. For one thing, it requires
    customizing each site. And for another, it requires deciding what sites should
    look like. If you test something danluu.com-like, every platform that lets you
    serve up something light straight out of a CDN, like Wordpress and Ghost, should
    score similarly, with the score being dependent on the CDN and the CDN cache hit
    rate. Sites like Medium and Substack, which have relatively little customizability
    would score pretty much as they do here. Realistically, from looking at what sites
    exist, most users will create sites that are slower than the "most default" themes
    for Wordpress and Ghost, although it's plausible that readers of this blog would,
    on average, do the opposite, so you'd probably want to test a variety of different
    site styles.
  id: totrans-split-277
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种测试方式是尝试将页面配置得尽可能相似。如果有人这样做了，我会对结果很感兴趣，但这种测试会耗费更多时间。首先，它需要定制每个站点。另外，还需要决定站点应该看起来如何。如果你测试类似danluu.com的东西，每个允许你直接从CDN提供轻量级内容的平台，比如WordPress和Ghost，应该会得到类似的分数，分数取决于CDN和CDN缓存命中率。像Medium和Substack这样相对少定制化的站点，其得分基本上与这里的情况相同。从现有的站点来看，实际上，大多数用户创建的站点比WordPress和Ghost的“大多数默认”主题更慢，尽管这个博客的读者平均上会做相反的事情，所以你可能希望测试各种不同的站点风格。
- en: 'Appendix: this site vs. sites that don''t work on slow devices or slow connections'
  id: totrans-split-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 附录：本站与在慢速设备或慢速连接上无法运行的站点的对比。
- en: Just as an aside, something I've found funny for a long time is that I get quite
    a bit of hate mail about the styling on this page (and a similar volume of appreciation
    mail). By hate mail, I don't mean polite suggestions to change things, I mean
    the equivalent of road rage, but for web browsing; web rage. I know people who
    run sites that are complex enough that they're unusable by a significant fraction
    of people in the world. How come people are so incensed about the styling of this
    site and, proportionally, basically don't care at all that the web is unusable
    for so many people?
  id: totrans-split-279
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个旁白，我长期以来发现有趣的是，我收到了相当多关于这个页面样式的恶意邮件（以及类似数量的赞赏邮件）。我说的恶意邮件并不是指礼貌建议去改变事物，我指的是类似于道路愤怒，但用于网页浏览；网络愤怒。我认识的一些运行的站点复杂到不能被世界上相当一部分人使用。为什么人们对这个网站的样式感到如此愤怒，而在如此多的人无法使用互联网的情况下，基本上不太关心呢？
- en: Another funny thing here is that the people who appreciate the styling generally
    appreciate that the site doesn't override any kind of default styling, letting
    you make the width exactly what you want (by setting your window size how you
    want it) and it also doesn't override any kind of default styling you apply to
    sites. The people who are really insistent about this want everyone to have some
    width limit they prefer, some font they prefer, etc., but it's always framed in
    a way as if they don't want it, it's really for the benefit of people at large
    even though accommodating the preferences of the web ragers would directly oppose
    the preferences of people who prefer (just for example) to be able to adjust the
    text width by adjusting their window width.
  id: totrans-split-280
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的事情是，欣赏这种风格的人通常欣赏该站点不覆盖任何默认样式的做法，让你可以根据需要设置宽度（通过设置你想要的窗口大小），并且它也不会覆盖你对站点应用的任何默认样式。那些非常坚持这一点的人希望每个人都有他们喜欢的某种宽度限制，他们喜欢的某种字体等等，但总是以一种方式表达，好像他们并不希望这样，实际上这是为了大多数人的利益，即使迎合网络愤怒者的偏好会直接与那些喜欢（仅举例来说）通过调整窗口宽度来调整文本宽度的人的偏好相抵触。
- en: Until I pointed this out tens of times, this iteration would usually start with
    web ragers telling me that "studies show" that narrower text width is objectively
    better, but on reading every study that exists on the topic that I could find,
    I didn't find this to be the case. Moreover, on asking for citations, it's clear
    that people saying this generally hadn't read any studies on this at all and would
    sometimes hastily send me a study that they did not seem to have read. When I'd
    point this out, people would then change their argument to how studies can't really
    describe the issue (odd that they'd cite studies in the first place), although
    one person cited a book to me (which I read and they, apparently, had not since
    it also didn't support their argument) and then move to how this is what everyone
    wants, even though that's clearly not the case, both from the comments I've gotten
    as well as the data I have from when I made the change.
  id: totrans-split-281
  prefs: []
  type: TYPE_NORMAL
  zh: 直到我多次指出这一点之前，这种论调通常始于网络愤怒者告诉我“研究表明”较窄的文本宽度在客观上更好，但在阅读我能找到的所有有关主题的研究后，我并未发现这种情况。此外，当我要求引用时，显然这些人根本没有读过任何这方面的研究，有时会匆忙地给我寄送他们似乎没有读过的研究。当我指出这一点时，人们会改变他们的论点，认为研究无法真正描述这个问题（奇怪的是他们首先引用了研究），尽管有人给我引用了一本书（我读过，而他们显然没有，因为它也没有支持他们的论点），然后转而说这就是每个人想要的，尽管从我收到的评论以及我进行变更时的数据来看，显然并非如此。
- en: Web ragers who have this line of reasoning generally can't seem to absorb the
    information that their preferences are not universal and will insist that they
    regardless of what people say they like, which I find fairly interesting. On the
    data, when I switched from Octopress styling (at the time, the most popular styling
    for programming bloggers) to the current styling, I got what appeared to be a
    causal increase in traffic and engagement, so it appears that not only do people
    who write me appreciation mail about the styling like the styling, the overall
    feeling of people who don't write to me appears to be that the site is fine and
    apparently more appealing than standard programmer blog styling. When I've noted
    this, people tend to become become further invested in the idea that their preferences
    are universal and that people who think they have other preferences are wrong
    and reply with total nonsense.
  id: totrans-split-282
  prefs: []
  type: TYPE_NORMAL
  zh: Web 狂怒者通常不能理解他们的喜好并非普遍存在的事实，并坚持认为无论人们如何评价，他们依然喜欢这一点，我觉得相当有趣。当我从八爪鱼样式（当时是编程博客最流行的样式）切换到当前样式时，数据显示我网站的流量和互动似乎显著增加，因此看来不仅仅是给我写关于样式赞赏邮件的人喜欢这种样式，那些没有写信给我的人的整体感受似乎是网站不错，显然比标准的程序员博客样式更吸引人。当我指出这一点时，人们往往更加坚信他们的喜好是普遍的，认为有其他喜好的人是错误的，并回复完全无意义的话语。
- en: For me, two questions I'm curious about are why do people feel the need to fabricate
    evidence on this topic (referring to studies when they haven't read any, googling
    for studies and then linking to one that says the opposite of what they claim
    it says, presumably because they didn't really read it, etc.) in order to claim
    that there are "objective" reasons their preferences are universal or correct,
    and why are people so much more incensed by this than by the global accessibility
    problems caused by typical web design? On the latter, I suspect if you polled
    people with an abstract survey, they would rate global accessibility to be a larger
    problem, but by revealed preference both in terms of what people create as well
    as what irritates them enough to send hate mail, we can see that having fully-adjustable
    line width and not capping line width at their preferred length is important to
    do something about whereas global accessibility is not. As noted above, people
    who run sites that aren't accessible due to performance problems generally get
    little to no hate mail about this. And when I use a default Octopress install,
    I got zero hate mail about this. Fewer people read my site at the time, but my
    traffic volume hasn't increased by a huge amount since then and the amount of
    hate mail I get about my site design has gone from zero to a fair amount, an infinitely
    higher ratio than the increase in traffic.
  id: totrans-split-283
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，我很好奇的两个问题是，为什么人们感觉有必要在这个话题上捏造证据（指的是在没有阅读任何研究的情况下引用研究，或者谷歌搜索并链接到一个与他们声称的相反的研究，可能是因为他们真的没有读懂），以声称有“客观”理由他们的偏好是普遍或正确的；以及为什么人们对此比典型网页设计导致的全球无障碍问题更为愤怒？对于后者，我怀疑如果你对人们进行抽象调查，他们会认为全球无障碍是一个更大的问题，但通过实际偏好，无论是在人们创造的内容还是在什么会使他们愤怒到寄恨信的问题上，我们可以看到，完全可调整的行宽和不限制其首选长度对人们来说是重要的，而全球无障碍则不是。正如上文所述，由于性能问题导致网站无法访问的人通常几乎没有人给他们寄恨信。而当我使用默认的Octopress安装时，我对此没有收到任何恨信。虽然当时阅读我网站的人比较少，但我的流量量自那时以来并没有大幅增加，而关于我的网站设计我收到的恨信量已经从零增加到相当多，这比流量增长的比率要高得多。
- en: To be clear, I certainly wouldn't claim that the design on this site is optimal.
    [I just removed the CSS from the most popular blogging platform for programmers
    at the time because that CSS seemed objectively bad for people with low-end connections](/octopress-speedup/)
    and, as a side effect, got more traffic and engagement overall, not just from
    locations where people tend to have lower end connections and devices. No doubt
    a designer who cares about users on low-end connections and devices could do better,
    but there's something quite odd about both the untruthfulness and the vitriol
    of comments on this.
  id: totrans-split-284
  prefs: []
  type: TYPE_NORMAL
  zh: 要明确，我绝对不会声称这个网站的设计是最佳的。[我只是从当时程序员最流行的博客平台上移除了CSS，因为那个CSS对于低端连接的人来说显然不好](/octopress-speedup/)，作为一个副作用，得到了更多的流量和整体参与度，不仅仅是来自于那些连接和设备条件较差的地方。毫无疑问，关心低端连接和设备用户的设计师可能会做得更好，但关于这一点，评论中的不真实和尖刻的言论确实有些奇怪。
- en: </main>
  id: totrans-split-285
  prefs: []
  type: TYPE_NORMAL
  zh: </main>
