- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 15:00:28'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 15:00:28'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Tyler Kennedy
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tyler Kennedy
- en: 来源：[https://tkte.ch/articles/2024/03/15/parsing-urls-in-python.html](https://tkte.ch/articles/2024/03/15/parsing-urls-in-python.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://tkte.ch/articles/2024/03/15/parsing-urls-in-python.html](https://tkte.ch/articles/2024/03/15/parsing-urls-in-python.html)
- en: tl;dr - Try [can_ada](https://github.com/tktech/can_ada) if you need to parse
    URLs in Python.
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之 - 如果你需要在Python中解析URL，请尝试[can_ada](https://github.com/tktech/can_ada)。
- en: URLs
  id: totrans-split-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: URLs
- en: 'Parsing URLs *correctly* is surprisingly hard. Who even defines what a "correct"
    URL is? URLs have evolved drastically since they were originally defined in [1994](https://tools.ietf.org/html/rfc1738).
    The [WHATWG](https://whatwg.org/) has a [URL specification](https://url.spec.whatwg.org/)
    that is comprehensive and has helped standardize the behavior of URLs across browsers,
    but this specification still isn''t universal and ambiguities like "how many slashes
    are you allowed" can definitely get on [your nerves](https://daniel.haxx.se/blog/2017/01/30/one-url-standard-please):'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正确地解析URL*是非常困难的。甚至谁来定义一个“正确”的URL呢？自[1994](https://tools.ietf.org/html/rfc1738)年以来，URL已经发生了巨大变化。[WHATWG](https://whatwg.org/)有一个[URL规范](https://url.spec.whatwg.org/)，它全面并帮助标准化了URL在浏览器中的行为，但这个规范仍然不是普遍适用的，像“允许有多少斜杠”这样的歧义确实会让[你恼火](https://daniel.haxx.se/blog/2017/01/30/one-url-standard-please)：
- en: So browsers accept URLs written with thousands of forward slashes instead of
    two. That is not a good reason for the spec to say that a URL may legitimately
    contain a thousand slashes. I’m totally convinced there’s no critical content
    anywhere using such formatted URLs and no soul will be sad if we’d restricted
    the number to a single-digit. So we should. And yeah, then browsers should reject
    URLs using more.
  id: totrans-split-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 因此，浏览器接受用成千上万个正斜杠而不是两个的URL写法。这并不是规范说URL可能合法包含成千上万个斜杠的充分理由。我完全确信，世界上没有任何关键内容使用这种格式化的URL，如果我们限制数量为个位数，也没有人会因此而伤心。所以我们应该这样做。然后，浏览器应拒绝使用更多的URL。
- en: '*However*, if you''re creating something new and want to handle URLs, the WHATWG''s
    URL specification probably is the best place to start.'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*然而*，如果你正在创建新的内容，并希望处理URL，WHATWG的URL规范可能是开始的最佳选择。'
- en: URLs in Python
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: URLs in Python
- en: 'If you''re working in Python, you''d probably start with the built-in `urllib`
    module. It''s been around forever, but unfortunately it''s not compliant with
    *any* URL specification, either the much older [rfc3978](https://tools.ietf.org/html/rfc3986):'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在Python中工作，你可能会从内置的`urllib`模块开始。它已经存在很长时间了，但不幸的是它也不符合*任何*URL规范，包括更早的[rfc3978](https://tools.ietf.org/html/rfc3986)：
- en: RFC 3986 is considered the current standard and any future changes to urlparse
    module should conform with it. The urlparse module is currently not entirely compliant
    with this RFC due to defacto scenarios for parsing, and for backward compatibility
    purposes, some parsing quirks from older RFCs are retained. The testcases in test_urlparse.py
    provides a good indicator of parsing behavior.
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: RFC 3986被认为是当前的标准，任何对urlparse模块的未来更改都应符合它。由于现实场景的解析和为了向后兼容性，保留了一些来自旧版RFC的解析怪癖。test_urlparse.py中的测试用例提供了解析行为的良好指标。
- en: '... or the WHATWG URL Parser spec:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '... 或者WHATWG URL解析器规范：'
- en: The WHATWG URL Parser spec should also be considered. We are not compliant with
    it either due to existing user code API behavior expectations (Hyrum's Law). It
    serves as a useful guide when making changes.
  id: totrans-split-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: WHATWG URL解析器规范也应予以考虑。由于现有用户代码API行为期望（Hyrum's Law），我们也不完全符合它。在进行更改时，它作为一个有用的指南。
- en: Having existed for over 16 years, so many projects depend on the urllib module
    parsing URLs in *exactly* the way it does that it's unlikely to ever change in
    any significant fashion.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存在超过16年，许多项目依赖于urllib模块以*完全相同*的方式解析URL，这使得它不太可能在任何重大方式上发生变化。
- en: Ada
  id: totrans-split-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ada
- en: 'The [Ada](https://github.com/ada-url/ada) project is a new (2024) attempt to
    create a URL parsing library that adheres to the WHATWG URL specification and
    works [really, really fast](https://github.com/ada-url/ada?tab=readme-ov-file#ada-is-fast),
    parsing 7 URLs for every 1 parsed by cURL. Written in C++, it now has bindings
    to several other languages, including [Python](https://github.com/ada-url/ada-python),
    and has become the URL parsing library used by Node.js as of version 18 to great
    success:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[Ada](https://github.com/ada-url/ada)项目是一个新的（2024年）尝试，旨在创建一个符合WHATWG URL规范且非常[快速](https://github.com/ada-url/ada?tab=readme-ov-file#ada-is-fast)的URL解析库，每1个由cURL解析的URL可以解析7个。它用C++编写，现在已经有多种其他语言的绑定，包括[Python](https://github.com/ada-url/ada-python)，并且作为Node.js
    18版本的URL解析库已经取得了巨大的成功：'
- en: Since Node.js 18, a new URL parser dependency was added to Node.js — Ada. This
    addition bumped the Node.js performance when parsing URLs to a new level. Some
    results could reach up to an improvement of 400%.
  id: totrans-split-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 自从Node.js 18版本以来，新增了一个名为Ada的URL解析器依赖项到Node.js中 —— 这一增加将Node.js解析URL的性能提升到一个新的水平。一些结果可以达到提高400%。
- en: The ada-python binding is perfectly functional, and the official binding for
    the project. However, the ada-python bindings are built on [CFFI](https://cffi.readthedocs.io/en/latest/),
    an approach that has the binding between C and Python written in Python itself,
    which loses some of the performance benefits of using Ada in the first place when
    most of the time is spent just making the function call.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: ada-python绑定功能完善，也是该项目的官方绑定。然而，ada-python绑定是建立在[CFFI](https://cffi.readthedocs.io/en/latest/)之上的，这种方法使得在Python中编写C和Python之间的绑定，失去了使用Ada时获得的性能优势，因为大部分时间都花在了函数调用上。
- en: can_ada
  id: totrans-split-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: can_ada
- en: '[Daniel Lemire](https://lemire.me), one of the developers behind the Ada project
    asked me to [take a look](https://github.com/ada-url/ada-python/pull/1#issuecomment-1550405501)
    at the ada-python bindings and out of that was born [can_ada](https://github.com/tktech/can_ada),
    a new Python binding that uses [pybind11](https://pybind11.readthedocs.io/en/stable/)
    and template magic to generate the binding code, which is then compiled into a
    Python extension module. This approach has the potential to be much faster than
    the ada-python bindings, and indeed when comparing the two bindings, the new can_ada
    binding is about 2x faster than the ada-python bindings which in turn is about
    2x faster than `urllib.parse`!'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[Daniel Lemire](https://lemire.me)是Ada项目背后的开发者之一，他要求我 [看一看](https://github.com/ada-url/ada-python/pull/1#issuecomment-1550405501)
    ada-python绑定，从而诞生了[can_ada](https://github.com/tktech/can_ada)，一个新的Python绑定，使用[pybind11](https://pybind11.readthedocs.io/en/stable/)和模板魔法生成绑定代码，然后编译为Python扩展模块。这种方法潜力巨大，比ada-python绑定快得多，实际上，比较这两种绑定时，新的can_ada绑定速度大约是ada-python绑定的两倍，而ada-python绑定又比`urllib.parse`快两倍！'
- en: '[PRE0]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: At the same time, using the pybind11 approach allows for a very succinct and
    [readable](https://github.com/TkTech/can_ada/blob/main/src/binding.cpp) binding
    definition, coming in at just **60** lines of code and almost a 1:1 with the underlying
    C++ API.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，采用pybind11方法可以非常简洁和[可读](https://github.com/TkTech/can_ada/blob/main/src/binding.cpp)的绑定定义，仅仅60行代码，几乎与底层C++
    API一一对应。
- en: 'Binary builds are available now for CPython 3.7 to 3.12, and PyPy 3.7 to 3.9
    on many OS''s and architectures. Install it with pip or [get the source](https://github.com/tktech/can_ada):'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: CPython 3.7到3.12和PyPy 3.7到3.9的二进制构建现已提供在许多操作系统和架构上。通过pip安装它或者[获取源代码](https://github.com/tktech/can_ada)：
- en: Example
  id: totrans-split-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Compare this to the urllib version, which is not WHATWG compliant:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将其与不符合WHATWG规范的urllib版本进行比较：
- en: '[PRE2]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
