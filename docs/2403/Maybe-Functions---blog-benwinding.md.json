["```\nfunction maybeGetUser(): User &#124; null {\n if (!loggedIn) {\n return null;\n }\n return fetchUser();\n} \n```", "```\n function Page() {\n const bestFriends = maybeRenderBestFriends();\n return <>\n {bestFriends}\n </>;\n}\n function maybeRenderBestFriends() {\n const user = maybeGetUser();\n const friends = maybeGetFriends(user);\n const bestFriends = maybeFilterBestFriends(friends);\n return render(bestFriends);\n}\n function maybeGetUser(): User &#124; null {\n if (!loggedIn) {\n return null;\n }\n return fetchUser();\n}\n function maybeGetFriends(user: User &#124; null): Friend[] &#124; null {\n if (!user) {\n return null;\n }\n return fetchUserFriends(user);\n}\n function maybeFilterBestFriends(friends: Friend[] &#124; null): Friend[] &#124; null {\n if (!friends) {\n return null;\n }\n return friends.filter(f => f.bestFriend);\n} \n```", "```\n function Page() {\n const bestFriends = loggedIn\n ? renderBestFriends()\n : null;\n return <>\n {bestFriends}\n </>;\n}\n function renderBestFriends() {\n const user = getUser();\n const friends = getFriends(user);\n const bestFriends = filterBestFriends(friends);\n return render(bestFriends);\n}\n function getUser(): User {\n return fetchUser();\n}\n function getFriends(user: User): Friend[] {\n return fetchUserFriends(user);\n}\n function filterBestFriends(friends: Friend[]): Friend[] {\n return friends.filter(f => f.bestFriend);\n} \n```", "```\n class Maybe<T> {\n constructor(\n value: T &#124; null\n )\n runSafely(fn: (val: T) => V): Maybe<V> {\n if (!this.value) {\n return new Maybe(null);\n }\n return new Maybe(fn(this.value));\n }\n}\n function Page() {\n const bestFriends = maybeRenderBestFriends();\n return <>\n {bestFriends}\n </>;\n}\n function maybeRenderBestFriends() {\n const user = new Maybe(getUser());\n const friends = user.runSafely(getFriends);\n const bestFriends = friends.runSafely(filterBestFriends);\n return render(bestFriends);\n}\n function getUser(): User {\n if (!loggedIn) {\n return null\n }\n return fetchUser();\n}\n function getFriends(user: User): Friend[] {\n return fetchUser();\n}\n function filterBestFriends(friends: Friend[]): Friend[] {\n return friends.filter(f => f.bestFriend);\n} \n```"]