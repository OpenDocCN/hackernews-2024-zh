- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:40:44'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:40:44
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Donald Knuth - The Patron Saint of Yak Shaves
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 唐纳德·克努斯 - 牦牛剃须的守护神
- en: 来源：[https://yakshav.es/the-patron-saint-of-yakshaves/](https://yakshav.es/the-patron-saint-of-yakshaves/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://yakshav.es/the-patron-saint-of-yakshaves/](https://yakshav.es/the-patron-saint-of-yakshaves/)
- en: Donald Knuth - The Patron Saint of Yak Shaves
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 唐纳德·克努斯 - 牦牛剃须的守护神
- en: 'In 2015, I gave a talk in which I called [Donald Knuth the Patron Saint of
    Yak Shaves](https://speakerdeck.com/skade/tex-the-ultimate-yakshave). The reason
    is that Donald Knuth achieved the most perfect and long-running yak shave: TeX.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年，我在一个演讲中称[唐纳德·克努斯为牦牛剃须的守护神](https://speakerdeck.com/skade/tex-the-ultimate-yakshave)。原因是唐纳德·克努斯实现了最完美和最持久的牦牛剃须：TeX。
- en: I figured this is worth repeating.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得这值得重复。
- en: How to achieve the ultimate Yak Shave
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现终极的牦牛剃须
- en: The ultimate yak shave is the combination of improbable circumstance, the privilege
    to be able to shave at your hearts will and the will to follow things through
    to the end. Here’s the way it was achieved with TeX. The recount is purely mine,
    inaccurate and obviously there for fun. I’ll avoid the most boring facts that
    everyone always tells, such as [why Knuth’s checks have their own Wikipedia page](https://en.wikipedia.org/wiki/Knuth_reward_check).
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 终极牦牛剃须是不可能的情况的组合，有能力按照自己的意愿剃须，并有意愿把事情做到底。这是如何在TeX中实现的。这个叙述纯属我个人的，不准确，显然是为了好玩。我会避免每个人都会讲的最无聊的事实，比如[为什么克努斯的支票有自己的维基百科页面](https://en.wikipedia.org/wiki/Knuth_reward_check)。
- en: So, let’s get things started.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们开始吧。
- en: The Pre-Shave
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前剃须
- en: TeX was invented to typeset a book. No plural. It was invented to typeset the
    second edition of “The Art of Computer Programming”. The second edition had to
    be typeset again, as “hot type” typesetting, which was used for the first edition,
    was not available anymore. Being unimpressed by the available options, Knuth decided
    to write his own system, which later ended up as TeX.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: TeX是为了排版一本书而发明的。没有复数形式。它是为了《计算机程序设计艺术》第二版而发明的。第二版必须重新排版，因为用于第一版的“热铅”排版不再可用。由于对现有选项不满意，Knuth决定写自己的系统，后来成为TeX。
- en: 'But “The Art of Computer Programming” is an impressive book in its own right:
    it is still unfinished, currently spanning 3.5 volumes (yes, the fourth is unfinished,
    but the first chapters are released). It was called a book of the century by [American
    scientist writers](https://web.archive.org/web/20080820030403/http://www.americanscientist.org/bookshelf/pub/100-or-so-books-that-shaped-a-century-of-science).'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，《计算机程序设计艺术》本身也是一本令人印象深刻的书：尽管未完成，目前跨越了3.5卷（是的，第四卷还未完成，但第一章节已经发布）。它被[美国科学作家](https://web.archive.org/web/20080820030403/http://www.americanscientist.org/bookshelf/pub/100-or-so-books-that-shaped-a-century-of-science)称为世纪之书。
- en: 'Yak shave -2: Write a book of the century'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 牦牛剃须 -2：写一本世纪之书
- en: 'Digging deeper into TAOCP, it already shows the works of a yak shaver destined
    for greater things. All programs in this book refer to a common assembly language:
    MIX. Which was invented for the book.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 深入研究《计算机程序设计艺术》，这本书已经展示了一个命中注定要成就更大事业的牦牛剃须者的作品。本书中的所有程序都参考了一种通用的汇编语言：MIX。这种语言是为了这本书而发明的。
- en: 'Yak shave -1: Invent your own computer for illustration purposes'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 牦牛剃须 -1：为了说明而发明自己的计算机
- en: Implementation
  id: totrans-split-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现
- en: The first version of TeX was implemented using the [SAIL](https://en.wikipedia.org/wiki/SAIL_(programming_language))
    programming language. It was later replaced by WEB. What’s WEB? It’s a programming
    language, invented by… You’ll have guessed it by now, Donald Knuth. It transpiles
    to PASCAL. Knuth transpiled the WEB before it was cool.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: TeX的第一个版本是用[SAIL](https://en.wikipedia.org/wiki/SAIL_(programming_language))编程语言实现的。后来被WEB取代。WEB是什么？这是一种编程语言，由…你现在肯定已经猜到了，唐纳德·克努斯发明。它转译为PASCAL。Knuth在WEB变酷之前就已经转译了WEB。
- en: 'Yak shave 1: Somewhere along the road, implement your own programming language…'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 牦牛剃须 1：沿途某处，实现自己的编程语言…
- en: 'WEB is a special language: in WEB, any bare text is just text. It’s interleaved
    with marked pieces of code, which are later used for the program code. The documentation
    can be run through a special program to produce… a TeX file. The concept is called
    “literate programming” and was introduced by… Donald Knuth.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: WEB是一种特殊的语言：在WEB中，任何裸文本都只是文本。它与标记的代码片段交错，这些代码片段后来用于程序代码。文档可以通过特殊程序运行以生成…一个TeX文件。这一概念被称为“文学编程”，由…唐纳德·克努斯引入。
- en: 'Yak shave 2: Invent your own programming paradigm for it'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 牦牛剃须 2：为此发明自己的编程范式
- en: But, what does TeX do? Mainly, it does text layout and a couple of other things.
    Knuth being known for research on algorithms couldn’t do without coming up with
    his own algorithm, later published together with Michael Plass. What does the
    algorithm do? It finds a visually pleasing way to lay out a paragraph on a page
    without making line breaks look jarring (for example by adjusting the “glue”,
    the whitespace between words). Here’s a [nice explanation](https://www.ugrad.cs.ubc.ca/~cs490/2015W2/lectures/Knuth.pdf).
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，TeX究竟是做什么的呢？主要是文本布局和其他几件事情。因为Knuth以其在算法研究上的贡献而闻名，他当然离不开自己的算法，后来与Michael Plass一起发表。这个算法做什么呢？它找到了在页面上排列段落的视觉上令人愉悦的方式，而不会让行尾看起来突兀（例如通过调整“粘合剂”，即单词之间的空白）。这里有一个[很好的解释](https://www.ugrad.cs.ubc.ca/~cs490/2015W2/lectures/Knuth.pdf)。
- en: It’s still considered good and has a huge factor in the recognisable look of
    TeX documents.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 它仍被认为是良好的，并且对TeX文档的可识别外观具有巨大影响。
- en: 'Yak shave 3: Invent your own layout algorithm for it'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 牦牛剃须3：为它发明你自己的布局算法
- en: 'Which brings us to the next problem: *what* does this thing lay out? Generically
    speaking: objects and clusters of objects of varying sizes. Interestingly, that’s
    what TeX deals with, it has no concept of a character other then dimensions.'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这也带来了下一个问题：*这个东西*到底是做什么的？泛泛而言：各种大小的对象和对象群。有趣的是，这正是TeX所处理的，除了尺寸之外它没有字符的概念。
- en: Nevertheless, these are usually characters and characters are provided by fonts.
    Fonts must usually be licensed at a fee and free fonts weren’t so available in
    the 70s.
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些通常是字符，字符是由字体提供的。字体通常需要付费许可，70年代并没有那么多免费字体可用。
- en: Another very recognisable feature of TeX documents that they are often set in
    a font called “Computer Modern”.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: TeX文档的另一个非常可识别的特征是它们通常使用名为“Computer Modern”的字体。
- en: I’m trying to make this whole thing a bit more thrilling, so I will let you
    guess who created that one.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我试图让整个过程更加刺激，所以我会让你猜猜是谁创建了那个。
- en: 'Yak shave 4: Design a font'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 牦牛剃须4：设计一个字体
- en: Fonts need to be authored. Usually, they are described in some vector description,
    often Bézier curves. This is fairly standard and not an innovation of Knuth. *But*,
    he wrote a description language for that, along with an interpreter to turn this
    descriptions into proper font files. This is [METAFONT](https://en.wikipedia.org/wiki/Metafont).
    It’s not strictly part of TeX, it’s just that the Yak happened to stand close.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 字体需要被创作。通常它们是用一些矢量描述来描述的，通常是贝塞尔曲线。这是相当标准的，不是Knuth的创新。*但是*，他为此编写了一种描述语言，并配以解释器将这些描述转换为正确的字体文件。这就是[METAFONT](https://en.wikipedia.org/wiki/Metafont)。它并非TeX的严格组成部分，只是这头牦牛碰巧站得近。
- en: 'Yak shave 5: Write an authoring tool for fonts'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 牦牛剃须5：为字体编写一个作者工具
- en: 'As a side-note, METAFONT was later evolved into METAPOST for generic vector
    drawings, which has the one feature I still miss from many modern graphics description
    languages: the ability to describe an (addressable) point as the intersection
    between two other primitives.'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 顺带一提，METAFONT后来演变成了用于通用矢量绘图的METAPOST，它具有许多现代图形描述语言缺失的一个特性：能够描述一个（可寻址的）点作为两个其他原始图元的交点。
- en: 'Another side-note: both TeX and METAFONT still see releases, at a slow pace.
    TeX is currently at version 3.14159265, METAFONT at 2.7182818\. Yep, TeX is slowly
    converging towards pi, while METAFONT towards e. Take that, semantic versioning
    advocates!'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个小提示：TeX和METAFONT仍然按照缓慢的速度发布更新。TeX目前版本为3.14159265，METAFONT版本为2.7182818。是的，TeX正缓慢趋向于圆周率π，而METAFONT则朝着自然对数e方向发展。看吧，语义版本控制的倡导者们！
- en: 'Yak shave 6: Come up with your own versioning scheme'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 牦牛剃须6：提出你自己的版本控制方案
- en: 'Yak shave 7: Avoid adoption of it for greater good'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 牦牛剃须7：避免因为更大的利益而采纳它
- en: We’re not done yet. We can layout text (and other things), but where do we convert
    it to? Now, everyone knows the horror printers invoke, so no one wants to deal
    with those directly. Classic TeX instead converts things to [DVI](https://en.wikipedia.org/wiki/Device_independent_file_format),
    the “device independent” format. I don’t know many details about it, except what’s
    on the wiki page, which feels the need to specifically point out that “DVI is
    not a document encryption format”. It is again a stack-based language (in contrast
    to PostScript not turing complete), which can then be interpreted through a driver,
    which would then send that to whatever target (a printer, PDF or such). It was
    designed by…
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没完。我们可以排版文本（和其他东西），但是要将它们转换成什么呢？现在，每个人都知道打印机带来的恐怖，所以没有人想直接处理那些。经典的TeX转换为[DVI](https://en.wikipedia.org/wiki/Device_independent_file_format)，即“设备无关”格式。我不了解它的详细情况，只知道维基页面上的信息，其中特别指出“DVI不是文档加密格式”。它再次是一种基于堆栈的语言（与PostScript不同，不是图灵完备的），可以通过驱动程序解释，然后发送到任何目标（打印机、PDF或类似）。它是由……设计的。
- en: David R. Fuchs, Knuth just wrote the implementation.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: David R. Fuchs，Knuth刚刚写了实现。
- en: 'Yak shave 8: Implement a custom language for printable documents'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: Yak shave 8：为可打印文档实现一种自定义语言。
- en: Note that I haven’t mentioned that TeX is an… interesting… language by itself,
    but I don’t consider that a yak shave, this was just the implementation.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我没有提到TeX本身是一种……有趣的语言，但我不认为这是yak shave，这只是实现而已。
- en: That makes most of the initial implementation complete. Which means, in orderly
    fashion, you should give matters in the hand of the community.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得大部分初始实现都完成了。这意味着，按照有序的方式，你应该把事情交给社区处理。
- en: Since the release of TeX, the community has been busy working on using it as
    a platform. If you ever downloaded the full TeX distribution, please bear in mind
    that you are downloading the amassed work of over 40 years, to make sure that
    each and every TeX document ever written builds. We’re talking about documents
    here.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 自TeX发布以来，社区一直忙于将其用作平台。如果你曾经下载过完整的TeX发行版，请记住，你正在下载超过40年积累的工作，以确保编译每一篇TeX文档。我们在谈论文档。
- en: But mostly, two big projects sprung out of that. The first is LaTeX by Leslie
    Lamport. Lamport is a very productive researcher, famous for research in formal
    methods through TLA+ and also known laying groundwork for many distributed algorithms.
    LaTeX is based on the idea of seperating presentation and content. It is based
    around the idea of document classes, which then describe the way a certain document
    is layed out. Think Markdown, just much more complex. The second is ConTeXt, which
    is far more focused on fine grained layout control.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 但大多数情况下，两个大项目就此展开。第一个是由Leslie Lamport创建的LaTeX。Lamport是一个非常有成就的研究者，以在TLA+中进行形式方法研究和为许多分布式算法奠定基础而闻名。LaTeX基于分离展示和内容的思想。它围绕文档类的概念展开，然后描述了某个文档的布局方式。想象一下Markdown，只是复杂得多。第二个是ConTeXt，它更加专注于精细的布局控制。
- en: 'Both share a common property:'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 两者共享一个共同的特性：
- en: 'Community yak shave 1: Create not one, but two programs that are very ungoogleable…
    Before Google is invented.'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 社区的yak shave 1：创建不止一个，而是两个在Google发明之前无法被搜索到的程序……
- en: Being active in a language that has lingo built around “Rust”, “Cargo” and “manifests”,
    I feel right at home.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个以“Rust”、“Cargo”和“manifests”为中心的语言中积极参与，我感到非常自在。
- en: 'Now, the community also wants to evolve TeX: a lot has changed over the years
    in technology, so, for example, you’d like to use modern font formats, directly
    write to modern output formats or use this new UTF-8 thingy. For that, there are
    specialised TeX interpreters, such as `pdf(la)tex`, `lua(la)tex` and `xe(la)tex`.
    There’s a problem here: you are not allowed to change TeX and distribute [it under
    that name](https://en.wikipedia.org/wiki/TeX#License). The thinking here is that
    if you have a `tex` binary, you can compile any valid TeX from the past and from
    the future.'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，社区还希望发展TeX：多年来技术发生了很多变化，例如，你可能想使用现代字体格式，直接写入现代输出格式或使用这种新的UTF-8东西。为此，有专门的TeX解释器，如`pdf(la)tex`、`lua(la)tex`和`xe(la)tex`。这里有个问题：你不能改变TeX并以[这个名字分发](https://en.wikipedia.org/wiki/TeX#License)。这里的想法是，如果你有一个`tex`二进制文件，你可以编译过去和未来的任何有效的TeX。
- en: The first issue on that road is that WEB isn’t really a popular programming
    language, neither is PASCAL and running it on modern systems is a bit of a pain.
    Which means…
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这条道路上的第一个问题是，WEB并不真正是一种流行的编程语言，PASCAL也不是，在现代系统上运行它有点麻烦。这意味着……
- en: 'Community yak shave 2: Transpile WEB to C and work from there'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 社区剃牦牛2：将WEB转译成C再进行工作
- en: This is just the start of a great endeavour…
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个伟大努力的开始…
- en: 'Community yak shave 3: Build a lot of tooling around that'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 社区剃牦牛3：围绕它建立大量工具
- en: The Moral of the Story
  id: totrans-split-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故事的寓意
- en: 'Whenever you feel like “can’t we just replace this whole thing, it can’t be
    so hard” when handling TeX, don’t forget how many years of work and especially
    knowledge were poured into that system. Typesetting isn’t the *most* popular knowledge
    around programmers. Especially see it in the context of the space it is in: they
    can’t remove legacy. Ever. That would break documents.'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你在处理TeX时感觉“我们能不能就把这整个东西替换掉，肯定不难”的时候，请不要忘记，这个系统背后投入了多少年的工作，尤其是知识。排版并不是程序员中最受欢迎的知识。特别是在它所处的环境中看：他们不能移除遗留系统。永远不行。那会破坏文档。
- en: TeX is also not a programming language. It might resemble one, but mostly, it
    should be approached as a typesetting system first. A lot of its confusing lingo
    gets much better then. It’s not programming lingo.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: TeX也不是一种编程语言。它可能看起来像，但大多数时候，它应该被看作是一种排版系统。这样，很多令人困惑的术语就更容易理解了。这不是编程术语。
- en: By approaching TeX with an understanding for its history, a lot of things can
    be learned from it. And yes, a replacement would be great, but it would take ages.
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过了解TeX的历史来接近它，可以从中学到很多东西。是的，替代品会很棒，但这需要很长时间。
- en: In any case, I hope I thoroughly convinced you why Donald Knuth is the Patron
    Saint of Yak Shaves.
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，我希望我已经彻底地说服你，为什么唐纳德·克努斯是牦牛剃毛的保护神。
- en: This comes out of a enjoyable discussion with [Arne from Lambda Island](https://lambdaisland.com/),
    who listened and said “you should totally turn this into a talk”.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与[Lambda Island 的阿恩](https://lambdaisland.com/)进行愉快讨论后得出的结论，他听后说：“你应该完全把这转变成一个演讲”。
- en: '[top](/)'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[top](/)'
