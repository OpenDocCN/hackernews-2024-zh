- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:29:58'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Try ripgrep in Y minutes
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://codapi.org/try/ripgrep/](https://codapi.org/try/ripgrep/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[ripgrep](https://github.com/BurntSushi/ripgrep) is a command line tool that
    searches your files for patterns that you give it. It''s similar to grep, but
    provides a better user experience and is (generally) faster.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: '[Basics](#basics) · [Recursive search](#recursive-search) · [Useful options](#useful-options)
    · [Replacements](#replacements) · [Configuration](#configuration) · [Further reading](#further-reading)'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: ✨ This is an open source guide. Feel free to [improve it](https://github.com/nalgeon/tryxinyminutes/blob/main/try/ripgrep/index.md)!
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: Basics
  id: totrans-split-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ripgrep behaves as if it were reading each file line by line:'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: If a line matches the pattern given to ripgrep, that line is printed.
  id: totrans-split-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a line does not match the pattern, the line is not printed.
  id: totrans-split-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best way to see how this works is with an example.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll try searching [httpurr](https://github.com/rednafi/httpurr) source code,
    which I have already downloaded to the `/opt/httpurr` directory like this:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
- en: '[Search in file](#search-in-file) · [Partial matches](#partial-matches) · [Regular
    expressions](#regular-expressions) · [Fixed strings](#fixed-strings) · [Multiple
    patterns](#multiple-patterns)'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: Search in file
  id: totrans-split-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s find all occurrences of the word `codes` in `README.md`:'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE1]
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: So what happened here? ripgrep read the contents of `README.md`, and for each
    line that contained `codes`, ripgrep printed it to the terminal.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: ripgrep includes the line number for each line by default (use `-n`/`--line-number`
    to force this) and highlights the matches (use `--color=always` to force this).
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: Partial matches
  id: totrans-split-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'ripgrep supports partial matches by default:'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE2]
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: The word `description` matches the `descr` search pattern.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: 'To search for whole words instead, use the `-w` (`--word-regexp`) option:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-27
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE4]
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: ripgrep found strings containing the word `code`, but not `codes`. Try removing
    `--word-regexp` and see how the results change.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: Regular expressions
  id: totrans-split-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, ripgrep treats the search pattern as a *regular expression*. Let''s
    find all lines with a word that contains `res` followed by other letters:'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE5]
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: '`\w+` means "one or more word-like characters" (e.g. letters like `p` or `o`,
    but not punctuation like `.` or `!`), so `response`, `resource`, and `rest` all
    match.'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we are only interested in 4 letter words starting with `res`:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE6]
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: '`\b` means "word boundary" (e.g. a space, a punctuation character, or the end
    of a line), so `rest` matches, but `response` and `resource` don''t.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s search for 3-digit numbers (showing first 10 matches with `head`):'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE8]
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
- en: A full tutorial on regular expressions is beyond the scope of this guide, but
    ripgrep's specific syntax is documented in the [regex](https://docs.rs/regex/*/regex/#syntax)
    package.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: Fixed strings
  id: totrans-split-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What if we want to search for a *literal* string instead of a regular expression?
    Suppose we are interested in a word `code` followed by a dot:'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-split-43
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE10]
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
- en: Since `.` means "any character" in regular expressions, our pattern also matches
    `code` , `codes` and other cases we are not interested in.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: 'To treat the pattern as a literal string, use the `-F` (`--fixed-strings`)
    option:'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-split-47
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE12]
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: Much better!
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
- en: Multiple patterns
  id: totrans-split-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To search for multiple patterns, list them with the `-e` (`--regexp`) option.
    ripgrep will output lines matching at least one of the specified patterns.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, search for `make` or `run`:'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-split-53
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE14]
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have many patterns, it may be easier to put them in a file and point
    ripgrep to it with `-f` (`--file`):'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-split-56
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE16]
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
- en: Recursive search
  id: totrans-split-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Previously, we used ripgrep to search a single file, but ripgrep is perfectly
    capable of recursively searching in directories.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
- en: '[Search in directory](#search-in-directory) · [Automatic filtering](#automatic-filtering)
    · [File globs](#file-globs) · [File types](#file-types)'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
- en: Search in directory
  id: totrans-split-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s find all unexported functions (they start with a lowercase letter):'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE17]
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
- en: 'This search returned matches from both the `cmd` and `src` directories. If
    you are only interested in `cmd`, specify it instead of `.`:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE18]
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
- en: 'To search multiple directories, list them all like this:'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-split-67
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE20]
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
- en: Automatic filtering
  id: totrans-split-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'ripgrep is smart enough to ignore some paths when searching:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
- en: patterns from `.gitignore`,
  id: totrans-split-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hidden files and directories,
  id: totrans-split-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: binary files,
  id: totrans-split-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: symlinks.
  id: totrans-split-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, let''s search for GitHub action jobs:'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE21]
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the GitHub stuff is in a hidden `.github` directory, ripgrep won''t find
    it. But it will with the `-.` (`--hidden`) option:'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE22]
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, there are options to enable other paths:'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
- en: '`--no-ignore` to search patterns from `.gitignore`;'
  id: totrans-split-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-a` (`--text`) to search binary files;'
  id: totrans-split-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-L` (`--follow`) to follow symlinks.'
  id: totrans-split-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ripgrep allows you to override the ignored paths from `.gitignore` with `.ignore`
    files. See the [official guide](https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md#automatic-filtering)
    for details.
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
- en: File globs
  id: totrans-split-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s search for `httpurr`:'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-split-86
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE24]
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
- en: Note that I have limited the number of results per file to 5 with the `-m` (`--max-count`)
    option to keep the results readable in case there are many matches.
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Quite a lot of results. Let''s narrow it down by searching only in `.go` files:'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE25]
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
- en: The `-g` (`--glob`) option takes a *glob* (filename pattern), typically containing
    a fixed part (`.go` in our example) and a wildcard `*` ("anything but the path
    separator").
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example — search in files named `http`-something:'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE26]
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
- en: 'To *negate* the glob, prefix it with `!`. For example, search everywhere except
    the `.go`, `.md`, and `.rb` files:'
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-split-95
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE28]
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
- en: All that is left is `go.mod`.
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
- en: 'To apply multiple filters, specify multiple glob options. For example, find
    all functions except those in test files:'
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-split-99
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE30]
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
- en: File types
  id: totrans-split-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Instead of using a glob to filter by extension, you can use ripgrep''s support
    for file types. Let''s search for `httpurr` in `.go` files:'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE31]
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
- en: The `-t` (`--type`) option restricts the search results to files of a certain
    type (Go source files in our example).
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
- en: 'To exclude files of a certain type, use `-T` (`--not-type`):'
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-split-106
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE33]
  id: totrans-split-107
  prefs: []
  type: TYPE_NORMAL
- en: We've excluded Go, Markdown and Ruby files, so all that's left is `go.mod` (personally,
    I'd consider it a Go file as well, but ripgrep disagrees).
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
- en: Useful options
  id: totrans-split-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ripgrep supports a number of additional search and output options you may find
    handy.
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
- en: '[Ignore case](#ignore-case) · [Inverse matching](#inverse-matching) · [Count
    matches](#count-matches) · [Show matches only](#show-matches-only) · [Show files
    only](#show-files-only) · [Show context](#show-context) · [Multiline search](#multiline-search)'
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
- en: Ignore case
  id: totrans-split-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember our search for `codes` in the README?
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE34]
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
- en: 'It returns `codes` matches, but not `Codes` because ripgrep is case-sensitive
    by default. To change this, use `-i` (`--ignore-case`):'
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-split-116
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE36]
  id: totrans-split-117
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also `-S` (`--smart-case`), which behaves like `--ignore-case` unless
    the search pattern is all caps:'
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-split-119
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE38]
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
- en: Searching for `HTTP` matches `HTTP`, but not `https` or `httpurr`.
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
- en: Inverse matching
  id: totrans-split-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To find lines that *do not* contain the pattern, use `-v` (`--invert-match`).
    For example, find the non-empty lines without the `@` symbol:'
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-split-124
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE40]
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
- en: Count matches
  id: totrans-split-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To count the number of matched lines (per file), use `-c` (`--count`). For
    example, count the number of functions in each `.go` file:'
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-split-128
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE42]
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that `--count` counts the number of *lines*, not the number of matches.
    For example, there are 6 words `string` in `src/cli.go`, but two of them are on
    the same line, so `--count` reports 5:'
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-split-131
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE44]
  id: totrans-split-132
  prefs: []
  type: TYPE_NORMAL
- en: 'To count the number of *matches* instead, use `--count-matches`:'
  id: totrans-split-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-split-134
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE46]
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
- en: Show matches only
  id: totrans-split-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, ripgrep prints the entire line containing the match. To show only
    the matching part, use `-o` (`--only-matching`).
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to find functions named `print`-something:'
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-split-139
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE48]
  id: totrans-split-140
  prefs: []
  type: TYPE_NORMAL
- en: The results are much cleaner than without `--only-matching` (try removing the
    option in the above command and see for yourself).
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
- en: Show files only
  id: totrans-split-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If there are too many matches, you may prefer to show only the files where
    the matches occurred. Use `-l` (`--files-with-matches`) to do this:'
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-split-144
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE50]
  id: totrans-split-145
  prefs: []
  type: TYPE_NORMAL
- en: Show context
  id: totrans-split-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember when we searched for GitHub jobs?
  id: totrans-split-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-split-148
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE52]
  id: totrans-split-149
  prefs: []
  type: TYPE_NORMAL
- en: 'These results are kind of useless, because they don''t return the actual job
    name (which is on the next line after `jobs`). To fix this, let''s use `-C` (`--context`),
    which shows `N` lines around each match:'
  id: totrans-split-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-split-151
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE54]
  id: totrans-split-152
  prefs: []
  type: TYPE_NORMAL
- en: 'It might be even better to show only the *next* line after the match, since
    we are not interested in the previous one. Use `-A` (`--after-context`) for this:'
  id: totrans-split-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-split-154
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE56]
  id: totrans-split-155
  prefs: []
  type: TYPE_NORMAL
- en: Nice!
  id: totrans-split-156
  prefs: []
  type: TYPE_NORMAL
- en: Multiline search
  id: totrans-split-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I have another idea for searching GitHub jobs. Since the job name is always
    on the next line after the literal `jobs:`, let''s enable multiline searching
    with `-U` (`--multiline`):'
  id: totrans-split-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-split-159
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE58]
  id: totrans-split-160
  prefs: []
  type: TYPE_NORMAL
- en: Now we can see the job names even without using `--context`.
  id: totrans-split-161
  prefs: []
  type: TYPE_NORMAL
- en: Replacements
  id: totrans-split-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ripgrep provides a limited ability to replace matched text with some other text.
  id: totrans-split-163
  prefs: []
  type: TYPE_NORMAL
- en: '[Replace matches](#replace-matches) · [Replace entire line](#replace-entire-line)
    · [Replace groups](#replace-groups)'
  id: totrans-split-164
  prefs: []
  type: TYPE_NORMAL
- en: Replace matches
  id: totrans-split-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember our search for `codes` in the README?
  id: totrans-split-166
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE59]
  id: totrans-split-167
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s replace all `codes` with `ids` using the `-r` (`--replace`) option:'
  id: totrans-split-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-split-169
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE61]
  id: totrans-split-170
  prefs: []
  type: TYPE_NORMAL
- en: Replace entire line
  id: totrans-split-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Replace applies only to the matching portion of text. To replace an entire
    line of text, include the entire line in the match like this:'
  id: totrans-split-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-split-173
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE63]
  id: totrans-split-174
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can combine the `-o` (`--only-matching`) option with `--replace`
    to achieve the same result:'
  id: totrans-split-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-split-176
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE65]
  id: totrans-split-177
  prefs: []
  type: TYPE_NORMAL
- en: Replace groups
  id: totrans-split-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Replacements can include capturing groups. Let''s say we want to find all occurrences
    of `status` followed by another word and join them together with a dash. The pattern
    we might use is `status\s+(\w+)`:'
  id: totrans-split-179
  prefs: []
  type: TYPE_NORMAL
- en: literal string `status`,
  id: totrans-split-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: followed by any number of whitespace characters,
  id: totrans-split-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: followed by any number of "word" characters (e.g. letters).
  id: totrans-split-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We put the `\w+` in a "capturing group" (indicated by parentheses) so that
    we can reference it later in our replacement string. For example:'
  id: totrans-split-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-split-184
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" command="aha" editor="basic" template="httpurr.sh"
    output-mode="html" output="">[PRE67]
  id: totrans-split-185
  prefs: []
  type: TYPE_NORMAL
- en: Our replacement string (`status-$1`) consists of the literal `status-` followed
    by the contents of the capturing group at index `1`.
  id: totrans-split-186
  prefs: []
  type: TYPE_NORMAL
- en: Capturing groups actually start at index `0`, but the 0th capturing group always
    corresponds to the entire match. The capturing group at index `1` always corresponds
    to the first explicit capturing group found in the regex pattern.
  id: totrans-split-187
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ripgrep **will never modify your files**. The `--replace` flag only controls
    ripgrep's output. (And there is no flag to let you do a replacement in a file.)
  id: totrans-split-188
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  id: totrans-split-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ripgrep's has reasonable defaults, but you can change them with configuration
    files.
  id: totrans-split-190
  prefs: []
  type: TYPE_NORMAL
- en: ripgrep does not automatically look for a config file in a predefined directory.
    To use a config file, set the `RIPGREP_CONFIG_PATH` environment variable to its
    path.
  id: totrans-split-191
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of a configuration file:'
  id: totrans-split-192
  prefs: []
  type: TYPE_NORMAL
- en: <codapi-snippet sandbox="shell" editor="basic" template="config.sh" output="">[PRE68]
  id: totrans-split-193
  prefs: []
  type: TYPE_NORMAL
- en: When specifying a flag that has a value, either put the flag and the value on
    the same line with a `=` sign (e.g. `--max-columns=40`), or put the flag and the
    value on two different lines (e.g., `--glob`). Do not put them on the same line
    without an equal sign (e.g. not `--max-columns 40`).
  id: totrans-split-194
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s search using this config:'
  id: totrans-split-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-split-196
  prefs: []
  type: TYPE_PRE
- en: <codapi-snippet sandbox="shell" editor="basic" template="config.sh" output="">[PRE70]
  id: totrans-split-197
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-split-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ripgrep supports more features, such as explicit handling of encodings or searching
    binary data. See the [official guide](https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md)
    for details.
  id: totrans-split-199
  prefs: []
  type: TYPE_NORMAL
- en: Use `rg --help` to see all supported options (we have covered less than half
    of them in this guide).
  id: totrans-split-200
  prefs: []
  type: TYPE_NORMAL
- en: '[Andrew Gallant](https://blog.burntsushi.net) + [1 others](#contributors) ·
    [original](https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md) · CC-BY-SA-4.0
    · 2024-03-19'
  id: totrans-split-201
  prefs: []
  type: TYPE_NORMAL
- en: '[Andrew Gallant](https://blog.burntsushi.net), [Anton Zhiyanov](https://antonz.org)</codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet></codapi-snippet>'
  id: totrans-split-202
  prefs: []
  type: TYPE_NORMAL
