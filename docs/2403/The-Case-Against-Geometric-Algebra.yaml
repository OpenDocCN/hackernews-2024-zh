- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-27 14:33:36'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-27 14:33:36'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: The Case Against Geometric Algebra
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反对几何代数的理由
- en: 来源：[https://alexkritchevsky.com/2024/02/28/geometric-algebra.html](https://alexkritchevsky.com/2024/02/28/geometric-algebra.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://alexkritchevsky.com/2024/02/28/geometric-algebra.html](https://alexkritchevsky.com/2024/02/28/geometric-algebra.html)
- en: 'Normally I haunt comment sections and leave replies on discussions about Geometric
    Algebra: “Wait, wait, although GA is clearly onto something it’s not as good as
    those people say, there’s something wrong with it; what you probably want is the
    wedge product on its own!” Which is not especially productive and probably a bit
    unhinged. So, today I’m going to actually make those points in one central place
    that I can link to instead.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通常我会出现在关于几何代数的评论区，并在讨论中留下回复：“等等，尽管几何代数显然有其可取之处，但它并不像那些人说的那么好，它存在问题；你可能真正想要的是独立的楔积！”这并不特别有建设性，而且可能有点失控。因此，今天我要在一个中心位置实际上提出这些观点，以便我可以直接链接到。
- en: To be clear, I’m not opposed to GA per se. What I (and, I think, a lot of other
    people) have a problem with is that the subject is pretty clearly flawed… and
    that the culture around it does not seem to realize this or be interested in addressing
    those flaws.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 清楚地说，我本人并不反对**几何代数（GA）**本身。但我（以及我想很多其他人）对它的问题相当清楚……而且围绕它的文化似乎并没有意识到这一点，也不感兴趣去解决这些问题。
- en: 'In particular, **Hestenes’ Geometric Product is not an intuitive operation
    that we should be basing all of geometry on**. And GA’s tendency to do so and
    then say “yes, this is *the* way that geometry should be done” (with a sort of
    religious zeal) is problematic and offputting. It’s also just ineffective: treating
    certain models as if they are somehow canonical and obvious and perfect is wrong,
    mathematically and socially, and it puts people off right from the start. There
    probably is a place for the geometric/Clifford product in a grand theory of geometry,
    but it’s not “front-and-center” like GA treats it today, and as a result the theory
    is a lot less compelling than it could be.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，**赫斯滕斯的几何积**并不是我们应该建立几何学的直观操作。而几何代数倾向于这样做，并且说：“是的，这就是*应该*进行几何学的方式”（带有一种宗教狂热的方式），这是有问题且令人反感的。这也仅仅是无效的：将某些模型视为某种正统和完美的模型是错误的，无论在数学上还是在社会上，这从一开始就会使人们反感。在大理论中，几何/克利福德积可能有其存在的空间，但它并不像今天几何代数所处理的那样“前台中心”，因此这一理论比它本应更有说服力。
- en: 'If something like GA is to succeed, it will need to be improved. It will need
    to fix the problems with establishment mathematics better than it does now, in
    a way that everyone can get behind. Today it helps sometimes, but often misses
    the mark, and people who can see that are alienated by the lack of self-awareness
    about this. As a result the movement ends up accumulating a particular type of…
    zealous person… and loses almost everyone else. As a result its relationship to
    mainstream mathematics is tenuous: it is considered a kooky, crackpotty sideshow.
    And it *really* doesn’t help that a lot of GA proponents write about it in a pseudoreligious
    way, as if the reason GA is not mainstream is that they are being oppressed by
    close-minded traditionalism (when in fact they are not just very compelling at
    the moment).'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果像几何代数这样的东西要成功，它必须得到改进。它需要比现在更好地解决建立数学中的问题，以一种每个人都能支持的方式。今天它有时候有所帮助，但往往还是错失了目标，能看到这一点的人因为缺乏自我意识而感到疏远。结果，这个运动最终吸引了一种特定类型的……
    狂热者…… 而失去了几乎所有其他人。因此，它与主流数学的关系脆弱：它被视为古怪、荒谬的副产品。而且它*确实*不帮助的部分在于，很多几何代数的支持者用一种伪宗教的方式来写作，仿佛几何代数之所以不被主流接受是因为他们受到闭塞传统主义的压迫（而事实上，目前的情况并非如此令人信服）。
- en: Yet GA does find more enthusiasts every year, and it will take those new people
    a while to realize the things a lot of us have realized, and in the meantime they
    will go on selling other people on GA and repeating the cycle. As a result GA
    is, I think, stuck in a sort of perpetual mediocrity. My purpose in writing this
    is to push it to improve and address those problems.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，每年几何代数确实能吸引更多的爱好者，新人们将需要一段时间才能意识到我们许多人已经意识到的事情，在此期间，他们将继续向其他人推广几何代数并重复这一循环。因此，我认为几何代数陷入了一种永久的平庸状态。我写这篇文章的目的是推动其改进并解决这些问题。
- en: 'The rest of this article will be substantiating these points. It’s very long.
    That’s because… I don’t know, nobody else seems to be complaining about GA even
    though a lot of people have the same basic reaction to it, so I wanted to sort
    of provide all of the counterarguments in one place? And also because I got carried
    away. But I want to emphasize that, although this is my own long and opinionated
    rant, I am far from the only person who feels this way. Most of the people who
    roll their eyes at GA do so and then move on and ignore it. I have decided to
    air my grievances in hopes that it might help with something: because I really
    *do* believe in the philosophical project that GA is trying to solve, just not
    in how it’s doing it right now.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的其余部分将证实这些观点。文章非常长。因为…我不知道，虽然许多人对GA有着相同的基本反应，但似乎没有其他人对此有任何抱怨，所以我想在一个地方提供所有反驳意见？而且也因为我有些得意忘形了。但我要强调的是，尽管这是我自己的长篇偏见性演讲，但我并不是唯一一个持有这种观点的人。大多数眼中的GA是无足轻重的人会耸耸肩然后置之不理。我决定表达我的不满，希望这能有所帮助：因为我真的*确实*相信GA试图解决的哲学项目，只是不认同它当前的实施方式。
- en: '* * *'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Disclaimer: I’m not a professional mathematician, and I think about math in
    a different/probably worse way than mathematics does. This is *not* going to be
    the case that a serious mathematician would make, which is probably something
    like “GA doesn’t say anything new so who cares?”. (It seems like the goals of
    research mathematics, that is, proving things, are rather divorced from the goals
    of people who use mathematics for practical purposes.) Also, since I do more-or-less
    subscribe to the underlying program of GA, I am at least slightly on the crank
    side of the fence as well. Take me seriously at your own risk.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 免责声明：我不是职业数学家，而且我对数学的看法可能与数学界不同，也可能更糟糕。这*并不*是严肃数学家会提出的观点，他们可能会认为“GA并没有提出任何新东西，所以谁在乎呢？”（看起来，研究数学的目标，即证明事实，与那些将数学用于实际目的的人的目标相当脱离。）此外，由于我更多或少地赞同GA的基础项目，我至少在某种程度上也是站在偏执的一边。请自行决定是否认真对待我的观点。
- en: '* * *'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 1\. A lot of background on GA
  id: totrans-split-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 关于GA的许多背景信息
- en: It will be useful to understand what GA is, relative to the rest of math and
    physics, and how it got to be the way that it is, in order to establish exactly
    what it is that we’re disagreeing with here. So first I am going to lay out the
    rough narrative that I have in my head. It is mostly just stuff I’ve pieced together
    over the years, and I admit that I don’t really know how to check it against reality;
    I’d be happy to be corrected on any of this.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 理解GA相对于数学和物理的其他部分的重要性，并了解它是如何变成现在这个样子的，这将是很有用的，以便确切地确定我们在这里所持不同意见的是什么。因此，我首先会描述我脑海中的大致叙述。这主要是我多年来拼凑起来的东西，我承认我不知道如何将其与现实对比；如果有任何错误，我很乐意接受纠正。
- en: What is Geometric Algebra?
  id: totrans-split-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是几何代数？
- en: '[Geometric Algebra](https://en.wikipedia.org/wiki/Geometric_algebra) is both
    a social movement and a branch of mathematics.'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[几何代数](https://en.wikipedia.org/wiki/Geometric_algebra)既是一个社会运动，也是数学的一个分支。'
- en: As a social movement, it’s a group of people who believe that (a) mathematics
    writing and pedagogy ought to be reformulated to be more useful, especially to
    its users who are not research mathematicians, and (b) this reformulation ought
    to be done in terms of a particular set of primitives. This would mean rewriting
    multivariable calculus, linear algebra, differential geometry, etc into a new
    language which is (somewhat) an alternative to vector and matrix algebra. The
    argument for doing this is that it would make a lot of math simpler, easier to
    understand, and easier to use for practical purposes.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个社会运动，GA是一群人认为（a）数学写作和教学法应重构以更加有用，尤其是对那些不是研究数学家的用户，以及（b）这种重构应该使用特定的原始语言。这意味着需要重写多变量微积分、线性代数、微分几何等，转变成一种新的语言，这种语言在某种程度上是向量和矩阵代数的一种替代。提出这样做的论点是，这将使得数学更简单、更易于理解，并且更易于实际应用。
- en: As a branch of mathematics, it is a recasting of a subject called [Clifford
    Algebra](https://en.wikipedia.org/wiki/Clifford_algebra) (CA), which is a somewhat-obscure
    descendent of the subject of [Exterior Algebra](https://en.wikipedia.org/wiki/Exterior_algebra)
    (EA), which is sort of like chapter two of linear algebra if undergraduate linear
    algebra is chapter one. EA is basically well-known to mathematicians and physicists
    but not commonly taught at the undergraduate level; my impression is that it is
    gradually becoming ubiquitous at the graduate level. Clifford Algebra is sort
    of like a more advanced version of EA; it is much less widely known but it is
    well-established in certain subfields of math and physics. Geometric Algebra attempts
    to take the ideas of Clifford Algebra and Exterior Algebra and spread them much
    more broadly, rephrasing other aspects of math in terms of those new concepts
    and operations. Exactly which ideas and operations those are depends on the author,
    but everyone pretty much agrees that operations from CA and EA are useful and
    ought to be more widely used.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数学的一个分支，它是对称为[克利福德代数](https://en.wikipedia.org/wiki/Clifford_algebra)（CA）的一个转换，它是[外代数](https://en.wikipedia.org/wiki/Exterior_algebra)（EA）的一个有点模糊的后代，它有点像本科线性代数的第二章。EA在数学家和物理学家中基本上是众所周知的，但在本科水平上不常教授；我的印象是它逐渐在研究生水平变得无处不在。克利福德代数有点像EA的一个更高级的版本；它远不如EA广为人知，但在某些数学和物理学的子领域中已经很成熟。几何代数试图广泛采用克利福德代数和外代数的思想，重新表述数学的其他方面，用这些新的概念和操作来进行。这些概念和操作究竟是什么依赖于作者，但几乎所有人都认为CA和EA中的操作是有用的，并且应该更广泛地使用。
- en: 'Here is how the various algebras relate to each other:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是各种代数学的关系：
- en: Exterior Algebra is based on the the ideas of the “exterior” (or “wedge”) product
    \(\b{a} \^ \b{b}\), the notion of multivectors in a vector space, and some other
    natural operations that those imply (the Hodge star \(\star\) and an interior
    product, which generalizes the dot product to multivectors.) It comes up naturally
    in abstract algebra (the exterior algebra is a basic quotient of the tensor algebra
    which is a basic construction on vector spaces), and in various fields downstream
    of abstract algebra, such as algebraic topology. It also seems to exist in combinatorics
    literature with a somewhat different set of notations. More generally, EA provides
    the only actually good way of looking at vector algebra concepts like determinants,
    matrix minors, and cross products, by modeling them as multivectors in an explicit
    vector space \(\^^k \bb{R}^n\); this perspective seems to be gradually infiltrating
    the literature that touches those subjects, but it mostly has not made its way
    into the undergraduate curriculum yet.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 外代数（Exterior Algebra）基于“外积”（或“楔积”）\(\b{a} \^ \b{b}\)的概念，向量空间中的多向量的概念，以及一些其他自然操作（霍奇星号
    \(\star\) 和内积，它将点积推广到多向量上）。它在抽象代数中自然出现（外代数是张量代数的一个基本商代数，后者是向量空间上的基本构造），以及抽象代数的各种下游领域，如代数拓扑。它还似乎存在于组合数学文献中，并带有一套稍微不同的符号。更广义地说，外代数为查看向量代数概念如行列式、矩阵子式和叉积提供了唯一的真正良好方式，通过将它们建模为显式向量空间中的多向量
    \(\^^k \bb{R}^n\)；这种视角似乎正在逐渐渗透触及这些主题的文献中，但它大多数情况下还没有进入本科课程。
- en: Clifford Algebra is, roughly, an extension of EA which allows it to generalize
    the complex and quaternion number systems. They are formally constructed as a
    quotient of a tensor algebra, but the procedure is very intuitive. To multiply
    two multivectors like \((\b{xxy})(\b{xy})\), you are allowed to exchange elements
    using \(\b{xy} = -\b{yx}\) and to cancel out elements using a bilinear form \(Q\),
    such that \(\b{xx} = Q(\b{x}, \b{x})\). \(Q(\b{x}, \b{x})\) is almost always defined
    to be \(1\), \(0\), or \(-1\). The resulting algebra is labeled \(Cl_{p,q}\) or
    \(Cl_{p,q,r}\) where \(p\) is the number of elements that square to \(1\), \(q\)
    the number that square to \(-1\), and \(r\) the number that square to \(0\). As
    a result you get an associative algebra where most elements are invertible (so
    you can talk about the multiplicative inverse of a vector \(\b{a}^{-1}\)). This
    allowing you to take a bunch of objects, expressed as sums of multivectors, and
    basically do polynomial algebra on them.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: Clifford代数大致上是EA的扩展，它允许泛化复数和四元数数系统。它们形式上是张量代数的商，但过程非常直观。例如，要将两个多向量相乘，如\((\b{xxy})(\b{xy})\)，可以使用\(\b{xy}
    = -\b{yx}\)交换元素，并使用双线性形式\(Q\)取消元素，使得\(\b{xx} = Q(\b{x}, \b{x})\)。\(Q(\b{x}, \b{x})\)几乎总是定义为\(1\)、\(0\)或\(-1\)。结果的代数被标记为\(Cl_{p,q}\)或\(Cl_{p,q,r}\)，其中\(p\)是平方为\(1\)的元素数目，\(q\)是平方为\(-1\)的元素数目，\(r\)是平方为\(0\)的元素数目。因此，你得到了一个可逆元素大多数的可结合代数（因此可以讨论向量的乘法逆\(\b{a}^{-1}\)）。这使你可以对一堆对象，表示为多向量的和，基本上进行多项式代数运算。
- en: Physicists probably know EA specifically from its ubiquitous use in General
    Relativity, where it shows up as the “exterior calculus of differential forms”,
    which are used to express differential geometry in a coordinate-free way. (For
    some reason, for the later half of the 20th century, physics mostly treated EA
    as *just* a thing you do with differential forms, instead of a general theory
    of vector algebra.) Physicists also have usually used Clifford Algebras, because
    they’re the algebra of the Pauli and Gamma matrices from quantum mechanics, although
    at least at the undergraduate level it’s rare that physics actually refers to
    them by name (my quantum course did not even mention that the Pauli matrices were
    quaternions). Clifford Algebras are also apparently heavily connected with the
    theoretical frameworks that underly spinors and more generally representation
    theory in a way that I don’t quite understand yet.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 物理学家可能具体从其在广义相对论中的普遍应用中了解EA，它以“外微分形式的外代数”出现，用于以无坐标的方式表达微分几何。在20世纪后半叶的某个时候，物理学家通常将EA视为*仅仅*是与微分形式一起使用的东西，而不是向量代数的一般理论。物理学家通常也使用Clifford代数，因为它们是量子力学中的Pauli和Gamma矩阵的代数，尽管至少在本科水平上，物理学很少通过名称提及它们（我的量子课程甚至没有提到Pauli矩阵是四元数）。Clifford代数显然还与支持旋量及更普遍的表示论框架密切相关，这一点我还不太理解。
- en: Point is, GA does not have any claim to the wedge product or even the Clifford/geometric
    product per se. GA’s main difference is that it attempts to go back to lower-level
    math—vector algebra, calculus, basic physics like mechanics and electromagnetism—and
    rephrase them in terms of the Clifford/Geometric product, plus the other concepts
    of EA. In practice GA refers mostly to **the particular platform and social movement
    which descends from the work of David Hestenes in the 1960s**. Specifically, it
    does *not* refer to the underlying material of Clifford Algebras, but rather how
    they are used, conceptualized, and taught. Sometimes GA people will defend GA
    by saying “it’s just Clifford Algebra which is really important in math, how can
    you have a problem with it?”, and that misses the point. GA is not the material
    itself; it’s the material plus the ideology and framework that is draped over
    the material.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是，GA并不对楔积或者克利福德/几何乘法本身提出任何主张。GA的主要区别在于，它试图回归到更低层次的数学——向量代数、微积分、基本物理学如力学和电磁学——并用Clifford/几何乘积及EA的其他概念来重新表达它们。实际上，GA主要指的是**起源于David
    Hestenes在1960年代的特定平台和社会运动**。特别地，它*不*指Clifford代数的基础材料，而是它们如何被使用、概念化和教授。有时，GA的人会为GA辩护说“它只是数学中真正重要的Clifford代数，你怎么可能对它有意见？”，但这忽略了关键。GA不仅仅是材料本身；它是材料加上覆盖材料的意识形态和框架。
- en: Probably both GA and EA could be considered as members of the larger subject
    of “multilinear algebra” which would include tensor analysis and all of linear
    algebra as well. There’s an argument to be made that they are really just “the
    rest of linear algebra”, the big part of it that isn’t included in introductory
    texts and hasn’t entered the mainstream yet. Perhaps in 100 years they will be
    fully folded into the standard curriculum.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 或许GA和EA都可以被看作是更大主题“多线性代数”的成员，该主题包括张量分析和所有的线性代数。可以说它们实际上就是“线性代数的其余部分”，这部分内容没有包含在初级教材中，并且尚未进入主流。也许100年后它们将完全纳入标准课程。
- en: '* * *'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: An Approximate History of GA
  id: totrans-split-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GA的近似历史
- en: GA is mostly less well-known in mathematics and physics than EA. Yet has a strangely
    large number of people advocated for it, particularly online in communities, articles,
    videos, and conference talks. Why? Well, here’s a basic history that sort-of explains
    why it was unknown in the first place, and why it is increasingly not.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: GA在数学和物理学中比EA知名度低得多。然而，奇怪的是，有很多人在网上社区、文章、视频和会议中力挺它。为什么呢？嗯，以下是一个基本的历史，可以解释为什么它起初不为人知，以及为什么它越来越为人所知。
- en: 'GA was more-or-less invented in the late 1950s by [David Hestenes](https://en.wikipedia.org/wiki/David_Hestenes),
    who made it his project to popularize it for the next fifty years. The underlying
    ideas date back to Clifford around 1878, who himself was extending Grassmann’s
    “Extensive Algebra” from the 1840s. (I’m told that Clifford coined the term “geometric
    product” for the operation.) The story is that 1959 Hestenes, unsure what original
    research to do in graduate school, randomly came across some published lecture
    notes of Marcel Riesz in the UCLA library on the subject of Clifford Algebras,
    immediately realized the similarity to the gamma matries of quantum mechanics,
    and decided that this was the right way to reformulate all of vector algebra.
    ^(Half of his thesis became about the subject,and most of the content was later
    published in a 1066 book called “Space-Time Algebra” which gradually popularized
    his ideas quite a bit. Hestenes’ plan was to transform Clifford Algebra, otherwise
    a fairly niche part of mathematics, into the main language in which all of physics
    was expressed: that everything should be reformulated in terms of multivectors,
    wedge products, and especially the geometric product. IMO that switch is what
    changes the subject of “Clifford Algebra” into the subject of “Geometric Algebra”.)'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: GA大约在20世纪50年代末被[David Hestenes](https://en.wikipedia.org/wiki/David_Hestenes)发明，他把它作为自己的项目，并在接下来的五十年里致力于普及它。其基本思想可以追溯到克利福德（约1878年），他本人是在扩展格拉斯曼在1840年代的“广义代数”。（据说克利福德为这一运算术语“几何积”命名。）据说1959年，Hestenes在研究生院不确定要进行哪些原创研究时，偶然在加州大学洛杉矶分校图书馆发现了Marcel
    Riesz关于Clifford代数的出版讲义，立刻意识到其与量子力学中的Gamma矩阵的相似性，并决定这是重塑所有向量代数的正确方式。^(他的论文的一半是关于这个主题的，大部分内容后来发表在一本名为《时空代数》的1066年书籍中，逐渐普及了他的思想。Hestenes的计划是将Clifford代数，本来是数学中一个相对小众的部分，转变为表达所有物理学内容的主要语言：所有东西都应该重新用多向量、楔积，尤其是几何积来表述。我认为，这种转变将“Clifford代数”主题转变为“几何代数”主题。)
- en: Hestenes slowly popularized his ideas and published more papers on the stuff
    for a few decades, ^(but it sounds like things really started to pick up with
    a conference at the University of Kent which was started by Roy Chisholm in 1985,
    as well as with the various works of Pertti Lounesto. ^(Momentum picked up when
    a group out of Cambridge ([website](http://geometry.mrao.cam.ac.uk/)) got interested
    around 1988, in particular Anthony Lasenby, Joan Lasenby, Steve Gull, and Chris
    Doran. The Cambridge group began putting out papers in the 90s with names like
    “Imaginary Numbers are not Real” and “A unified mathematical language for physics
    and engineering in the 21st century” which appealed a lot to people who had, for
    instance, lingering reservations about the use of complex numbers in physics,
    or about the philosphical interpretations of Pauli matrices and spinors.))
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: Hestenes慢慢推广他的想法并在几十年里发表了更多关于这些内容的论文，^(但听起来事情真正开始加速是在肯特大学的一个会议上，这个会议是由Roy Chisholm在1985年发起的，以及由Pertti
    Lounesto的各种作品。^(在剑桥的一个小组（[网站](http://geometry.mrao.cam.ac.uk/)）在1988年左右对此产生了兴趣，特别是Anthony
    Lasenby、Joan Lasenby、Steve Gull和Chris Doran。剑桥小组在90年代开始发表论文，例如“虚数不是真实的”和“21世纪物理和工程的统一数学语言”，这些吸引了对物理中复数使用或关于Pauli矩阵和旋量的哲学解释仍有疑虑的人。))
- en: Over the years Hestenes and especially the Cambridge group seem to have published
    papers which reformulate every part of physics in terms of GA. They were refreshing
    when compared to mainstream physics, which seemed dogmatic and bizarrely willing
    to accept things that should have still been up for debate. (Of course, that is
    how fringe ideas always view mainstream ideas.) So the appeal, and the reason
    that keeps catching more people’s interest, is that it is at least trying to solve
    things that are legitimately bothersome (to a certain type of person).
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Hestenes和剑桥小组特别是发表了以GA重新表述物理各部分的论文。与主流物理相比，它们是令人耳目一新的，后者看起来教条而古怪，竟然愿意接受本应仍需辩论的事物。（当然，这正是边缘理念总是看待主流理念的方式。）所以吸引人的地方，以及吸引越来越多人兴趣的原因，至少试图解决对某种类型的人来说确实令人困扰的问题。
- en: By the time I was learning about differential forms in college around ~2010,
    knowledge of GA was ambiently floating around online and I came across it at some
    point, and a bunch of fairly accessible books had been published (I’m thinking
    of Doran/Lasenby’s *Geometric Algebra for Physicists* in 2003, Fontijne/Mann/Dorst’s
    *Geometric Algebra for Computer Science* in 2007, and Macdonald’s *Linear and
    Geometric Algebra* in 2010). The ideas of GA tended to show up if you went googling
    for intuitive explanations about forms, spinors, quaternions, or gamma matrices.
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在大约2010年左右的大学时学习微分形式时，关于GA的知识在网络上随处可见，我在某个时候接触到它，并且已经出版了一堆相当易懂的书籍（我想到2003年Doran/Lasenby的*物理学家的几何代数*，2007年Fontijne/Mann/Dorst的*计算机科学的几何代数*，以及2010年Macdonald的*线性和几何代数*）。如果你去搜索关于形式、旋量、四元数或Gamma矩阵的直观解释，GA的思想往往会出现。
- en: There is a type of person (of which I am one) who will never be happy with the
    way that complex numbers are used in quantum mechanics, ^(while everybody else
    goes on not worrying about it because the theories do, at least, get the right
    answers. Such people also tend to be displeased with the arbitrariness of the
    Pauli and Gamma matrices, and all of the index-juggling manipulations of general
    relativity, and the use of commutators in quantum mechanics and analytic mechanics,
    and other such “non-geometrical” operations. Most frustrating, though, is the
    fact that most of the physics literature seems to not regard these things as problems,
    and that you are just supposed to learn and use them and so you don’t find a lot
    of sympathy when you want to make sense of them. (Pauli matrices, at least, could
    be recast in terms of the quaternions \(\bb{H}\), but that doesn’t help, given
    that quaternions are just a higher-dimensional version of \(\bb{C}\).))
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种人（我就是其中之一），对量子力学中复数的使用方式永远不会感到满意，^(其他人则继续不用担心，因为理论至少得出了正确的答案。这些人还倾向于对Pauli和Gamma矩阵的任意性不满，以及广义相对论中的所有指标操控操作，以及量子力学和解析力学中的交换子的使用，以及其他类似的“非几何”操作。然而最令人沮丧的是，大部分物理文献似乎并不认为这些是问题，而且你只需学习和使用它们，当你想弄清楚它们时，你很难得到同情。至少Pauli矩阵可以通过四元数\(\bb{H}\)重新表述，但这并没有帮助，因为四元数只是复数\(\bb{C}\)的高维版本。))
- en: Unfortunately, while the GA folks were clearly onto *something*, the response
    has not been all that enthusiastic and the uptake is slow. Why? Well, I think
    it’s because in practice their reformulations are not all that useful for actually
    doing or understanding physics. (My opinion, but seriously, go read them.) It
    turns out that writing everything in terms of the geometric product does not make
    it easier to understand. The valuable parts, I think, were the parts that were
    using the *wedge product* more liberally than physics had before; the usage of
    the geometric/Clifford product was always quite a bit more suspect (but that’s
    the point I’m going to make in detail later). As a result a lot of physicists
    are probably aware of geometric algebra but not a lot of people are publishing
    papers in that language, and very few people are teaching, like, undergraduate
    classes about it.
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，虽然 GA 的人显然触及了一些 *东西*，但反响并不是那么热烈，接受度很低。为什么呢？嗯，我认为实际上，他们的改进并没有真正对实际做物理或理解物理有多大帮助。（这是我的观点，但是，真的，请去读一读。）事实证明，用几何积写所有东西并不会让理解变得更容易。我认为有价值的部分是比物理之前更自由地使用了
    *楔积* 的部分；而使用几何/克利福德积总是比较可疑的（但这是我稍后要详细阐述的观点）。结果很多物理学家可能知道几何代数，但没有多少人在那种语言上发表论文，也很少有人像教授本科课程一样教授它。
- en: '* * *'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Okay, that’s the physics angle. But there is another part of the story in more
    applied fields: computer graphics and robotics.'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，这是物理学的角度。但在更应用的领域中，例如计算机图形学和机器人技术，还有另一个故事。
- en: Around the same time time period (1990s-2010s), a lot of new people were writing
    code that had to handle rigid motion in space, and invariably they tended to encounter
    quaternions as well. By the 90s it had been understood for a long time that quaternions
    were the better way of modeling rotations in 3d space, compared to e.g. Euler
    Angles, because they treated every axis of rotation equally and allow for smooth
    interpolation between any two points (and also they avoid “gimbal lock”, as nobody
    ever neglects to mention). In hindsight, it turns out that when you want to model
    an unfamiliar noncommutative algebra like \(SO(3)\), it is very important to use
    an actual algebraic model of it instead of a poor approximation. But quaternions
    are a pedagogical nightmare (go look how many Youtube videos there are explaining
    them!) So when the GA people came along and started talking about bivectors and
    rotations in a way that actually made some sense, a lot of people were interested.
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在同一个时间段（1990年代至2010年代），许多新人开始编写代码，必须处理空间中的刚体运动，而无论如何，他们往往会遇到四元数。到了90年代，人们早就明白，与例如欧拉角相比，四元数是在3D空间中建模旋转的更好方法，因为它们平等地对待每个旋转轴，并允许在任意两点之间进行平滑插值（而且它们也避免了“万向锁”，没有人会忽略提到这一点）。事后看来，当你想要模拟一个陌生的非交换代数，比如
    \(SO(3)\) 时，使用实际的代数模型而不是一个糟糕的近似是非常重要的。但四元数是一个教学上的噩梦（去看看有多少YouTube视频解释它们！）所以当 GA
    的人出现并开始以某种实际有意义的方式谈论双向量和旋转时，很多人都感兴趣。
- en: 'And there are many more difficult computations in these fields which are more
    complex than simple rotations. Rigid motions of objects, for instance, involve
    moving a lot of lines, planes, tangent vectors, etc in space, plus interpolating
    between their positions smoothly, plus doing all kinds of intersection tests,
    sidedness tests, for e.g. culling objects which are occluded or offscreen, plus
    all of this has to be projectively transformed according to the position of a
    camera or sensor. Quite a bit of literature on GA has come out of translating
    these operations into GA terms, and there are a number of vocal proponents of
    doing it this way: a good chunk of the GA literature you come across is in graphis
    or robotics papers and conference proceedings.'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些领域中，有许多更复杂的计算比简单的旋转要复杂得多。例如，对象的刚体运动涉及在空间中移动许多直线、平面、切向量等，还要平滑地插值它们的位置，以及进行各种交点测试、边缘测试，例如遮挡或屏幕外对象的剔除，而所有这些都必须根据摄像机或传感器的位置进行投影变换。许多关于
    GA 的文献出现在将这些操作翻译成 GA 术语中，并且有许多积极的支持者主张用这种方式做：你会在图形学或机器人学的论文和会议记录中看到很大一部分 GA 文献。
- en: These applications tend to focus on particular choices of Clifford algebras
    which are suited to different types of geometric problems. It was already widely
    understood that projective geometry allowed one to represent rotations and translations
    in \(\bb{R}^3\) with a single linear operator on \(\bb{R}^4\). Geometric algebra
    extends this by starting from \(\bb{R}^3\) and adding some number of additional
    basis vectors that allow modeling various kinds of objects with Clifford-Algebraic
    operations. These theories attempts to replace the existing quaternion-like formulations
    of rigid geometric, such as [screw theory](https://en.wikipedia.org/wiki/Screw_theory)
    or [dual quaternions](https://en.wikipedia.org/wiki/Dual_quaternion).
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用程序往往专注于特定选择的 Clifford 代数，适用于不同类型的几何问题。已经广泛认识到，射影几何允许用 \(\bb{R}^4\) 上的单个线性算子表示
    \(\bb{R}^3\) 中的旋转和平移。几何代数通过从 \(\bb{R}^3\) 开始添加一些额外的基向量来扩展这一点，这些基向量允许使用 Clifford
    代数操作对各种对象进行建模。这些理论试图取代现有的刚体几何的四元数式表达，如 [螺旋理论](https://en.wikipedia.org/wiki/Screw_theory)
    或 [双四元数](https://en.wikipedia.org/wiki/Dual_quaternion)。
- en: 'I believe the first of these was Projective Geometric Algebra (PGA) from a
    paper by Jonathan Selig in 1999 (in a robotics journal). (I’m not sure which ideas
    are attributable to him, though: he cites Ian Porteous’s 1969 book *Topological
    Geometry* which has a bunch of Clifford-Algebra-based geometric algorithms, although
    in general it’s written in the much more technical “Clifford Algebra” style instead
    of the “Geometric Algebra” style; also it mention that Clifford himself studied
    biquaternions to implement rigid body motions.) Selig’s PGA uses \(Cl_{0,3,1}\),
    but it seems like later authors use \(Cl_{3,0,1}\) instead. “Conformal Projective
    Geometric” follows shortly after and uses \(Cl_{4,1,0}\) to model the objects
    but now also includes circles and rotations as multivectorial objects with the
    help of an additional basis vector. I don’t know a lot about these, except that
    the texts on them are strangely difficult to read because they use very unorthodox
    representations for basic objects like planes and points: for instance in CGA
    a point \(\b{x}\) is modeled as \(\b{x} + \frac{1}{2} \b{x}^2 (e_{-} + e_{+})\)?
    Seems weird to me but some people seem get very excited about it.'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这些中第一个是乔纳森·塞利格在1999年的一篇文章中提出的射影几何代数（PGA）（在一个机器人学期刊中）。 （尽管我不确定哪些想法可以归功于他：他引用了伊恩·波特里斯1969年的书
    *拓扑几何*，其中包含一些基于 Clifford 代数的几何算法，尽管一般来说它是以更技术性的“Clifford 代数”风格而不是“几何代数”风格写成的；此外，它提到
    Clifford 本人研究了双四元数来实现刚体运动。） 塞利格的 PGA 使用 \(Cl_{0,3,1}\)，但似乎后来的作者改用 \(Cl_{3,0,1}\)。
    “共形射影几何”随后出现，并使用 \(Cl_{4,1,0}\) 来建模对象，但现在还包括圆和旋转作为多矢量对象，借助额外的基向量。 我对这些了解不多，只知道它们的文本阅读起来异常困难，因为它们使用非正统的表示来描述基本对象如平面和点：例如在
    CGA 中，一个点 \(\b{x}\) 被建模为 \(\b{x} + \frac{1}{2} \b{x}^2 (e_{-} + e_{+})\)？ 这对我来说很奇怪，但有些人似乎对此非常兴奋。
- en: '* * *'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'As for pure math—it seems like research mathematics readily talks about and
    uses “Clifford Algebra”, but is uninterested in or specificaly avoids the terms
    and concepts that are specific to Hestenes’ “Geometric Algebra”. I can speculate
    as to why: even by the 90s/00s, GA had gotten a bad reputation because of its
    tendency to attract bad mathematicians and full-on crackpots (Hestenes honestly
    sounds like one a lot of the time, and I’m not really sure whether he is or isn’t).
    It makes sense, really. There are a lot of people who found it appealing for the
    reason I did: because the existing models of vector algebra and quaternion rotation
    were deeply unsatisfying. But it turns out that those reasons *disproportionately*
    attract people who are not actually capable of rigorous mathematics, or are slightly
    prone to conspiratorial thinking, or are otherwise slightly deranged (also like
    me? TBD).'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 至于纯数学，看起来研究数学很容易谈论和使用“Clifford 代数”，但对 Hestenes 的“几何代数”特定术语和概念不感兴趣或特别避免。 我可以推测原因：即使在90年代/00年代，由于它倾向于吸引糟糕的数学家和彻底的疯子（Hestenes
    在很多时候听起来确实像是一个），GA 因其吸引力而声名狼藉。 但事实证明，这些理由*不成比例地*吸引了那些实际上并不擅长严格数学，或者略微倾向于阴谋论思维，或者其他方面略微疯狂的人（也像我一样？
    待定）
- en: 'I guess there are more people who can tell when math is weird or unsatisfying
    or bad… than can do good math themselves. So GA ended up appealing to a lot of
    fringes: people who only had undergraduate degrees, people who had dropped out
    of PhDs, people with PhDs from unrigorous programs, people who had been good at
    math but were perhaps going a bit senile, random passerbies from engineering or
    computer programming, run-of-the-mill circle-squarers, people who had a bone to
    pick with establishment mathematics and felt like all dissenting views were being
    unfairly suppressed… And these were the people who started publishing a lot of
    stuff about GA, often dressed up to look like more serious research than it was.
    Indeed, if you look around for papers that explicitly talk GA, they *very* disproportionately
    (a) are non-theoretical, (b) are poorly-written, (c) are trivial, i.e. restating
    widely-known results as if they’re novel, (d) only cite other GA papers, and of
    course (e) are just plain crackpotty.'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我猜，比起能够进行良好数学研究的人，更多的人能够感觉到数学的怪异或不令人满意或糟糕… 因此，GA最终吸引了许多边缘人群：只有学士学位的人，中途退学的博士生，来自非严谨博士项目的博士，曾经擅长数学但可能有些老朽的人，工程或计算机编程的偶然路人，那些平凡的圆与方形划分者，对建立数学体系有意见并感觉所有异议都被不公平地压制的人…
    这些人开始大量发表关于GA的论文，通常打扮得看起来比它们更严肃。
- en: It didn’t help that a lot of the texts by the *actually*-competent GA people,
    like the Cambridge group, tended to say things that sounded and still sound kind
    of crackpotty as well. LIke they would constantly say things like “this new theory
    is going to fix everything”, which is exactly what the crackpots also say, and
    for the same reasons (the validity of a statement like that is completely conditional
    on a person’s ability to actually distinguish truth from fiction). Or they were
    just filled with unnecessary ostentatiousness, such as (quoting here) “we have
    now reached the part which is liable to cause the greatest intellectual shock”.
    Or acting like results in GA are new and novel when they’re clearly just using
    wedge products the same way that physicists had regularly done for decades. Or
    acting aggrieved that the rest of mathematics is ignoring them. Or, worst of all,
    claiming that all the new GA equations are simpler than the old ones, while referring
    to equations which were *clearly not simpler than the old ones*.
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 并没有帮助的是，*真正*有能力的GA人写的许多文本，比如剑桥团队，也倾向于说出听起来仍然有些疯狂的事情。比如他们经常说“这个新理论将修复一切”，这正是疯狂份子们也说的，出于同样的原因（这种声明的有效性完全取决于一个人是否能够真正区分真实和虚构）。或者他们充满不必要的华丽辞藻，比如（引述）“我们现在已经到了可能引起最大知识冲击的部分”。或者表现得像GA中的结果是新的和新颖的，而实际上他们只是像物理学家几十年来经常做的那样使用楔积。或者对其他数学领域忽视他们感到委屈。或者，最糟糕的是，声称所有新的GA方程比旧方程简单，同时提到的方程显然不比旧方程简单。
- en: So I suspect that what has happened is that competent mathematicians have tended
    to distance themselves from the term Geometric Algebra due to its dubious reputation
    (a sort of adverse selection). Which of course leaves GA with an even higher ratio
    of cranks, because most of the non-cranks left. In fact I suspect that mathematicians
    sometimes publish papers about “Clifford Algebra” when they want to talk about
    the *exact same material*, not even the super-theoretical version, but without
    the negative associations. And some of the serious GA-adjacent research on ArXiv
    is just under the name Clifford Algebra instead.
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我怀疑发生的情况是，有能力的数学家由于其可疑声誉而倾向于远离“几何代数”这个术语（一种逆向选择）。当然，这使得GA中的疯子比例更高，因为大多数非疯子离开了。事实上，我怀疑数学家有时在想讨论*完全相同的材料*，甚至不是超理论版本时，会发表有关“Clifford代数”的论文，但没有负面联想。而一些严肃的GA相关研究在ArXiv上仅以Clifford代数的名称出现。
- en: To be clear, I don’t think it has been wrong to disassociate from the name “Geometric
    Algebra”. GA’s dubious reputation among mathematicians is *well-deserved*. I’m
    doing it too—that’s why all of my posts on related subjects are about exterior
    algebra instead (well, that and I am not trying to talk about the Clifford/geometric
    product).
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 明确地说，我认为与“几何代数”这个名字脱钩并没有错。数学家对GA的质疑声誉是完全应得的。我也在这样做——这就是为什么我所有相关主题的帖子都是关于外代数（好吧，还有我不想谈论克利福德/几何乘积的原因）。
- en: But that doesn’t mean GA isn’t *also* onto something. It just means that there’s
    a lot of low-quality stuff under the same label, which has made that label questionable,
    and if you want to sift through it you have to be ready to filter for quality
    yourself.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不意味着GA不也触及到了某些问题。这只是意味着相同标签下存在许多低质量的内容，这使得该标签受到质疑，如果你想要筛选优质内容，你必须准备好自行进行质量过滤。
- en: Also, as a result of its popular appeal and fringe status, there are a lot of
    online discussions dedicated to GA. Actually a shocking number, if you go look
    for them. off the top of my head there’s a website called [Bivector.net](https://bivector.net/)
    which has forums and a Discord that (as of this moment) has 200+ people online,
    which I guess feels like a lot for a *community about a fringe mathematical theory*.
    Plus a few other forums. Plus people show up talking about GA in the comment sections
    on every other math-related forum if anyone asks any questions about quaternions
    or bivectors. Plus there are the countless Youtube videos, conference talks, expository
    PDFs, standalone websites, etc. And then there are whole offshoots of GA, like
    Conformal Geometric Algebra and Plane-Based Geometric Algebra, that have their
    own enthusiasts and sometimes their own websites as well. Etc.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，由于它的受欢迎程度和边缘地位，有很多专门讨论GA的在线讨论。实际上，如果你去找的话，会发现惊人的数量。我脑海中第一个想到的是一个名为[Bivector.net](https://bivector.net/)的网站，它有论坛和一个Discord（截至目前）有200多人在线，我猜这在一个*边缘数学理论社区*中感觉是很多了。还有其他一些论坛。如果有人在其他数学相关的论坛上问关于四元数或双向量的问题，会有人谈论GA。此外还有无数的YouTube视频、会议演讲、解说PDF、独立网站等等。然后还有GA的整个分支，如共形几何代数和基于平面的几何代数，它们有自己的爱好者，有时也有自己的网站。等等。
- en: This is not really a bad thing either. If anything what it shows is *how many*
    people are passionate to see math reformulated in a way that makes more sense—so
    many that they’ll convene and talk about it on every one of the bizarrely-inadequate
    social networks we have in 2024\. And that’s part of what is motivating me to
    write this article (which is getting very long now…). GA has got something of
    the right idea and people recognize that and latch onto it. I happen to think
    that it is almost certainly right that modern mathematics needs a more intuitive
    foundation. Research math knows a *lot* about geometry, but although most of the
    knowledge required to do all the things people actually want to do with geometry
    is out there *somewhere*, it’s not accessible or intuitive and the details are
    only really available to specialists. ^(At some level GA is trying to “democratize”
    geometry.)
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是一件坏事。如果说有什么，它显示出有多少人热切希望看到数学以更合理的方式重新表达——以至于他们会聚集在我们2024年那些奇怪不足的社交网络上讨论这些问题。这也是激励我撰写这篇文章（现在文章已经变得很长……）的一部分原因。GA确实有一些正确的想法，人们认识到这一点并对其产生了兴趣。我认为现代数学需要更直观的基础几乎是肯定的。研究数学对几何学了解很多，但是尽管人们实际想要做的所有事情所需的知识在某处都有，但它并不直观，并且详细信息只对专家真正可用。^(在某种程度上，GA试图“民主化”几何学。)
- en: 'So basically I *do* agree with them: GA is onto something, which is that geometry
    deserves more intuitive foundations, and multivectors and the like are probably
    a big part of it. The problem is that… GA isn’t quite it.'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所以基本上我*同意*他们的观点：GA触及到了一些问题，即几何学应该有更直观的基础，而多向量之类的东西可能是其中的重要部分。问题在于…… GA还不太符合。
- en: '* * *'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 2\. The Actual Case Against GA
  id: totrans-split-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. GA的真正案例
- en: 'As I wrote above: *Exterior Algebra* is clearly valuable and widely used already
    in graduate-level math and physics. *Clifford Algebra* is clearly widely used
    in theoretical mathematics and anything that has to do with spinors. So *Geometric
    Algebra* ought to be evaluated on what it adds on top of those.'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前所写：*外代数*在研究生级别的数学和物理中已经被广泛认可和使用。*克利福德代数*在理论数学和涉及旋量的领域中也被广泛使用。因此，*几何代数*应该根据它在这些领域的附加贡献进行评估。
- en: So what does GA specifically say?
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 那么GA具体说了些什么呢？
- en: 'As I see it, GA is not so much a subject as an ideological position, consisting
    of basically two ideological claims about the world:'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，广义代数不仅仅是一个学科，而是一种意识形态立场，基本上包括关于世界的两个意识形态主张：
- en: '**Claim 1**: That the concepts of EA (so, wedge products, multivectors, duality,
    contraction) are incredibly powerful and ought to be used everywhere, starting
    at a much lower level of math pedagogy—basically rewriting classical linear algebra
    and vector calculus.'
  id: totrans-split-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**主张 1**：EA的概念（因此，楔积、多向量、对偶、收缩）非常强大，应该在任何地方使用，从更低的数学教育水平开始——基本上重写经典线性代数和向量微积分。'
- en: '**Claim 2**: That the Geometric Product (henceforth: GP) should be added to
    that list as the most “fundamental” operation, where by “fundamental” I mean that
    they would have all of the other operations constructed in terms of it and generally
    state theorems in terms of it.'
  id: totrans-split-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**主张 2**：几何乘积（以下简称：GP）应该添加到这个列表中作为最“基本”的操作，我指的是，他们会用它构建所有其他操作，并且通常以它来陈述定理。'
- en: Claim (1), I believe, is completely correct, and is responsible for much of
    the reason GA *has* gotten so popular. Exterior algebra and the general idea of
    doing geometry with multivectors is incredibly powerful and intuitive and it ought
    to be widely used and taught to everybody, and we should all be reading and writing
    new textbooks that incorporate it. It’s so obviously true that I’m not even going
    to talk about it after this paragraph. *Of course* \(n\)-vectors make more sense
    than determinants. *Of course* differential forms make more sense than nested
    integrals and mysterious Jacobians. *Of course* wedge products make more sense
    than cross products. *Of course* bivectors make more sense than \(\bb{C}\). *Of
    course* we should use multivectors instead of “pseudovectors” and “pseudoscalars”.
    Why are we even talking about it? Just go rewrite all the books, the theory is
    (mostly) there.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 主张（1），我相信，是完全正确的，也是遗传算法变得如此流行的主要原因之一。外代数和用多向量进行几何学的一般思想非常强大且直观，理应广泛使用并教给每个人，我们都应该阅读和撰写新的教科书来加以融入。这是如此显然的事实，我甚至在本段之后不再详细讨论它了。*当然*，\(n\)-向量比行列式更有意义。*当然*，微分形式比嵌套积分和神秘的雅可比行列式更有意义。*当然*，楔积比叉积更有意义。*当然*，二向量比复数更有意义。*当然*，我们应该使用多向量而不是“伪向量”和“伪标量”。我们为什么还在讨论这个问题？快去重写所有的书籍，理论（大部分）已经在那里。
- en: Claim (2), I believe, is nonsense.
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 主张（2），我认为，是无意义的。
- en: And with that, it’s time to talk about the geometric product.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候谈论几何乘积了。
- en: '* * *'
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The Geometric Product
  id: totrans-split-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 几何乘积
- en: 'The geometric product of two vectors gives a mixed-grade object consisting
    of a scalar part (their dot product) and a bivector part (their wedge product).
    GA likes to write this product as juxtaposition:'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 两个向量的几何乘积给出一个混合级别的对象，由标量部分（它们的点积）和二向量部分（它们的楔积）组成。GA喜欢将这个乘积写成并置：
- en: \[\b{a} \b{b} = \b{a} \cdot \b{b} + \b{a} \^ \b{b}\]
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: \[\b{a} \b{b} = \b{a} \cdot \b{b} + \b{a} \^ \b{b}\]
- en: (The general geometric product between two mixed-grade multivectors follows
    by writing them all out as sums of products of vectors like the above, then cancelling
    everything out according to \(\b{xx} = 1\) and \(\b{xy} = -\b{yx}\) for all choices
    of \(\b{x} \neq \b{y}\).)
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: （两个混合级别多向量之间的一般几何乘积是通过将它们全部写成像上面那样的向量积的和，然后根据 \(\b{xx} = 1\) 和 \(\b{xy} = -\b{yx}\)
    的选择取消所有内容来进行的。）
- en: Right away we’re confronted by the first problem. What does it even mean to
    have a “mixed-grade” multivector? The product of two vectors has a scalar part
    and a bivector part. Why?
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 立即我们面临着第一个问题。有一个“混合级别”多向量意味着什么？两个向量的乘积有一个标量部分和一个二向量部分。为什么？
- en: 'I assume that the actual reason it happened, historically, is that it’s roughly
    what complex numbers and quaternions do already. Complex multiplication seems
    to involve two objects with different types:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设历史上它发生的真正原因是，它大致上已经是复数和四元数已经做的事情了。复数乘法似乎涉及两个不同类型的对象：
- en: \[\begin{aligned} (a + bi) (c + di) = (ac - bd) + (ad + bc)i \end{aligned}\]
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{aligned} (a + bi) (c + di) = (ac - bd) + (ad + bc)i \end{aligned}\]
- en: 'And quaternion multiplication of e.g. two vectors seems to produce objects
    of mixed grades:'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 并且例如两个向量的四元数乘法似乎产生了混合级别的对象：
- en: \[\begin{aligned} (a_1 \b{i} + a_2 \b{j} + a_3 \b{k}) (b_1 \b{i} + b_2 \b{j}
    + b_3 \b{k}) &= a_1 b_1 \b{i}^2 + a_2 b_2 \b{j}^2 + a_3 b_3 \b{k}^2 \\ &+ (a_1
    b_2 - a_2 b_1) \b{ij} + (a_2 b_3 - a_3 b_2) \b{jk} + (a_3 b_1 - a_1 b_3) \b{ki}
    \\ &= - \b{a} \cdot \b{b} + \b{a} \times \b{b} \end{aligned}\]
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{aligned} (a_1 \b{i} + a_2 \b{j} + a_3 \b{k}) (b_1 \b{i} + b_2 \b{j}
    + b_3 \b{k}) &= a_1 b_1 \b{i}^2 + a_2 b_2 \b{j}^2 + a_3 b_3 \b{k}^2 \\ &+ (a_1
    b_2 - a_2 b_1) \b{ij} + (a_2 b_3 - a_3 b_2) \b{jk} + (a_3 b_1 - a_1 b_3) \b{ki}
    \\ &= - \b{a} \cdot \b{b} + \b{a} \times \b{b} \end{aligned}\]
- en: Where the first part is a scalar (don’t mind the minus sign, that’s quaternions
    being weird^() and the second part is a vector written in the basis \((\b{i},
    \b{j}, \b{k}) = (\b{jk}, \b{ki}, \b{ij})\).)
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 其中第一部分是一个标量（不要在意减号，那是四元数表现得怪异^()，第二部分是一个在基底 \((\b{i}, \b{j}, \b{k}) = (\b{jk},
    \b{ki}, \b{ij})\) 中书写的向量。
- en: Still, you have to explain what your geometric algebra is doing with mixed-grade
    objects. Do they… mean something? What is the scalar part? What would it mean
    to have a sum of a scalar, vector, bivector, and pseudoscalar? Or are they just
    formal linear combinations of things with no meaning? What is going on?
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你必须解释你的几何代数如何处理混合等级对象。它们…有意义吗？标量部分是什么？将标量、向量、双向量和伪标量相加意味着什么？还是它们只是没有意义的形式线性组合？到底发生了什么？
- en: Not only that, you need the mixed-grade objects to actually be *better* than
    they were before you wrote them that way. For instance you *can* write the electromagnetic
    field as \(\b{F} = \b{E} + \b{I} \b{B}\). But should you? Probably not. \(\b{E}\)
    is better understood as being a \(\b{x} \^ \b{t}\) bivector while \(\b{B}\) is
    an \(\b{x} \^ \b{y}\) bivector, so they’re both bivectors. The mixed-grade interpretation
    only makes sense if you confine yourself to \(\bb{R}^3\) for some reaseon. There
    are [other examples](https://math.stackexchange.com/questions/3805595/are-there-any-geometrically-meaningful-useful-mixed-grade-objects-in-geometric-a)
    of rewriting things as mixed-grade objects, but, notably, none of them… seem good?
    Writing equations in terms of mixed-grade multivectors in general doesn’t *tell
    you anything useful*. You can’t “think in them”. Or at least, I can’t.
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅如此，你需要将混合等级的对象实际上写成*比以前更好*的方式。例如你可以写电磁场为 \(\b{F} = \b{E} + \b{I} \b{B}\)。但是你应该吗？可能不应该。
    \(\b{E}\) 最好理解为一个 \(\b{x} \^ \b{t}\) 双向量，而 \(\b{B}\) 是一个 \(\b{x} \^ \b{y}\) 双向量，所以它们都是双向量。如果你限制自己在
    \(\bb{R}^3\) 中，混合等级的解释才有意义。有[其他例子](https://math.stackexchange.com/questions/3805595/are-there-any-geometrically-meaningful-useful-mixed-grade-objects-in-geometric-a)将事物重写为混合等级对象，但值得注意的是，其中…似乎没有好的？通常情况下，用混合等级多向量来写方程并不能告诉你任何有用的东西。你无法“用它们来思考”。或者至少我不能。
- en: The approximate answer to “why is GA using mixed-grade objects and multiplying
    them?” is that it tends to end up expressing a lot of *operations* on multivectors
    as multivectors themselves. For example it will regard a unit vector as a reflection
    operator, or a scalar + bivector as a rotation operator. In this scheme, the product
    of two multivectors is generically interpreted as the composition of these operators.
    That is fine!
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: “为什么GA使用混合等级对象并对它们进行乘法”的大致答案是，它倾向于表达许多对多向量的操作本身作为多向量。例如，它会将单位向量视为反射操作符，或者将标量
    + 双向量视为旋转操作符。在这种方案中，两个多向量的乘积通常被解释为这些操作符的组合。这是可以接受的！
- en: 'However, GA is not very forthright about the fact that it is doing this, and
    will happily go on talking about mixed-grade multivectors that refer to geometry
    primitives, often by just saying “multiply these with the GP, then take only the
    grade-2 part to get their area” and things like that. As far as I know there is
    no reason to do this except that they really like the GP! And it is very offputting
    when it is used this way: if you wanted their wedge product, just write their
    wedge product; don’t tell me to apply the GP to produce something that’s partly
    meaningless and then extract the meaningful part from that. (And anyway, if your
    goal is to pre-multiply vectors in a generic way and then extract useful components
    out of the result… you should be using the tensor product, not the geometric product,
    right?)'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，GA 并没有很坦率地说明它正在这样做，它很乐意继续讨论混合等级多向量，这些多向量通过简单地说“用GP相乘，然后只取二级部分以获得它们的面积”等方式通常引用几何原语。据我所知，没有理由这样做，除非他们真的很喜欢GP！当它被用于这种方式时，这种做法是非常令人反感的：如果你想要它们的楔积，就写出它们的楔积；不要告诉我应用GP来生成部分无意义的东西，然后从中提取有意义的部分。（而且，如果你的目标是以一种通用的方式预乘向量，然后从结果中提取有用的组件…你应该使用张量积，而不是几何积，对吧？）
- en: 'So that’s a problem: **there is no good general interpretation or usage for
    the geometric product or mixed-grade multivectors**. There are usages and interpretations
    in special cases, but the generic operation is not meaningful. Yet it is used
    everywhere as the fundamental object of the theory. (For instance [here](https://math.stackexchange.com/questions/1535878/visualizing-the-geometric-product)
    are some people struggling to find to find a general interpretation of the GP.)
    It is very awkward that the basic geometric operation in the geometric algebra
    that people espouse because they’re trying to make everything geometrically intuitive…
    is not very geometrically meaningful on its own.'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是一个问题：**几何乘积或混合级别多重矢量没有一个好的普遍解释或用法**。在特殊情况下有用途和解释，但一般操作并没有意义。然而它被用作理论的基本对象。（例如在[这里](https://math.stackexchange.com/questions/1535878/visualizing-the-geometric-product)有些人在努力寻找GP的一般解释。）尽管人们试图使一切在几何上直观化，但在几何代数中的基本几何操作本身并不是非常几何上有意义的。
- en: 'Incidentally, you would not want to actually use the geometric product to do
    these calculations, like, numerically. If you want to calculate dot products,
    wedge products, rotations, reflections, etc, or especially if want to program
    them into a computer, the last thing you want to do is implement them as arbitrary
    products of mixed-grade-multivectors and then project out certain terms at the
    end that you care about. Because of course you don’t: you really want to just
    implement the actual operation you were trying to use; doing it that way would
    be both tedious and a giant waste of memory and computational power. The reason
    you would use the GP is when all your objects are geometric operations that are
    already expressed as mixed-grade multivectors, so you can commute and anti-commute
    the terms in their components to compose them. In that case, go for it. But it
    is not like you want to be actually using the GP on a computer to perform operations
    that GA defines in terms of it, such as dot or wedge products. Nor would you want
    to use it to perform basic operations by hand. Basically the GP is useful for
    algebraic manipulations, not numeric ones.'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，你不希望实际上使用几何乘积来进行这些计算，比如数字化。如果你想计算点积、楔积、旋转、反射等，尤其是如果想将它们编程到计算机中，你最不想做的事情是将它们实现为混合级别的多重矢量的任意乘积，然后在最后投影出你关心的特定项。因为当然你不会想这样做：你真正想做的是只实现你试图使用的实际操作；用那种方式做事情既繁琐又浪费内存和计算能力。你使用GP的原因是当你的所有对象都是已经表达为混合级别多重矢量的几何操作时，你可以交换和反交换它们的组件来组合它们。在这种情况下，就去做吧。但这并不意味着你想在计算机上实际使用GP来执行GA以它定义的操作，如点积或楔积。你也不想用它来手动执行基本操作。基本上GP在代数操作中很有用，而不是数值操作。
- en: '* * *'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Rotations and Reflections
  id: totrans-split-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 旋转和反射
- en: 'As I said above, the main place that the GP’s behavior makes some sense is
    when the multivectors are being regarded as operators on geometric objects, rather
    than the geometric objects themselves. For instance:'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如我上面所说，GP的主要用途是当多重矢量被视为几何对象上的操作符时，而不是几何对象本身。例如：
- en: '(1) A basic rotation as implemented by exponentiating a bivector:'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: (1) 通过指数化一个双向量来实现的基本旋转：
- en: \[e^{\theta (\b{xy})} = \cos \theta + (\b{xy}) \sin \theta\]
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: \[e^{\theta (\b{xy})} = \cos \theta + (\b{xy}) \sin \theta\]
- en: 'Which operators on vectors like so:'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对向量进行操作如下：
- en: \[e^{\theta (\b{xy})}(\b{x}) = \b{x} \cos \theta - \b{y} \sin \theta\]
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: \[e^{\theta (\b{xy})}(\b{x}) = \b{x} \cos \theta - \b{y} \sin \theta\]
- en: (2) Or a better type of rotation is implemented by sandwiching an object between
    two “rotors”, which are half-angle rotations (which is necessary to produce the
    correct [Rodrigues formula](https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula)
    for rotations in \(>2\) dimensions^():)
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: (2) 或者更好的旋转类型是通过将对象夹在两个“转子”之间来实现的，这些转子是半角旋转（这是为了在大于2维度中产生正确的[罗德里格斯公式](https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula)用于旋转的必要条件^():)
- en: \[\b{v} \mapsto e^{\theta \b{B}/2} \b{v} e^{-\theta \b{B}/2}\]
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: \[\b{v} \mapsto e^{\theta \b{B}/2} \b{v} e^{-\theta \b{B}/2}\]
- en: The intermediate object in this case is \(e^{\theta \b{B}/2} \b{v} = \cos (\theta/2
    )\b{v} + \sin (\theta/2) \b{B} (v_{\parallel} + v_{\perp})\). If \(v_{\perp}\)
    is perpendicular to the plane of rotation then \(\b{B} \b{v}_{\perp}\) becomes
    a trivector temporarily before being turned back into a vector by the second copy
    of \(\b{B}\).
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下的中间对象是 \(e^{\theta \b{B}/2} \b{v} = \cos (\theta/2 )\b{v} + \sin (\theta/2)
    \b{B} (v_{\parallel} + v_{\perp})\)。如果\(v_{\perp}\)垂直于旋转平面，则\(\b{B} \b{v}_{\perp}\)在第二个\(\b{B}\)的副本之前临时成为三向量，然后再被转换回向量。
- en: (3) The reflection operator \(-\b{n} \b{v} \b{n} = \b{v}_{\perp n} - \b{v}_{\parallel
    n}\) which reflects a vector along the unit \(\b{n}\).
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: (3) 反射操作符 \(-\b{n} \b{v} \b{n} = \b{v}_{\perp n} - \b{v}_{\parallel n}\)，它沿单位向量\(\b{n}\)反射向量。
- en: In each case we are using multivectors, and constructing intermediate mixed-grade
    multivectors, in order to transform a vector in some way (and there are extensions
    to multivectors). What seems to happen is that the scalar terms that show up in
    the geometric product in each case is responsible for performing the “identity”
    part of the operation which leaves its argument unchanged, while the bivector
    (or whatever) term is responsible for the part that gets transformed. Then the
    GP implements “composition” of these operators.
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，我们都使用多向量，并构造中间的混合级别多向量，以某种方式转换向量（还有多向量的扩展）。看起来发生的事情是，在每种情况下，在几何积中显示出来的标量项负责执行操作的“身份”部分，这部分使其参数保持不变，而双向量（或其他内容）项则负责进行变换的部分。然后几何积实现这些运算符的“组合”。
- en: 'This becomes more clear in some of the more “exotic” geometric algebras out
    there: in practice GA people like to add more basis vectors, creating Clifford
    algebras like \(Cl_{3,1}\) which has three basis vectors that square to \(+1\)
    and one that squares to \(-1\), or \(Cl_{3,0,1}\) that has three \(+1\)s and one
    that squares to \(0\). Each of these produces a different sort of “algebra of
    operations”, and in each case the geometric product is used to compose them. Versions
    of this produce geometric algebras that include as primitives things like translations,
    Lorentz transformations, or screw-motions, and then their geometric product composes
    those operations.'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些更“奇特”的几何代数中，这一点变得更加清晰：实际上，GA（几何代数）的人们喜欢添加更多的基向量，创建像\(Cl_{3,1}\)这样的克利福德代数，它有三个基向量平方为\(+1\)，一个基向量平方为\(-1\)，或者像\(Cl_{3,0,1}\)这样的代数，它有三个\(+1\)和一个基向量平方为\(0\)。每个代数都产生了不同类型的“操作代数”，在每种情况下，几何积被用来组合它们。这些版本的几何代数包括诸如平移、洛伦兹变换或螺旋运动等基元操作，而它们的几何积则用于组合这些操作。
- en: 'The *fact that you can do this* is certainly cool and neat, and profitable
    if you need to compose a lot of those operations. **But GA tends to act like this
    algebra which it has constructed to perform operations on a geometry… “is” the
    “right” way to do geometry**. Really it’s just an implementation detail. If GA
    replaces all the vectors with planar reflections… well, vectors are still a thing,
    as is their wedge product. The fact that you built operators out of a quirky reinterpretation
    doesn’t make the old things go away. GA’s tendency to act like it is “better”
    than other approaches is very alienating: they all the same thing, and GA has
    just picked a few things and turned them into primitives, at the cost of making
    other things more complex. The GA in use is *not* the canonical algebra of basic
    vectorial objects, but the algebra of a certain class of vectorial transformations
    on those objects that were chosen for the problem at hand.'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*你能做到这一点* 的事实确实很酷、很整洁，如果你需要组合大量这些操作的话也是很有利的。**但是GA倾向于表现得像这种代数是进行几何操作的“正确”方式**。实际上，这只是一个实现细节。如果GA用平面反射替换了所有向量……嗯，向量仍然存在，并且它们的楔积也是一个东西。事实上，你通过一种古怪的重新解释来构建操作符，并不能让旧事物消失。GA倾向于表现得比其他方法“更好”是非常疏远的：它们做的都是同样的事情，而GA只是选择了一些事物并将它们转化为基元，这样做的代价是使其他事物变得更复杂。在使用中的GA并不是基本向量对象的标准代数，而是一定类别的向量变换代数，这些变换是为了解决手头的问题而选择的。'
- en: I strongly believe that if GA would make this distinction they would lose a
    lot fewer people. It is a completely interesting and useful thing to talk about
    “a representation of a particular class of operations that makes composition and
    inversion easy”, and completely offputting when you blur the distinction between
    operators and geometric objects themselves, and write every operation in terms
    of the geometric product when only a few of them are really compositions of operators.
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我坚信，如果 GA 能够做出这种区分，他们会失去更少的人。谈论“一种使组合和反转容易的操作类的表示”是非常有趣且有用的事情，但在模糊操作符与几何对象本身之间的区别，并将每个操作写成几何积，而实际上只有少数几个是真正的操作组合时，这种做法会令人反感。
- en: '* * *'
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'It’s worth considering what things would look like in a different model. The
    normal non-GA way to model a rotation operation, for instance, is with the [exponential
    map](https://en.wikipedia.org/wiki/Exponential_map) of a generator \(R_{xy}\):'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: 值得考虑的是，在不同模型中事物会是什么样子。例如，正常的非 GA 方法来建模旋转操作是使用[指数映射](https://en.wikipedia.org/wiki/Exponential_map)的生成器\(R_{xy}\)：
- en: \[\begin{aligned} e^{\theta R_{xy}} (\b{x}) &= (I \cos \theta + R_{xy} \sin
    \theta) \b{x} \\ &= I(\b{x}) \cos \theta + R_{xy}(\b{x}) \sin \theta \\ &= \b{x}
    \cos \theta + \b{y} \sin \theta \\ \end{aligned}\]
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{aligned} e^{\theta R_{xy}} (\b{x}) &= (I \cos \theta + R_{xy} \sin
    \theta) \b{x} \\ &= I(\b{x}) \cos \theta + R_{xy}(\b{x}) \sin \theta \\ &= \b{x}
    \cos \theta + \b{y} \sin \theta \\ \end{aligned}\]
- en: 'Where \(I\) is the identity operator. (Don’t mind the sign change compared
    to GA’s version, it’s basically a choice of convention.) \(R_{xy}\) is the generator
    of rotation that simply performs the basic operation, while the exponential map
    “smears it out” and applies it over and over in infinitesimal amounts. \(R_{xy}\)
    may be written as a matrix:'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: 其中\(I\)是单位算符。(不要介意与 GA 版本相比的符号变化，这基本上是一种惯例选择。)\(R_{xy}\)是执行基本操作的旋转生成器，而指数映射“扩散”并以无穷小量应用它。\(R_{xy}\)可以写成一个矩阵：
- en: \[\begin{pmatrix} 0 & 1 & 0 \\ -1 & 0 & 0 \\ 0 & 0 & 1\end{pmatrix}\]
  id: totrans-split-98
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{pmatrix} 0 & 1 & 0 \\ -1 & 0 & 0 \\ 0 & 0 & 1\end{pmatrix}\]
- en: 'but it’s fine and perhaps better, to leave it as a symbol: the matrix is just
    a representation of it in a particular basis.'
  id: totrans-split-99
  prefs: []
  type: TYPE_NORMAL
  zh: 但是将其视为一个符号也是可以的：矩阵只是在特定基础上的表示。
- en: 'The operator version of the exponential map produces an object whose two components
    have the same type: both are “operators that map vectors to vectors”. Whereas
    the GA versions produce two objects with different types: a scalar and a bivector,
    which both happen to give a vector when multiplying a vector. In the operator
    version, the first term happens to be identity operator which you *could* write
    as a scalar \(1\)… but it seems more natural to me that both \(e^{\theta R_{xy}}\)
    and its expansion in terms of \(\cos \theta\) and \(\sin \theta\) are of the “same
    type” throughout. And although the identity operator \(I\) could be written as
    \(1\), it is just as good to regard it as a tensor product \(\b{x} \o \b{x} +
    \b{y} \o \b{y} + \b{z} \o \b{z}\). Either way, GA’s trick of “removing the vector
    part, then putting it back” is just… weird, I guess?'
  id: totrans-split-100
  prefs: []
  type: TYPE_NORMAL
  zh: 指数映射的操作符版本生成一个对象，其两个分量具有相同的类型：都是“将向量映射到向量”的操作符。而 GA 版本生成的是两个类型不同的对象：一个标量和一个双向量，这两者乘以向量时都给出一个向量。在操作符版本中，第一项恰好是单位算符，你可以将其写作标量\(1\)……但对我来说，将\(e^{\theta
    R_{xy}}\)及其用\(\cos \theta\)和\(\sin \theta\)展开的方式视为“同一类型”更为自然。尽管单位算符\(I\)可以写成\(1\)，但将其视为张量积\(\b{x}
    \o \b{x} + \b{y} \o \b{y} + \b{z} \o \b{z}\)同样合理。总之，GA 的“去除向量部分，然后再放回”的技巧……感觉有些奇怪吧？
- en: More to the point, these objects have the same algebra. If you write out your
    rotations as operators or geometric-products of mixed-grade multivectors, they
    do the same thing. The choice of representation is there for its utility, not
    for its underlying mathematical truth, and *pretending* like it is mathematical
    truth is disingenuous and offputting.
  id: totrans-split-101
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，这些对象具有相同的代数结构。如果你将你的旋转写成操作符或混合级别多向量的几何积，它们会做同样的事情。选择表示形式是为了其实用性，而不是其数学真理，而*假装*它是数学真理是不诚实和令人反感的。
- en: 'Also, I happen to find the operator version a lot more appealing. Sure, it
    is interesting that GA’s version works, but since the intermediate objects aren’t
    interpretable as actual geometric primitives (like: a sum of a scalar and a bivector
    is not a thing in the world of “vectorial directions, areas, and volumes”—only
    in the world of “operators”), it is unsatisfying. Operators are a slightly different
    thing than multivectors, and the distinction is important. They have different
    “types”. Conceptually, vectors are not rotations or reflections or translations
    on their own; multivectors are not rotations on their own. But they can be put
    in *correspondence* with rotations or reflections or translations, yes, for instance
    we use unit bivectors for the purposes of defining the planes that rotations happen
    in. But I think it is a mistake to *identify* them with rotations and other operators,
    and everything else goes awry as a result.'
  id: totrans-split-102
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我碰巧发现操作符版本更加吸引人。当然，GA 的版本能够工作是很有趣的，但由于中间对象不能被解释为实际的几何原语（比如：标量和双矢量的和在“矢量方向、面积和体积的世界”中并不存在，只存在于“操作符”的世界中），所以这是不令人满意的。操作符与多重矢量稍有不同，这种区别是重要的。它们有不同的“类型”。在概念上，向量本身不是旋转、反射或平移；多重矢量本身也不是旋转。但它们可以与旋转、反射或平移
    *对应*，例如我们使用单位双矢量来定义发生旋转的平面。但我认为将它们 *标识为* 旋转和其他操作符是一个错误，结果其他一切都会变得混乱不堪。
- en: This also happens in \(\bb{C}\) as well, by the way. We learn to regard \(a
    + bi\) as an operation on other complex numbers \(r e^{i \theta}\), which rotates
    and scales them, but really that is actually… pretty weird? Most of the time we
    think of complex numbers as vectors in \(\bb{R}^2\) or as rotation+scaling operators,
    but rarely do we actually we want them in both roles at the same time. So it is
    not very natural to equate the two objects, as opposed to finding a correspondence
    between them.
  id: totrans-split-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这在 \(\bb{C}\) 中也会发生，顺便说一句。我们学会把 \(a + bi\) 视为对其他复数 \(r e^{i \theta}\) 的操作，它旋转和缩放它们，但实际上这真的很奇怪？大多数时候，我们将复数视为
    \(\bb{R}^2\) 中的向量或者旋转+缩放操作符，但很少将它们同时视为两种角色。所以将这两个对象等同起来并不太自然，而是找到它们之间的对应关系更合适。
- en: 'Well, GA would phrase this as the vector interpretation being \(a \b{x} + b
    \b{y}\) and the operator interpretation as \(a + b I\). But I would argue that
    even the bivectors and scalars should not be interpreted as operators either.
    Bivectors are not operators: they’re elements of a vector space that models units
    of area in planes. If the plane is created by two geometric rays then the unit
    of area is a vectorial representation of a patch of area. If the plane is created
    by two operations on vectors, then the unit of area is a vectorial representation
    of some sort of antisymmetrized product of those operators. That’s all fine! They’re
    just *different spaces* that have similar algebras. Rotations can be *implemented*
    with them, yes, because rotations take place in planes, but they are not the same
    thing: bivectors-as-vectorial-areas only become rotation operators *when you contract
    with one of their indexes*, which is a separate step that you would perform on
    purpose.'
  id: totrans-split-104
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，GA 将这种矢量解释表达为 \(a \b{x} + b \b{y}\)，操作符解释为 \(a + b I\)。但我认为即使是双矢量和标量也不应被解释为操作符。双矢量不是操作符：它们是模拟平面单位面积的向量空间元素。如果平面是由两个几何射线创建的，则面积单位是面积片的向量表示。如果平面是由向量的两个操作创建的，则面积单位是这些操作的某种反对称化积的向量表示。这都很好！它们只是
    *不同的空间*，但具有类似的代数。旋转可以 *用它们实现*，是的，因为旋转发生在平面中，但它们并不是相同的东西：双矢量作为面积向量只有在 *与它们的一个指标缩并*
    时才成为旋转操作符，这是你会有目的地执行的一个单独步骤。
- en: 'So GA ends up being very stuck because it equates “vectorial objects” and “operators
    that act on vectorial objects”. It would be better to express all the geometric
    objects you care about in their most natural forms, and then find isomorphisms
    between them when it’s necessary to do so. Otherwise all the meanings get blurred
    together and it’s very confusing. So that’s another problem with geometric algebra:
    **eliding the distinction between vectors and operators is undesirable, confusing,
    and disingenuous**. The GP is only geometrically meaningful, to my knowledge,
    in the context of “representations of certain classes of geometric operators as
    implemented in particular Clifford Algebras”, and treating it like it is some
    general-case thing turns a lot of people away from the start.'
  id: totrans-split-105
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，几何代数最终变得非常僵化，因为它将“向量对象”和“作用于向量对象的操作符”等同起来。最好是用它们最自然的形式表达你关心的所有几何对象，然后在必要时找到它们之间的同构。否则，所有的含义会混为一谈，非常令人困惑。所以这是几何代数的另一个问题：**淡化向量和操作符之间的区别是不可取的，令人困惑且不真实**。据我所知，GP仅在“特定类别的几何操作符的表示中实现在特定的Clifford代数中”时才具有几何意义，并将其视为某种一般情况会让很多人望而却步。
- en: '* * *'
  id: totrans-split-106
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Weird Formulas
  id: totrans-split-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 奇怪的公式
- en: 'A related problem is that even when you *do* treat multivectors as operators,
    the interpretations are… kinda weird? Consider the reflection operation:'
  id: totrans-split-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一个相关的问题是，即使当你把多向量视为操作符时，解释起来也……有点奇怪？考虑一下反射操作：
- en: '\[P_{\b{n}}: \b{v} \mapsto - \b{n} \b{v} \b{n}\]'
  id: totrans-split-109
  prefs: []
  type: TYPE_NORMAL
  zh: '\[P_{\b{n}}: \b{v} \mapsto - \b{n} \b{v} \b{n}\]'
- en: 'Where \(\b{n}\) is a unit vector that we’re reflecting along the axis of. This
    works because if you decompose \(\b{v} = \b{v}_{\parallel n} + \b{v}_{\perp n}\)
    you can see that it flips the parallel part but not the perpendicular part (recall
    that parallel vectors have zero wedge product while perpendicular vectors have
    zero dot product, or in GA terms, parallel vectors commute while orthogonal vectors
    anticommute):'
  id: totrans-split-110
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 \(\b{n}\) 是我们反射轴上的单位向量。这有效，因为如果你分解 \(\b{v} = \b{v}_{\parallel n} + \b{v}_{\perp
    n}\)，你会看到它翻转了平行部分但没有翻转垂直部分（记住平行向量的楔积为零，而垂直向量的点积为零，或者在几何代数术语中，平行向量可交换而正交向量可反交换）：
- en: \[\begin{aligned} P_{\b{n}}(\b{v}) &= - \b{n} \b{v} \b{n} \\ &= - \b{n}( \b{v}_{\parallel
    n} + \b{v}_{\perp n}) \b{n} \\ &= - \b{n} \b{n} \b{v}_{\parallel n} + \b{n} \b{n}
    \b{v}_{\perp n} \\ &= \b{v}_{\perp n} - \b{v}_{\parallel n} \end{aligned}\]
  id: totrans-split-111
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{aligned} P_{\b{n}}(\b{v}) &= - \b{n} \b{v} \b{n} \\ &= - \b{n}( \b{v}_{\parallel
    n} + \b{v}_{\perp n}) \b{n} \\ &= - \b{n} \b{n} \b{v}_{\parallel n} + \b{n} \b{n}
    \b{v}_{\perp n} \\ &= \b{v}_{\perp n} - \b{v}_{\parallel n} \end{aligned}\]
- en: It’s neat that that works. But is it a good formula; does it make any sense?
    Not… really? Why would you reflect a vector by sandwiching it with a unit vector
    and adding in a minus sign? I doubt you could have guessed that formula without
    already knowing that it works, or by fiddling around with the geometric product
    for a while. And knowing it doesn’t really teach you how to write down any other
    formulas. The operator version is something you can build out of primitives that
    you know (I mean, if we were developing geometric algebra with operators we would
    have already defined the projection \(\b{v}_{\parallel n}\) and rejection \(\b{v}_{\perp
    n}\) operators at this point.)
  id: totrans-split-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这很棒，这个方法有效。但这是一个好的公式吗？它有任何意义吗？不……真的吗？为什么你要通过夹在单位向量中并加上一个负号来反射一个向量？我怀疑你在不知道它有效的情况下能猜到这个公式，或者在几何乘积上稍作摆弄后。而知道它并不能真正教你如何写下其他公式。操作符版本是你可以从已知的原始元素构建出来的（我的意思是，如果我们正在开发带有操作符的几何代数，我们在这一点上已经定义了投影
    \(\b{v}_{\parallel n}\) 和拒绝 \(\b{v}_{\perp n}\) 操作符。）
- en: \[P_{\b{n}}(\b{v}) = \b{v}_{\perp n} - \b{v}_{\parallel n}\]
  id: totrans-split-113
  prefs: []
  type: TYPE_NORMAL
  zh: \[P_{\b{n}}(\b{v}) = \b{v}_{\perp n} - \b{v}_{\parallel n}\]
- en: 'A bit cludgy, but the meaning is clear. The GA representation is just that:
    a *representation*, in a particular algebra, that happens to work. But it is not
    a “natural” way to express the operation for most people’s purposes.'
  id: totrans-split-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有点笨拙，但意思很明确。几何代数的表示只是那样：在一个特定的代数中的一个*表示*，它恰好起作用。但对于大多数人来说，这并不是表达操作的“自然”方式。
- en: 'So that’s another complaint: **Geometric Algebra’s sleek formulas, when it
    has them, don’t provide much useful geometric intuition**. They’re just things
    you memorize. *Maybe* there’s a way to intuit the reflection formula if you think
    of all unit vectors as being reflection operations, but why bother? You’ll get
    more intuition out of operators.'
  id: totrans-split-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里有另一个抱怨：**几何代数的简洁公式，即使有，也不提供太多有用的几何直觉**。它们只是你需要记住的东西。*也许*如果你把所有单位向量都看作反射操作，可能会直觉出反射公式，但为什么要费心呢？通过运算符，你会得到更多直觉。
- en: '* * *'
  id: totrans-split-116
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'GA in Physics: Pauli and Gamma Matrices'
  id: totrans-split-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 物理中的GA：Pauli矩阵和Gamma矩阵
- en: 'In the standard GA over \(\bb{R}^3\), once you have defined the weird GP on
    vectors, the next step is to define the regular useful operations of EA in terms
    of it:'
  id: totrans-split-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 \(\bb{R}^3\) 上的标准GA中，一旦你定义了向量上的奇异值乘积，下一步就是以它的术语来定义EA的常规有用操作：
- en: \[\b{a} \cdot \b{b} = \frac{1}{2}(ab + ba)\] \[\b{a} \^ \b{b} = \frac{1}{2}(ab
    - ba)\]
  id: totrans-split-119
  prefs: []
  type: TYPE_NORMAL
  zh: \[\b{a} \cdot \b{b} = \frac{1}{2}(ab + ba)\] \[\b{a} \^ \b{b} = \frac{1}{2}(ab
    - ba)\]
- en: This construction is appealing to people who came from physics because their
    first exposure to exterior algebra was probably in the form of the [Pauli matrices](https://en.wikipedia.org/wiki/Pauli_matrices)
    (which show up in the quantum mechanics of a non-relativistic electron) and the
    [Gamma matrices](https://en.wikipedia.org/wiki/Gamma_matrices) (which show up
    in the [Dirac Equation](https://en.wikipedia.org/wiki/Dirac_equation) for relativistic
    electrons and positrons).
  id: totrans-split-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这种构造对于从物理学角度出发的人们非常吸引，因为他们对外代数的第一次接触可能是通过Pauli矩阵（出现在非相对论电子的量子力学中）和Gamma矩阵（出现在相对论电子和正电子的Dirac方程中）。
- en: 'The gamma matrices, famously, have their symmetric product equal to the (Minkowski)
    metric \(\eta^{\mu \nu} = \text{diag}(1, -1, -1, -1)\):'
  id: totrans-split-121
  prefs: []
  type: TYPE_NORMAL
  zh: 众所周知，Gamma矩阵的对称乘积等于（Minkowski）度规 \(\eta^{\mu \nu} = \text{diag}(1, -1, -1, -1)\)：
- en: \[\{ \gamma^\mu, \gamma^\nu \} = \gamma^\mu \gamma^\nu + \gamma^\nu \gamma^\mu
    = 2 \eta^{\mu \nu}\]
  id: totrans-split-122
  prefs: []
  type: TYPE_NORMAL
  zh: \[\{ \gamma^\mu, \gamma^\nu \} = \gamma^\mu \gamma^\nu + \gamma^\nu \gamma^\mu
    = 2 \eta^{\mu \nu}\]
- en: 'Which, after some unpacking of the notation, says that \(\gamma^0 = \b{t}\)
    and \(\gamma^i = \b{x}^i\) and that \(\b{t} \cdot \b{t} = +1\) while \(\b{x} \cdot
    \b{x} = \b{y} \cdot \b{y} = \b{z} \cdot \b{z} = -1\). Essentially these are the
    objects you need if you want to “square root” the Laplacian \(\p_t^2 - \p_x^2
    - \p_y^2 - \p_z^2 = (\gamma^0 \p_t + \gamma^1 \p_x + \gamma^2 \p_y + \gamma^3
    \p_z)^2\). Somehow it works but good look figuring out what it means! It turns
    out that the total set of Gamma matrices has 16 elements which correspond to the
    16 elements of \(\^^4 \bb{R}^{1, 3}\): one scalar (the identity), four vectors
    (the regular Gamma matrices), six bivectors (the commutators of Gamma matrices),
    four trivectors (etc), and one pseudoscalar (the object usually written \(\gamma^5\)).
    And their multiplication rule is exactly the Clifford algebra on those objects
    with metric signature \((+1, -1, -1, -1)\). That is actually cool and interesting:
    apparently the Gamma matrices *do* implement the Clifford algebra \(\text{Cl}_{1,3}\),
    which GA calls the “spacetime algebra”. Evidently whatever a bispinor “is”, vectors
    act on them by multiplication using the Gamma matrices as their representation.'
  id: totrans-split-123
  prefs: []
  type: TYPE_NORMAL
  zh: 某些符号的拆解之后，表示 \(\gamma^0 = \b{t}\)，\(\gamma^i = \b{x}^i\)，以及 \(\b{t} \cdot \b{t}
    = +1\) 以及 \(\b{x} \cdot \b{x} = \b{y} \cdot \b{y} = \b{z} \cdot \b{z} = -1\)。基本上，这些是你需要的对象，如果你想要“平方根”拉普拉斯算子
    \(\p_t^2 - \p_x^2 - \p_y^2 - \p_z^2 = (\gamma^0 \p_t + \gamma^1 \p_x + \gamma^2
    \p_y + \gamma^3 \p_z)^2\)。不知怎么回事，它却有效，但是要弄明白它的含义还真不容易！事实证明，Gamma 矩阵的完整集合有16个元素，对应于
    \(\^^4 \bb{R}^{1, 3}\) 的16个元素：一个标量（单位元），四个向量（常规Gamma矩阵），六个双向量（Gamma矩阵的反对称组合），四个三向量（等等），以及一个赝标量（通常写作
    \(\gamma^5\) 的对象）。它们的乘法规则恰好是这些对象上的Clifford代数，其度规签名为 \((+1, -1, -1, -1)\)。这实际上是很酷和有趣的：显然Gamma矩阵确实实现了Clifford代数
    \(\text{Cl}_{1,3}\)，GA将其称为“时空代数”。显然，不管双旋量“是”什么，向量都通过使用Gamma矩阵作为它们的表示进行乘法。
- en: So if you were coming from knowing about Pauli matrice and Gamma matrices, finding
    out that there’s a way to interpret them all as basic elements of an intuitive
    algebra is very appealing. This, I think, is the reason Hestenes, Doran, Lasenby,
    etc were very interested in the geometric product as a generic tool for building
    vector algebra in the first place; their early papers are very targeted at physicists
    who are frustrated with spinors and bispinors not making much sense.
  id: totrans-split-124
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你是从了解Pauli矩阵和Gamma矩阵出发的，发现有一种方式可以将它们解释为直观代数的基本元素，那么这显然非常吸引人。我认为这就是Hestenes、Doran、Lasenby等人对几何乘积非常感兴趣的原因之一，因为这是建立向量代数的通用工具，特别是对那些对旋量和双旋量感到困惑的物理学家而言；他们早期的论文非常针对这些问题。
- en: 'I agree that rewriting the objects in terms of their Clifford Algebra is a
    good idea. But I don’t agree that this means you should rephrase all of geometry
    in terms of the Clifford Product / Geometric Product. The GP is provisionally
    useful for complex numbers, quaternions/Pauli matrices, and Gamma matrices, and
    fantastically useful in general for spinors (apparently!)… but that doesn’t apply
    anywhere else. So why would you go rewrite all of vector algebra in terms of it?
    Anyway I’m counting it as another problem with GA: **The fact that the GP shows
    up for mysterious reasons in the physics of spinors is no reason to use it for
    the rest of geometry.** For purposes other than spinor-related algebra, an operator-first
    formulation does everything you want without a magic bizarre product, and it’s
    not like the spinor algebra makes a lot of intuitive sense anyway. Writing everything
    the way that they are produced in spinor algebra is not providing any intuition
    for anything.'
  id: totrans-split-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我同意，将对象重新表述为它们的克利福代数形式是个好主意。但我不认同这意味着你应该将所有的几何都用克利福积/几何积来重新表达。几何积在复数、四元数/泡利矩阵和伽玛矩阵中暂时有用，对于旋量（显然！）也特别有用……
    但这并不适用于其他任何地方。那么你为什么要用它来重新定义所有的向量代数呢？总之，我将它视为广义代数的另一个问题：**旋量物理中克利福积出现的神秘原因并不足以成为在几何学的其他领域中使用它的理由。**对于除了旋量相关代数以外的目的，操作符优先的表述可以做到你想要的一切，而不需要一个神奇古怪的积，而且旋量代数也并不像其它直觉上有很多意义。按照它们在旋量代数中产生的方式来写一切，并没有为任何事情提供直觉。
- en: (Incidentally, the fact that the Gamma matrices which convert between spinors
    and real numbers also obey a Clifford algebra is… really weird, isn’t it? I have
    trouble thinking of any kind of possible explanation that would lead to that.
    Each gamma matrix corresponds to a cardinal direction, their antisymmetric product
    gives a bivector, but also their symmetric product gives the identity—what could
    that possibly mean? It feels like it’s closely related to the, um Divine Understanding
    of Spinors, the interpretation that Atiyah was talking about not having when he
    said “No one fully understands spinors.”. Whatever they are, their symmetrization
    becomes the identity operator. It’s so *weird*.)
  id: totrans-split-126
  prefs: []
  type: TYPE_NORMAL
  zh: （顺便说一句，伽玛矩阵不仅转换旋量和实数之间，还服从克利福代数，这……真的很奇怪，不是吗？我很难想象可能的任何解释会导致这一点。每个伽玛矩阵对应一个基本方向，它们的反对称积给出双矢量，但同时它们的对称积又给出单位矩阵——这可能意味着什么？它似乎与旋量的神圣理解密切相关，艾蒂亚在说“没有人完全理解旋量”时所指的那种解释。无论它们是什么，它们的对称化成为单位算子。这真的*很奇怪*。）
- en: '* * *'
  id: totrans-split-127
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: A Proliferation of Operations
  id: totrans-split-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作的大量增加
- en: Not only are the GP and mixed-grade multivectors weird, they have to invent
    a bunch of weird other operators just to *undo* their awkwardness. Such as the
    grade projection operator
  id: totrans-split-129
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅克利福积和混合级别的多重矢量很奇怪，它们还必须发明一堆其他奇怪的操作符来*取消*它们的笨拙。比如级投影操作符
- en: \[\<A\>_k = \text{(grade-k component of )}A\]
  id: totrans-split-130
  prefs: []
  type: TYPE_NORMAL
  zh: \[\<A\>_k = \text{(grade-k component of )}A\]
- en: 'Or the “even” and “odd” grade projections:'
  id: totrans-split-131
  prefs: []
  type: TYPE_NORMAL
  zh: 或者“偶数”和“奇数”级别的投影：
- en: \[\<A\>^+ = \< A \>_0 + \< A \>_2 + \< A \>_4 + \ldots \\ \<A\>^- = \< A \>_1
    + \< A \>_1 + \< A \>_3 + \ldots \\\]
  id: totrans-split-132
  prefs: []
  type: TYPE_NORMAL
  zh: \[\<A\>^+ = \< A \>_0 + \< A \>_2 + \< A \>_4 + \ldots \\ \<A\>^- = \< A \>_1
    + \< A \>_1 + \< A \>_3 + \ldots \\\]
- en: 'Or some really awkward definitions of every other kind of product:'
  id: totrans-split-133
  prefs: []
  type: TYPE_NORMAL
  zh: 或者一些非常尴尬的定义，比如其他每种乘积：
- en: \[\begin{aligned} A \, \lfloor \, B &= \sum_{r,s} \< \<A\>_r \<B\>_s \>_{s-r}
    \\ A \, \rfloor \, B &= \sum_{r,s} \< \<A\>_r \<B\>_s \>_{r-s} \\ A \ast B &=
    \sum_{r,s} \< \<A\>_r \<B\>_s \>_{0} \\ A \bullet B &= \sum_{r,s} \< \<A\>_r \<B\>_s
    \>_{\| s - r \|} \end{aligned}\]
  id: totrans-split-134
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{aligned} A \, \lfloor \, B &= \sum_{r,s} \< \<A\>_r \<B\>_s \>_{s-r}
    \\ A \, \rfloor \, B &= \sum_{r,s} \< \<A\>_r \<B\>_s \>_{r-s} \\ A \ast B &=
    \sum_{r,s} \< \<A\>_r \<B\>_s \>_{0} \\ A \bullet B &= \sum_{r,s} \< \<A\>_r \<B\>_s
    \>_{\| s - r \|} \end{aligned}\]
- en: 'None of any of this is necessary if you don’t use mixed-grade multivectors
    and the GP in the first place. And absolutely nobody wants to learn any identies
    involving these things. So that’s another complaint: **there are way too many
    confusing definitions required when you base everything on the geometric product**.
    I have to imagine that every single person who has gone to learn GA has been taken
    aback by this, and by the fact that the people writing about it don’t seem to
    have much of a problem with it. And actually I have only shown the tip of the
    iceberg here. Take a look, for instance, at the list of operations on the website
    [Projective Geometric Algebra.org](https://projectivegeometricalgebra.org/).'
  id: totrans-split-135
  prefs: []
  type: TYPE_NORMAL
  zh: 'None of any of this is necessary if you don’t use mixed-grade multivectors
    and the GP in the first place. And absolutely nobody wants to learn any identies
    involving these things. So that’s another complaint: **there are way too many
    confusing definitions required when you base everything on the geometric product**.
    I have to imagine that every single person who has gone to learn GA has been taken
    aback by this, and by the fact that the people writing about it don’t seem to
    have much of a problem with it. And actually I have only shown the tip of the
    iceberg here. Take a look, for instance, at the list of operations on the website
    [Projective Geometric Algebra.org](https://projectivegeometricalgebra.org/).'
- en: 'To be fair, the proliferation of operations is somewhat a problem in EA also:
    the [Interior Product](/2019/01/27/exterior-4.html), for instance, is fairly awkward
    to use, and like \(\lfloor\) and \(\rfloor\) above, there kinda needs to be two
    versions of it if you want to apply it from either the left or right. But at least
    it is has a fairly elementary interpretation of a simpler operation in the algebra,
    as the adjoint of the wedge product under the inner product. And there are other
    operations that show up, like the Meet \(\vee\) which is dual to the wedge product.
    But GA has all of these *plus* its extra unnecessary stuff.'
  id: totrans-split-136
  prefs: []
  type: TYPE_NORMAL
  zh: 'To be fair, the proliferation of operations is somewhat a problem in EA also:
    the [内积](/2019/01/27/exterior-4.html), for instance, is fairly awkward to use,
    and like \(\lfloor\) and \(\rfloor\) above, there kinda needs to be two versions
    of it if you want to apply it from either the left or right. But at least it has
    a fairly elementary interpretation of a simpler operation in the algebra, as the
    adjoint of the wedge product under the inner product. And there are other operations
    that show up, like the Meet \(\vee\) which is dual to the wedge product. But GA
    has all of these *plus* its extra unnecessary stuff.'
- en: 'More generally I think it is better construct all of these operations directly
    from the tensor algebra. I suspect that the “right way” (inasmuch as that phrase
    means anything) to think about vector algebra is to think of the two fundamental
    operations as being (1) the tensor product \(\b{a} \o \b{b}\) and (2) the dot
    product/trace \(\b{a} \cdot \b{b}\). Everything else is really constructed from
    these, and despite [what people will say](https://youtu.be/htYh-Tq7ZBI?t=1411),
    it is actually rather intuitive that the product of \((a_x \b{x} + a_y \b{y})(b_x
    \b{x} + b_y \b{y})\) would be \(a_x b_x \b{xx} + a_x b_y \b{xy} + a_y b_x \b{yx}
    + a_y b_y \b{yy}\). Or at least, it is certainly more intuitive than the geometric
    product. It is weird *at first* that multiplying two vectors would make a rank-\(2\)
    tensor, but it is not really different from the fact that multiplying two scalars
    with one unit each gives a scalar with two units: \(5 \text{m} \cdot 3 \text{s}
    = 15 \text{ m}\cdot\text{s}\). ^(True, it is not invertible, but it shouldn’t
    be: it’s a very generic operation whose inverse is not a single value. If you
    produce a version of vector multiplication that *is* invertible, you have definitely
    erased information somewhere to make that possible, so it is certainly not the
    “true” meaning of vector multiplication.)'
  id: totrans-split-137
  prefs: []
  type: TYPE_NORMAL
  zh: 'More generally I think it is better construct all of these operations directly
    from the tensor algebra. I suspect that the “right way” (inasmuch as that phrase
    means anything) to think about vector algebra is to think of the two fundamental
    operations as being (1) the tensor product \(\b{a} \o \b{b}\) and (2) the dot
    product/trace \(\b{a} \cdot \b{b}\). Everything else is really constructed from
    these, and despite [what people will say](https://youtu.be/htYh-Tq7ZBI?t=1411),
    it is actually rather intuitive that the product of \((a_x \b{x} + a_y \b{y})(b_x
    \b{x} + b_y \b{y})\) would be \(a_x b_x \b{xx} + a_x b_y \b{xy} + a_y b_x \b{yx}
    + a_y b_y \b{yy}\). Or at least, it is certainly more intuitive than the geometric
    product. It is weird *at first* that multiplying two vectors would make a rank-\(2\)
    tensor, but it is not really different from the fact that multiplying two scalars
    with one unit each gives a scalar with two units: \(5 \text{m} \cdot 3 \text{s}
    = 15 \text{ m}\cdot\text{s}\). ^(True, it is not invertible, but it shouldn’t
    be: it’s a very generic operation whose inverse is not a single value. If you
    produce a version of vector multiplication that *is* invertible, you have definitely
    erased information somewhere to make that possible, so it is certainly not the
    “true” meaning of vector multiplication.)'
- en: 'Anyway, if you start with the tensor product, then your pedagogical task is
    to explain why anybody would then go and invent the exterior product from that,
    but that isn’t too bad: in some sense the dot product asks “what happens if you
    multiply two vectors and ignore the terms that aren’t parallel?” and then the
    wedge product asks “What happens if you multiply two vectors and ignore the terms
    that are parallel?”. Those are at least philosophical constructions, and although
    they’re not completely satisfying, they do pretty well.'
  id: totrans-split-138
  prefs: []
  type: TYPE_NORMAL
  zh: 不管怎样，如果你从张量积开始，那么你的教学任务就是解释为什么会有人从中发明外积，但这并不太糟糕：在某种意义上，点积问的是“如果你乘以两个向量并忽略不平行的项会发生什么？”，然后外积问的是“如果你乘以两个向量并忽略平行的项会发生什么？”。这些至少是哲学上的构造，虽然它们并不完全令人满意，但它们表现得相当好。
- en: '* * *'
  id: totrans-split-139
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Weird Associativity
  id: totrans-split-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 奇怪的结合律
- en: 'Here’s an objection I’ve never seen elsewhere: **geometric product’s associativity
    is actually really awkward for doing basic linear algebra**.'
  id: totrans-split-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个我从未在其他地方见过的异议：**几何乘积的结合性对于进行基本线性代数实际上是非常笨拙的**。
- en: A geometric algebra is what you get when you take the tensor algebra on basis
    vectors \(\{\b{x}, \b{y}, \ldots \}\) and assert that \(\b{xx} = 1\) and \(\b{xy}
    = -\b{yx}\) everywhere (so, quotienting by relations of those forms)^(. (Or in
    other metric signatures, that \(\b{xx} = Q(x,x)\) or whatever.) The geometric
    product itself is what the tensor product \(\o\) becomes under this mapping. Naturally
    it is associative because \(\o\) is:)
  id: totrans-split-142
  prefs: []
  type: TYPE_NORMAL
  zh: 几何代数是当你取基础矢量 \(\{\b{x}, \b{y}, \ldots \}\) 上的张量代数，并且在所有地方断言 \(\b{xx} = 1\) 和
    \(\b{xy} = -\b{yx}\)（因此，通过这些形式的关系取商）^(。（或者在其他度量签名中，\(\b{xx} = Q(x,x)\) 或其他）。几何乘积本身就是在这种映射下张量积
    \(\o\) 变成的东西。它自然是可结合的，因为 \(\o\) 是 :)
- en: \[(\b{ab})(\b{c}) = \b{a}(\b{bc}) = \b{abc}\]
  id: totrans-split-143
  prefs: []
  type: TYPE_NORMAL
  zh: \[(\b{ab})(\b{c}) = \b{a}(\b{bc}) = \b{abc}\]
- en: 'But this definition is actually really awkward. Look what it does to the “squares””
    of the multivectors:'
  id: totrans-split-144
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这个定义实际上真的很笨拙。看看它对多重矢量的“平方”做了什么：
- en: \[\begin{aligned} (1)(1) &= 1 \\ (\b{x})(\b{x}) &= 1 \\ (\b{xy})(\b{xy}) &=
    -1 \\ (\b{xyz})(\b{xyz}) &= -1 \\ (\b{wxyz})(\b{wxyz}) &= 1 \end{aligned}\]
  id: totrans-split-145
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{aligned} (1)(1) &= 1 \\ (\b{x})(\b{x}) &= 1 \\ (\b{xy})(\b{xy}) &=
    -1 \\ (\b{xyz})(\b{xyz}) &= -1 \\ (\b{wxyz})(\b{wxyz}) &= 1 \end{aligned}\]
- en: 'What is going on? Well, every time you switch the position of two args, you
    get a minus sign, and… the pattern is weird. You know what would work *way better*
    than that? If the product operated left-to-right, like tensor contraction i.e.
    the dot product already does:'
  id: totrans-split-146
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？嗯，每次你交换两个参数的位置时，你会得到一个负号，而且……这个模式很奇怪。你知道什么会比那更好很多吗？如果乘积从左到右操作，就像张量收缩，即点积已经做的那样：
- en: \[\begin{aligned} (1) \cdot (1) &= 1 \\ (\b{x}) \cdot (\b{x}) &= 1 \\ (\b{xy})
    \cdot (\b{xy}) &= 1 \\ (\b{xyz}) \cdot (\b{xyz}) &= 1 \\ (\b{wxyz}) \cdot (\b{wxyz})
    &= 1 \end{aligned}\]
  id: totrans-split-147
  prefs: []
  type: TYPE_NORMAL
  zh: \[\begin{aligned} (1) \cdot (1) &= 1 \\ (\b{x}) \cdot (\b{x}) &= 1 \\ (\b{xy})
    \cdot (\b{xy}) &= 1 \\ (\b{xyz}) \cdot (\b{xyz}) &= 1 \\ (\b{wxyz}) \cdot (\b{wxyz})
    &= 1 \end{aligned}\]
- en: 'But if you made the geometric product operate left-to-right, it doesn’t work,
    because the wedge product part actually *does* care about the ordering. That’s
    how it works in regular exterior algebra already: the dot product and wedge product
    are different operations that associate differently; the dot product is left-to-right
    while the wedge product associates. So you end up making a choice between two
    conventions for your algebra:'
  id: totrans-split-148
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果你让几何乘积从左到右操作，它就行不通了，因为楔积部分实际上确实在意顺序。这就是普通外代数中的工作方式：点积和楔积是不同的操作，它们的结合方式也不同；点积是从左到右，而楔积是结合的。因此，你最终要在你的代数中做出两种约定之间的选择：
- en: Make every basis multivector have norm \(1\), so that they all work according
    to basic linear algebra in intuitive ways, for instance projecting components
    out of a bivector with \(\b{B} \cdot (\b{x} \^ \b{y}) = B_{xy}\). Then add in
    some operators to implement the things that have to square to \(-1\), such as
    rotation operators \(R_{xy}^2 = -I\). Or,
  id: totrans-split-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让每个基础多重矢量的模为 \(1\)，这样它们都能按照基本线性代数的直觉方式工作，例如通过与双矢量投影的运算来从双矢量中去除分量 \(\b{B} \cdot
    (\b{x} \^ \b{y}) = B_{xy}\)。然后添加一些运算符来实现那些必须平方为 \(-1\) 的事物，比如旋转算符 \(R_{xy}^2 =
    -I\)。或者，
- en: Let basis multivectors square to \(\pm 1\) using the weirdy-associating geometric
    product, and then add more operations to the algebra that recover the idea of
    multivectors squaring to \(+1\) so you can do basic things like projecting bivectors
    onto their basis vectors \(\b{B} \cdot (\b{x} \^ \b{y}) \? -B_{xy}\) again.
  id: totrans-split-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To me (1) sounds way better. Let linear algebra work like it should and just
    add in the parts you need to make operators that compose differently. Don’t break
    linear algebra just to make it look more like complex numbers!
  id: totrans-split-151
  prefs: []
  type: TYPE_NORMAL
- en: And really, some of GA’s definitions of things in terms of the GP work *better*
    if you use left-to-right contraction. For example the weird minus sign in the
    rotation \(e^{(\b{x \^ y} )\theta} (\b{x}) = \b{x} \cos \theta - \b{y} \sin \theta\)
    up above goes away if \(\b{xy}(\b{x}) = \b{y}\). The definition of the cross product
    in terms of wedge product becomes \(\b{a} \times \b{b} = I \cdot (\b{a} \^ \b{b})\)
    instead of \(-I (\b{a} \b{b})\).
  id: totrans-split-152
  prefs: []
  type: TYPE_NORMAL
- en: The way GA recovers the standard multivector inner product is with the “reversion
    operator”, which looks like
  id: totrans-split-153
  prefs: []
  type: TYPE_NORMAL
- en: \[A^{\dagger} = \< A \>_0 + \<A\>_1 - \<A\>_2 - \<A\>_3 + \<A\>_4 + \ldots\]
  id: totrans-split-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Which just means that it reverses the order of vectors in a product:'
  id: totrans-split-155
  prefs: []
  type: TYPE_NORMAL
- en: \[(\b{xyz})^{\dagger} = \b{zyx} = - \b{xyz}\]
  id: totrans-split-156
  prefs: []
  type: TYPE_NORMAL
- en: Such that the “standard” dot product of two multivectors (the one that returns
    \(1\) if they are the basis element) is implemented as
  id: totrans-split-157
  prefs: []
  type: TYPE_NORMAL
- en: \[(\b{xyz}) \cdot (\b{xyz}) = (\b{xyz})^{\dagger} (\b{xyz}) = 1\]
  id: totrans-split-158
  prefs: []
  type: TYPE_NORMAL
- en: It seems to me that they defined their operation to associate in the wrong way
    and then have had to construct this operation to undo the mistake.
  id: totrans-split-159
  prefs: []
  type: TYPE_NORMAL
- en: 'Incidentally, reversion is basically a generalization of complex conjugation.
    GA likes the way that the GP associates because it preserves the “square root
    of \(-1\)” behavior of complex numbers and quaternions: \(i^2 = j^2 = k^2 = -1\).
    Then reversion is used to construct the vector norm again, which for complex numbers
    and quaternions is implemented with complex conjugation: \(\| a \|^2 = \bar{a}
    a = (a_x - a_y i) (a_x + a_y i) = a_x^2 + a_y^2\). I find it strange. It’s hard
    to just say that complex conjugation is not an important operation, but it’s also
    hard to say why it’s so important—that is, I can’t see a great philosophical argument
    for it. It is not an operation we really “want” to be using if we’re trying to
    make geometry simple and intuitive.'
  id: totrans-split-160
  prefs: []
  type: TYPE_NORMAL
- en: I think once again the problem is the conflationg of “vectors” and “operators
    on vectors”. Vectors themselves, or any multivectors, ought to have have normal
    norms that square to \(1\). Operators on vectors, such as rotations and reflections,
    can square to whatever they need to square to; naturally \(R_{xy}^2 = -I\), which,
    fine, write as \(-1\) if you want to use a Clifford Algebra to represent it, and
    implement a version of complex-conjugation to extend this to your mixed-grade
    operators. But don’t go around telling people that for some reason bivectors that
    represent units of surface area *also* square to \(-1\), because that’s crazy.
  id: totrans-split-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为问题再次出在把“向量”和“向量上的运算符”混为一谈。向量本身，或者任何多向量，应该具有正常的范数，其平方为 \(1\)。向量的运算符，如旋转和反射，可以有任何需要的平方；自然地
    \(R_{xy}^2 = -I\)，可以写作 \(-1\)，如果你想用克利福德代数来表示它，并实现一个复数共轭来将其扩展到你的混合等级运算符中。但是不要告诉别人，某种程度上表示单位面积的双向量也平方为
    \(-1\)，因为那太疯狂了。
- en: '* * *'
  id: totrans-split-162
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Vector Division
  id: totrans-split-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向量除法
- en: 'One other thing that GA emphasizes from early on is the fact that most of the
    time you can divide by vectors and (usually) multivectors:'
  id: totrans-split-164
  prefs: []
  type: TYPE_NORMAL
  zh: GA 从早期开始强调的另一件事情是，大多数时候你可以除以向量和（通常）多向量：
- en: \[\b{v}^{-1} = \frac{\b{v}}{\|\b{v} \|^2}\]
  id: totrans-split-165
  prefs: []
  type: TYPE_NORMAL
  zh: \[\b{v}^{-1} = \frac{\b{v}}{\|\b{v} \|^2}\]
- en: 'This is another one of the properties of complex numbers and quaternions that
    it attempts to extend to all vectorial objects. It almost makes sense: *if* you
    are treating all multivectors as operators on other multivectors under multiplication,
    then naturally they have an inverse (if they are not an implementation of a projection)
    which is given by something that looks like division. I’m fine with that part.
    My objection is just that blurring the distinction between the multivectors and
    operators in the first place is weird, so inverting them is weird also. If you
    describe this as “inverting a vector”, it is mysterious and weird. If you describe
    it as “inverting an operator (which is implemented as a vector in this particular
    algebra)” it is completely intuitive. So just do that!'
  id: totrans-split-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这是复数和四元数的另一个特性，试图将其扩展到所有向量对象。它几乎有道理：*如果*你把所有多向量视为在乘法下作用于其他多向量的运算符，那么它们自然有一个逆（如果它们不是投影的实现），其逆由类似于除法的东西给出。我对这一点很满意。我的异议仅在于在首先混淆多向量和运算符之间的区别时，反转它们也很奇怪。如果你把这描述为“反转一个向量”，那就很神秘和奇怪。如果你把它描述为“反转一个运算符（在这个特定代数中实现为向量）”，那就完全直观。所以就这样做吧！
- en: 'For instance a rotation operator \(R_{xy}: \b{v} \mapsto \b{v} \cdot (\b{x}
    \^ \b{y})\) has inverse \(R^{-1}_{xy}\), which is of course a rotation in the
    same plane with the opposite orientation, hence implemented as \(R^{-1}_{xy} =
    R_{yx} = R_{-xy}\). Meanwhile the inverse of \(\b{x} \^ \b{y}\) under the dot
    product is the object \((\b{x} \^ \b{y})/\|\b{x} \^ \b{y}\|^2\). Etc. This perspective
    seems a lot more orderly and sensible to me, and it makes it completely clear
    how each inverse object should work with no magic.'
  id: totrans-split-167
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，旋转算子 \(R_{xy}: \b{v} \mapsto \b{v} \cdot (\b{x} \^ \b{y})\) 的逆 \(R^{-1}_{xy}\)，当然是在相同平面中具有相反方向的旋转，因此实现为
    \(R^{-1}_{xy} = R_{yx} = R_{-xy}\)。与此同时，在点乘下 \(\b{x} \^ \b{y}\) 的逆是对象 \((\b{x}
    \^ \b{y})/\|\b{x} \^ \b{y}\|^2\)。等等。从我的角度来看，这个视角显得更有条理和合理，并且清楚地说明了每个逆对象应该如何运作，没有任何魔法。'
- en: 'I will say that at least one type of vector division shows up all over math.
    It is basically part of the operation of “projection”:'
  id: totrans-split-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以说，至少有一种向量除法在数学中随处可见。它基本上是“投影”操作的一部分：
- en: \[(\b{v} \cdot \b{a}^{-1}) \b{a} = (\frac{\b{v} \cdot \b{a}}{\| \b{a} \|^2})
    \b{a} = \text{proj}_{\b{a}}(\b{v})\]
  id: totrans-split-169
  prefs: []
  type: TYPE_NORMAL
  zh: \[(\b{v} \cdot \b{a}^{-1}) \b{a} = (\frac{\b{v} \cdot \b{a}}{\| \b{a} \|^2})
    \b{a} = \text{proj}_{\b{a}}(\b{v})\]
- en: 'It might seem weird to call this “division” since it does not exactly invert
    a particular multiplication operation. But I think it is a good *generalization*
    of division. In particular it has the correct behavior if the vectors are parallel,
    because \((a \b{x}) \cdot (b \b{x})^{-1} = a/b\), and in other cases its behavior
    is fairly easy to interpret: basically it divides the parallel parts and drops
    the non-parallel parts. (In other metrics there are also some concerns about zero-divisors,
    but whatever, just don’t try to invert those.)'
  id: totrans-split-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这称为“除法”，尽管它并不完全是某种乘法操作的倒数，可能会感觉有些奇怪。但我认为这是对除法的一个很好*泛化*。特别是在向量平行时，它的行为是正确的，因为
    \((a \b{x}) \cdot (b \b{x})^{-1} = a/b\)，而在其他情况下，它的行为相当容易解释：基本上它会除以平行部分并丢弃非平行部分。（在其他度量中也有一些关于零除数的问题，但无论如何，不要试图求其逆。）
- en: 'Of course anything you might do with the \(\b{a}^{-1}\) notation you can also
    do without it,, but I think it’s rather elegant how it takes care of handling
    the factors of \(\| \b{a} \|\) for you. For instance it gives a neat way to factor
    a vector \(\b{v}\) into components along an orthogonal set of vectors \(\{\b{a},
    \b{b}, \b{c}\}\) even if they are not unit vectors:'
  id: totrans-split-171
  prefs: []
  type: TYPE_NORMAL
- en: \[\b{v} = (\b{v} \cdot \b{a}^{-1}) \b{a} + (\b{v} \cdot \b{b}^{-1}) \b{b} +
    (\b{v} \cdot \b{c}^{-1}) \b{c}\]
  id: totrans-split-172
  prefs: []
  type: TYPE_NORMAL
- en: Which may as well be written as
  id: totrans-split-173
  prefs: []
  type: TYPE_NORMAL
- en: \[\b{v} = v_a \b{a} + v_b \b{b} + v_c \b{c}\]
  id: totrans-split-174
  prefs: []
  type: TYPE_NORMAL
- en: By using this “vector division” instead of just a regular dot product, we cancel
    out the magnitude of the \(\{ \b{a}, \b{b}, \b{c} \}\) elegantly. In a way this
    is treating \(\{ \b{a}, \b{b}, \b{c} \}\) as a matrix \(\text{diag}(a,b,c)\) in
    a certain basis, then inverting it to get \(\text{diag}(a^{-1}, b^{-1}, c^{-1})\)
    in the same basis. (Of course, this only works due to the fact that the three
    vectors are orthogonal; otherwise you would get cross terms.)
  id: totrans-split-175
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, I am just trying to make the case that GA’s notion of vector division
    is not on its own necessarily a bad idea. The baisc construction shows up a lot
    in vector algebra, and if you are writing your operators as multivectors of course
    it is meaningful to invert them. But it gets confusing when you start conflating
    operators nad primitives and doing a bunch of algebra on the primitives.”Inverting
    a vector” is basically not meaningful, while “inverting a translation” is, and
    pretending like they are the same is pedagogically and philosophically unsound.
    But it seems to me like a perfectly sound interpretation is waiting just a few
    steps away.
  id: totrans-split-176
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-177
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Summary
  id: totrans-split-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I have given a lot of reasons why I think GA is problematic: the Geometric
    Product is a bad operation for most purposes. It really implements operator composition
    and is not a very fundamental or intuitive thing. Using a Clifford Algebra to
    implement geometry is an implementation detail, appropriate for some problems
    but not for general understandings of vector algebra and all of geometry. Giving
    it first-class status and then bizarrely acting like *that is not weird* is weird
    and alienating to people who can see through this trick.'
  id: totrans-split-179
  prefs: []
  type: TYPE_NORMAL
- en: 'Nor should we be trying to make everything look more like complex numbers and
    quaternions. Those are already weird and confusing; we should be moving away from
    them! Don’t call the geometric product “the” way to multiply vectors. Stop fixating
    on the geometric product or on some particular \(Cl_{p,q,r}\) that solves everything
    with a bunch of funky formula for basic stuff. Just teach wedge products and operators
    and keep it simple; stick to the good parts! Treat the Clifford Algebras as what
    they are: implementations of the compositions of particular operations in a particular
    notation. Not a replacement for the rest of geometry.'
  id: totrans-split-180
  prefs: []
  type: TYPE_NORMAL
- en: So for the time being I have to reject GA as a thing that I identify with. Fortunately,
    it is a philosophy, not a mathematical theory, so it’s easy to reject. That’s
    why when I write blog posts about the same basic ideas, and which align with the
    same basic philosophy of recasting mathematics in a more geometric and multivectorial
    form, I use the phrase “Exterior Algebra” instead.
  id: totrans-split-181
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在这段时间里，我必须拒绝将GA视为我所认同的东西。幸运的是，它是一种哲学，而不是数学理论，所以很容易拒绝。这就是为什么当我写博客文章关于相同基本思想，并且与重新构建数学在更几何和多向量形式上的基本哲学一致时，我使用短语“外代数”代替。
- en: That I said, I really do think there’s a lot more to discover here. I’m convinced
    that there’s some unifying theory of vector algebra that will tie this all together
    with a bow, and I’m hoping someone finds it, preferably soon. Among other things
    it will explain exactly why the geometric product *does* work, when it does, and
    also why so many other formulas end up looking suggestive and interesting and
    imply that for instance we can sometimes divide and multiply vectors like they’re
    numbers in a bunch of cases. When it does come along maybe we can call it “Geometric
    Algebra” again; it’s a good name. Or maybe “Geometric Algebra 2.0”, or “New Geometric
    Algebra”, or “Geometrical Algebra”. Or maybe we drag the name “Clifford Algebra”
    down out of the clouds and make it accessible to everyone. Whatever you want!
    But in the meantime, I’m not interested in using the name GA, because I think
    that name is attached to a bunch of bad ideas. The geometric product, its associated
    ontology, and the culture around it… are just mucking everything up. Thanks.
  id: totrans-split-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我说，我确实认为这里还有很多要发现的地方。我深信，有一个统一的向量代数理论将把这一切用一个蝴蝶结系在一起，我希望有人能找到它，最好是很快。除此之外，它将准确地解释为什么几何乘积*确实*有效，以及为什么许多其他公式最终看起来充满启发和有趣，并意味着例如在许多情况下我们有时可以像处理数字一样分割和乘除向量。当它确实出现时，也许我们可以再次称之为“几何代数”；这是一个好名字。或者可能是“几何代数
    2.0”，或者“新几何代数”，或者“几何代数”。或者我们可以将“克利福德代数”这个名称从云端拉下来，使其对每个人都可接受。无论你想要什么！但与此同时，我对使用GA这个名字不感兴趣，因为我认为这个名字与一堆不好的想法联系在一起。几何乘积，它的相关本体论以及围绕它的文化……只是搞乱了一切。谢谢。
