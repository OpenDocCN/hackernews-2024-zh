- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:48:04'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Helix
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://helix-editor.com/news/release-24-03-highlights/](https://helix-editor.com/news/release-24-03-highlights/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Release 24.03 Highlights
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 30 March 2024
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: The Helix 24.03 release has arrived! First, a very big *thank you* to everyone
    who made this release possible. This release saw changes from 125 contributors.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: New to Helix? Helix is a modal text editor with built-in support for multiple
    selections, Language Server Protocol (LSP), tree-sitter, and experimental support
    for Debug Adapter Protocol (DAP).
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: Let's check out this release's highlights.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: Amp-like jumping
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jumping features are popular in the (Neo)Vim plugin space and there are even
    plugins to add the same functionality to other tools like browsers. They allow
    you to move your selection efficiently across even large parts of the view, like
    you could by clicking with a mouse, but by entering "labels" instead. 24.03 introduces
    jumping commands inspired by the [Amp editor](https://github.com/jmacdonald/amp)'s
    [jump mode](https://amp.rs/docs/usage/#jump-mode). Press `gw` to add the jump
    labels and then enter one of the labels to jump to the word under that label.
    Using `gw` in select mode (`v`) extends the selection.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: In the past, Helix has only been able to toggle line comments like `//` and
    `#` and languages like OCaml have been left with workarounds like a "line" comment
    token of `(*`. In 24.03 Helix can now toggle block comments as well. Use `C-c`
    or `<space>c` to smartly add or remove line or block comments around the current
    selection based on the language's comment token configuration, `<space>c` to toggle
    block comments around the current selection, or `<space><A-c>` to toggle only
    line comments on the current line.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: Improvements to tree-sitter injections
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Helix uses [`tree-sitter`](https://github.com/tree-sitter/tree-sitter) incremental
    parsing for syntax highlighting, textobjects, indentation and some motions and
    commands. 24.03 improves how we handle *[injections](https://tree-sitter.github.io/tree-sitter/syntax-highlighting#language-injection)*
    - a powerful tree-sitter feature for parsing documents with multiple languages.
    For example you might have JavaScript, CSS or other languages within a `<script>`
    or `<style>` tag in HTML. The HTML parser doesn't need to know how to parse all
    of these languages. Instead it can *inject* JavaScript or CSS parsers to handle
    the `<script>` or `<style>` tag contents.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: One of these improvements is to the `:tree-sitter-subtree` command that displays
    an S-expression of the syntax tree under the cursor. 24.03 shows the injection
    layer under the selection instead of only the root layer. For example in this
    asciicast we now show the syntax tree for the JavaScript parts of the document
    while in the past we only showed the HTML part of the tree.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: The other big improvement is to the tree-sitter motions. `A-o` (alt + o) expands
    the selection to the parent node of the syntax tree node covered by the current
    selection. `A-i` shrinks to the child node and `A-n` and `A-p` go to the *n*ext
    and *p*revious nodes, respectively. Previously these commands only worked on the
    root layer (for example HTML in the asciicast) but they now find the injection
    layer that contains the selection and move along that layer's syntax tree. Internally
    we organize injection layers into a tree-like structure so that these motions
    can switch layers when needed.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: Stay tuned for future changes that improve injections, like finding textobjects
    within injected content.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: Internal improvements
  id: totrans-split-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 24.03 also saw major internal improvements. The first comes from a new "event
    system" - a system built around Tokio channels and tasks that allows different
    parts of the Helix codebase to communicate with one another. The event system
    also adds generic ways to debounce and run tasks in background threads so we can
    prevent locking up the UI. Some parts of the code base have already been migrated
    to the event system like LSP completion and signature-help. In 24.03 you'll notice
    that LSP completion doesn't automatically pop up after just navigating around
    in insert mode, for example with arrow keys. It's now hooked into document changes
    instead, so it can smartly pop up when you start changing a document rather than
    every time the editor goes idle.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: The other major improvement to be excited for is the general replacement of
    the `regex` crate with [`regex-cursor`](https://github.com/pascalkuthe/regex-cursor),
    a streaming regex implementation compatible with [`ropey`](https://github.com/cessen/ropey),
    the rope crate we use to represent all documents. `regex-cursor` is capable of
    running on *discontiguous strings* - input that may not be collocated in memory.
    In a rope, different parts of the document might be stored separately internally.
    To use the `regex` API we needed to convert slices of the document to a regular
    Rust `String`, duplicating the memory footprint of that slice of the document.
    `regex-cursor` operates on the chunks of the rope instead, which greatly improves
    efficiency.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up
  id: totrans-split-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As always, this is just the highlights from the 24.03 release. Check out the
    full [changelog](https://github.com/helix-editor/helix/blob/master/CHANGELOG.md#2404-2024-03-30)
    for the details.
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: Come chat about usage and development questions in the [Matrix space](https://matrix.to/#/#helix-community:matrix.org)
    and follow along with Helix's development in the [GitHub repository](https://github.com/helix-editor/helix/).
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
