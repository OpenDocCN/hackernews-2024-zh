- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 'category: 未分类'
- en: 'date: 2024-05-29 12:40:51'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'date: 2024-05-29 12:40:51'
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Elixir''s Impact: Shaping the Evolution of Erlang • Francesco Cesarini & Andrea
    Leopardi'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Elixir的影响：塑造Erlang的演进 • Francesco Cesarini和Andrea Leopardi
- en: 来源：[https://goto.buzzsprout.com/1714721/14674925](https://goto.buzzsprout.com/1714721/14674925)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://goto.buzzsprout.com/1714721/14674925](https://goto.buzzsprout.com/1714721/14674925)
- en: '**Intro**'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**介绍**'
- en: 'Andrea Leopardi: Hey, everyone. Welcome to another episode of GOTO Unscripted
    that we''re in Copenhagen at GOTO Copenhagen 2023\. I''m Andrea Leopardi. I''m
    from Italy. I''m a member of the Elixir team. Elixir is a functional language
    that runs on the Erlang virtual machine, and I''m here with Francesco Cesarini.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：大家好。欢迎来到哥本哈根GOTO Copenhagen 2023的另一期GOTO Unscripted节目。我是Andrea
    Leopardi，来自意大利，是Elixir团队的一员。Elixir是一种运行在Erlang虚拟机上的函数式语言，今天我在这里与Francesco Cesarini一起。
- en: 'Francesco Cesarini: So, I''m Francesco Cesarini. I''m the founder and technical
    director at Erlang Solutions. I have been working with Erlang Ecosystem since
    the mid-''90s. Very fortunate to have seen a programming language become an ecosystem
    of languages, and I think that''s probably what we''re gonna talk about today,
    right?'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：我是Francesco Cesarini。我是Erlang Solutions的创始人和技术总监。自90年代中期以来，我一直在Erlang生态系统中工作。能够见证一门编程语言成为语言生态系统，我感到非常幸运。我想这可能是我们今天要讨论的内容，对吧？
- en: 'Andrea Leopardi: Francesco and I live very close to each other.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：Francesco和我住得非常近。
- en: '**The Expansion of the Erlang Ecosystem**'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Erlang生态系统的扩展**'
- en: 'Andrea Leopardi: We''ve never met in Italy, only through conferences, various
    conferences, but yeah. He''s been involved with Erlang a lot longer than I have.
    I came into the Elixir generation, yeah. So, how was it to see this, like, ecosystem
    grow or, like, this small language I guess grow?'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：我们在意大利从未见过面，只是通过各种会议，各种会议认识的，但是，是的。他参与Erlang的时间比我长得多。我加入了Elixir的一代，是的。那么，看到这个生态系统的扩展，或者说，这个小语言的成长是怎样的？
- en: 'Francesco Cesarini: It was really interesting. I mean, the first language on
    the BEAM came about...I discovered it had been written, it was called [inaudible
    00:01:17]. I heard about it at the Open Source Conference in Portland in 2008\.
    And so, when we ran our first conference in America, we invited Tony to come in
    and present it. It was interesting looking at how, you know, he''d taken a Ruby-like
    syntax and then applied it to Erlang running on the BEAM, which is the prevalent
    virtual machine on which we run everything today. And then from there, soon after
    Lisp Flavored Erlang came about with Robert Virding, Efene by Mariano Guerra.
    And so, there were a lot of Prologue, you know, got ported. So, there were a lot
    of languages that came about, and some were even being used in production.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：这真的很有趣。我是说，BEAM上的第一门语言出现了……我发现它已经被写出来了，它叫做[inaudible 00:01:17]。我在2008年的波特兰开源大会上听说了它。因此，当我们在美国举办第一次会议时，我们邀请Tony前来演讲。看他如何将类似Ruby的语法应用于运行在BEAM上的Erlang，而今天我们运行的所有东西都是在这个主要的虚拟机上。然后，很快Lisp
    Flavored Erlang由Robert Virding和Mariano Guerra创造了Efene。因此，有很多Prologue，你知道，被移植了。因此，出现了许多语言，甚至有些被用于生产中。
- en: But we never kind of realized it had become an ecosystem of languages probably
    until 2014 when we were in San Francisco, and we had for the first time at the
    Erlang factory dedicated a whole track to Elixir. It was still in the early days.
    I think it was the year the first Elixir Comp happened, so I think something like
    140 people including Dave Thomas's dog. I was walking with Garrett Smith and we
    were discussing this new phenomenon called Elixir and excited about what was happening
    and how Elixir was opening up the door to whole new communities of programmers.
    And in that conversation, it kind of transpired, you know, Garrett came up, "Well,
    yeah, Erlang's becoming now an ecosystem of languages," and that's when it clicked.
    That's exactly what happened with Java. That's exactly what happened. NET. And
    the same was happening with Erlang, and yeah, it's been amazing to see. And you
    look at it today, I think there are over 35 languages running on the BEAM, which
    is impressive. You know, not all of these are used in production, many are experimental.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们直到2014年在旧金山时，第一次在厄朗工厂专门为Elixir设立了一个完整的跟踪，我们才意识到它已经成为一种语言生态系统。那时还只是初期阶段。我记得那是第一次举办Elixir
    Comp的年份，大约有140人参加，包括戴夫·托马斯的狗在内。当时我和加勒特·史密斯一起散步，我们讨论着这种名为Elixir的新现象，对正在发生的事情感到兴奋，以及Elixir如何向程序员社区敞开了大门。在那次谈话中，我们意识到，你知道的，加勒特提出了一个观点：“是的，厄朗现在正在成为一种语言生态系统”，这时一切就豁然开朗了。这就是Java发生的事情，完全是这样。NET也是如此。而厄朗也在经历同样的过程，看到这一切真是令人惊叹。今天看来，我认为在BEAM上运行的语言超过35种，这非常令人印象深刻。你知道，并非所有这些语言都用于生产，很多还在试验阶段。
- en: '**The Flavors of Erlang**'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**厄朗的风味**'
- en: 'Andrea Leopardi: And it''s interesting, I was speaking with Sam Aaron from
    Sonic Pi earlier and he was talking about differences between Java and Closure
    being a lot more than differences between, for example, Erlang and Elixir. And
    I think that''s...do you feel that''s true that, like, in...and the languages
    on the BEAM are much...while there are many flavors of languages on the BEAM and
    some are statically typed, some, like, have different flavored syntaxes like Lisp,
    or they look like Prologue, they look like Lisp, or they look sort of like Ruby.
    Do you feel like the difference...? My feeling is that the differences are like...'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 安德里亚·莱奥帕迪：而且有趣的是，我之前和音乐编程语言Sonic Pi的Sam Aaron交谈时，他谈到Java和Clojure之间的差异远远大于例如厄朗和Elixir之间的差异。我认为这是……你是否认为在……而在BEAM上的语言之间，尽管有许多不同的风格，一些是静态类型的，一些像Lisp，或者看起来像Prolog，或者看起来有点像Ruby。你感觉这些差异……？我的感觉是这些差异就像……
- en: 'Francesco Cesarini: I agree. They''re not...the differences aren''t major,
    but my view is that Erlang...they got a lot of things right when they invented
    Erlang when they created Erlang. They spent probably three years prototyping a
    certain domain of the problem, you know, the problem domain of scalable, fully
    tolerant, soft real-time systems. You know, first looking at all existing languages,
    languages being used in the industry back in the ''80s and then from there using
    a virtual machine implementing a prologue. So by the time they started creating
    the first virtual machine written in C, they''d come so far in these prototyping
    activities that they streamlined and created the language with the bare bones
    and bare necessities.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 弗朗切斯科·切萨里尼：我同意。它们并不……差异并不是很大，但我认为厄朗……当他们发明厄朗，创造厄朗时，他们做对了很多事情。他们花了大约三年的时间来原型化一个特定领域的问题，你知道，可扩展、完全容错、软实时系统的问题域。首先看看所有已存在的语言，80年代工业中正在使用的语言，然后从那里使用一个实现Prolog的虚拟机。因此，当他们开始创建用C编写的第一个虚拟机时，他们在这些原型活动中取得了很大进展，他们简化并创建了这门语言，仅仅是最基本和最必要的部分。
- en: If you ask the different co-inventors of Erlang what they contributed, you know,
    Mike Williams once told me, "Oh, I spent most of my time convincing Joe and Robert
    that even though this was a cool language feature, we didn't need it because didn't
    add any value." And, you know, these design and prototype activities, they looked
    at different constructs which they tested, and if this construct added value and
    reduced the code base and made the task of building these telecom systems easier,
    they kept it. If it didn't, they removed it. And so, as a result, I think Erlang
    became a very compact language that was fit for purpose. And so as a result, I
    think all the language is written on top of the BEAM, you know, get all of those
    features and then add their flavors to it. Accidentally looked at the T-shirt
    I got.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你问 Erlang 的不同共同发明者他们的贡献是什么，你知道的，Mike Williams 曾经告诉我，“哦，我大部分时间都在说服 Joe 和 Robert，即使这是一个很酷的语言特性，我们也不需要它，因为它没有增加任何价值。”这些设计和原型活动，他们看了不同的构造，测试了它们，如果这个构造增加了价值，减少了代码量，并使建设这些电信系统的任务更容易，他们就保留了它。如果没有，他们就移除了。因此，作为结果，我认为
    Erlang 成为了一种非常紧凑的、适合其用途的语言。因此，我认为所有基于 BEAM 的语言，你知道的，都得到了所有这些特性，并且为其增加了各自的风味。无意间看了我得到的
    T 恤。
- en: 'Andrea Leopardi: Which flavor of Erlang is your favorite? This is very small.
    I was wondering though, do you think that these similarities between these languages
    are also due...at least that''s also how I feel in part, but also because Erlang
    is really hard to extend? Like, it''s not...like, the basic data structures in
    Erlang, for example, are very set. Like, it''s just those. And if you look at
    things like, for example, queues in Erlang, they''re implemented as, like, on
    top of existing data structures doubles and lists, right? Or if you look at Elixir,
    they have to be implemented on top of maps. They''re like something that compiled
    time time-checked, but they have to be implemented on top of maps. Do you think
    that''s...?'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：你最喜欢的 Erlang 口味是哪种？这个问题很小。但是我在想，你认为这些语言之间的相似性也是由于...至少我部分感觉是这样，还因为
    Erlang 确实很难扩展？比如说，它不像其他语言一样，Erlang 的基本数据结构非常固定。如果你看看像是 Erlang 中的队列，它们是基于现有的数据结构
    double 和 list 实现的，对吧？或者你看看 Elixir，它们必须基于 maps 实现。它们在编译时进行检查，但是必须基于 maps 实现。你认为这是...？
- en: 'Francesco Cesarini: I mean, everything is possible even with Erlang. But when
    the language inventors go out and create a programming language, they''re out
    to solve a particular problem. And I think, you know, so the problems they''re
    trying to solve dictates the features which they need. I mean, if you look at
    macros, for example, they exist in Erlang, but they''re made with...you know,
    they''re very well hidden and they''re not accessible to everyone. So, they''re
    very hard to use and implement. And that was a conscious decision because they
    didn''t want the language to be extendable. I think one of the problems they were
    trying to solve was the cost of maintenance. They were trying to reduce maintenance
    and operational costs in systems, which they did very, very successfully with
    the toolings and the hooks, introspection hooks you''ve got into the VM. And again,
    everything, you know, we were being able to all, all the systems we''ve been able
    to solve, it''s rare we''ve gone in and said, you know, we wish we had this or
    that. Maybe some libraries might have been missing, but not language features
    because keeping it simple meant you could do things with a few lines of code on
    top of it if you needed it.'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：我的意思是，使用 Erlang 你可以做任何事情。但是当语言的发明者们去创建一个编程语言时，他们是为了解决特定的问题。我认为，你知道的，他们试图解决的问题决定了他们需要的特性。比如说，如果你看宏，它们在
    Erlang 中是存在的，但是它们被隐藏得非常好，不是每个人都能访问。因此，它们使用起来和实现起来都非常困难。这是一个有意的决定，因为他们不想让语言变得可扩展。我认为他们试图解决的问题之一是维护成本。他们试图通过工具和
    VM 中的检查点来降低系统的维护和运营成本，这一点他们非常成功。再说一遍，你知道的，我们能够解决所有系统的问题，很少有人说，你知道的，我们希望有这个或者那个。也许有些库可能缺失，但不是语言特性，因为保持简单意味着你可以在其之上用几行代码实现你需要的东西。
- en: 'Andrea Leopardi: A super interesting thing that comes to mind is that maps,
    for example, are a recent Erlang feature, right? And they now feel like a really
    necessary language feature.'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：一个非常有趣的事情是，比如说 maps，是最近的 Erlang 特性，对吧？现在它们感觉像是一种非常必要的语言特性。
- en: 'Francesco Cesarini: Absolutely. I mean, maps were first presented, I believe,
    at the Erlang User Conference by Richard O''Keefe, and what eventually became
    maps in 2000 but it probably took a decade before they made it into the language.'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 'Francesco Cesarini: 绝对。我是说，我相信地图最初是由理查德·奥基夫在爱立信用户大会上首次介绍的，而在 2000 年才最终成为地图，但可能还需要十年才能将它们引入语言中。'
- en: 'Andrea Leopardi: Because I remember it was around the time Elixir was becoming
    1.0 that they made it to OTPR like 17 maybe is like...'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 'Andrea Leopardi: 因为我记得大约在 Elixir 变成 1.0 的时候它们才进入 OTPR，比如说 17 可能是...'
- en: 'Francesco Cesarini: Correct. Yeah. Correct. And again, this is Ericsson, you
    know, Ericsson is a benevolent dictator and that''s the reality is when you''re
    dealing with open source and they''re incredibly conservative over new features
    because they add to the language. After all, if they add something, they need
    to support and maintain it.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 'Francesco Cesarini: 对的。是的。而且，这是爱立信，你知道，爱立信是一个仁慈的独裁者，这就是现实，当你在处理开源时，他们对新功能非常保守，因为它们会增加语言的复杂性。毕竟，如果他们添加了什么，他们需要支持和维护它。'
- en: 'Andrea Leopardi: For decades.'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 'Andrea Leopardi: 几十年了。'
- en: 'Francesco Cesarini: And not only that, but everything they do needs to be backward
    compatible. Because there are tens of millions of lines of coding in production.
    You make something that isn''t backward compatible, you break the build and upgrading
    will take...yeah, can take years. We''ve worked on projects where they forked
    the BEAM and to get the code base back on the latest version of the BEAM, you
    know, 3, 4 years later, in some cases, it took 6 to 12 months of work and we''ve
    seen this on multiple occasions.'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 'Francesco Cesarini: 而且不仅如此，他们所做的每一件事都需要向后兼容。因为在生产中有数千万行的代码。如果你做了什么不向后兼容的东西，你会破坏构建过程，升级可能需要...是的，可能需要几年时间。我们曾经在项目上工作过，他们分叉了
    BEAM，并且在几年后，有时候需要 6 到 12 个月的工作来将代码库恢复到 BEAM 的最新版本，我们在多个场合见过这种情况。'
- en: 'Andrea Leopardi: The thing I like though is that I have a wish list of things
    that would go into Erlang. I think maybe the biggest one would be structs because
    the interoperability would be nice. Like the fact...'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'Andrea Leopardi: 不过我喜欢的是，我有一个希望列表，里面有一些可能会进入 Erlang 的东西。我认为可能最大的一个是结构体，因为它们的互操作性会很好。就像事实上...'
- en: 'Francesco Cesarini: I think structs is exactly what is stopping the ease of
    calling Elixir libraries from Erlang.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 'Francesco Cesarini: 我认为结构体正是阻碍从 Erlang 调用 Elixir 库变得简单的原因。'
- en: 'Andrea Leopardi: Yes, because you have to do some esoteric-looking stuff to
    get them to work.'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 'Andrea Leopardi: 是的，因为你必须做一些看起来神秘的事情才能让它们工作。'
- en: 'Francesco Cesarini: Exactly. And it is one of the gating issues. So, you know,
    there are conversations ongoing, and one of the missing possibilities is to add
    structure to the language for compatibility issues. I mean, going back to the
    very first ElixirCon, if I remember Jose saying, oh, we''ve got access to all
    of the libraries written in Erlang, which is decades of work of open source libraries,
    which we can use from Elixir, and the opposite isn''t...you know, you don''t have
    the opposite from Erlang. And it''s payback time, so yeah, adding structure would
    be...you know, that would be one of the huge benefits from it.'
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 'Francesco Cesarini: 没错。这是其中一个限制性问题。所以，你知道，有一些讨论正在进行，其中一个缺失的可能性是为了兼容性问题向语言添加结构。我是说，回到第一个
    ElixirCon，如果我没记错的话，约瑟曾经说过，哦，我们可以访问所有以 Erlang 编写的库，这些库已经存在了几十年的开源库，我们可以从 Elixir
    中使用，而反过来却不是...你知道，你没有从 Erlang 那里得到相反的东西。现在是回报的时候了，所以是的，添加结构将会是...你知道，这将是一个巨大的好处。'
- en: 'Andrea Leopardi: I think so. And there is such like a central, like Elixir
    seems to have developed around structs a lot. It''s very...you see them all over
    the place, extremely idiomatic, and it would be nice to see them in Erlang core
    because you could probably significantly optimize tagging this struct for example.
    After all, we have to use this little construct that takes memory and all these
    structures that we have in the system, and it would be nice to have it in the
    BEAM because that would probably change.'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 'Andrea Leopardi: 我也这么认为。而且有这样一个中心，就像 Elixir 似乎围绕结构体大量发展。这非常...你在各个地方都可以看到它们，非常符合习惯，如果能看到它们在
    Erlang 核心中会很好，因为你可能可以显著优化例如标记这个结构体。毕竟，我们必须使用这个小构造，它占用内存，而我们系统中的所有这些结构都应该在 BEAM
    中，因为这可能会改变。'
- en: 'Francesco Cesarini: Absolutely. Absolutely.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 'Francesco Cesarini: 绝对。完全正确。'
- en: 'Andrea Leopardi: So, that''s very interesting.'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'Andrea Leopardi: 所以，这非常有趣。'
- en: 'Francesco Cesarini: As a side note, Robert Virding added structs to Lisp Flavored
    Erlang, which is...yeah, one of the many languages is a Lisp implementation running
    on the BEAM. And so, yeah, that now allows us to call all the Elixir libraries
    completely seamlessly.'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：顺便说一句，Robert Virding 在 Lisp Flavored Erlang 中添加了结构体，这是...是的，BEAM
    上运行的 Lisp 实现之一。因此，现在我们可以完全无缝地调用所有的 Elixir 库。
- en: 'Andrea Leopardi: I''m curious if Gleam has structures. Gleam is a statically
    typed language that''s compiled via Rust though, like the Gleam compiler''s reading
    Rust and it generates Erlang by code or AST, I don''t know. But I wonder if it
    has structs and I wonder if it...I mean, I would bet that it has, like, records.
    It would be interesting to know if they actually can get away with not having
    them tagged because it''s a static type language that you can probably do the
    checking.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：我很好奇 Gleam 是否有结构体。Gleam 是一种通过 Rust 编译的静态类型语言，尽管像 Gleam 编译器读取
    Rust 并通过代码或 AST 生成 Erlang，但我不知道。但我想知道它是否有结构体，以及我在想它是否...我的意思是，我敢打赌它有，比如记录。知道它们实际上是否可以不标记它们是一件很有趣的事，因为它是一种静态类型语言，你可能可以进行检查。
- en: 'Francesco Cesarini: It''s a good point. I don''t know...'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：这是个好问题。我不知道...
- en: 'Andrea Leopardi: But one thing that I''ve noticed in Erlang that''s very exciting
    is that I do feel like it sometimes it can be hard to extend Erlang, the VM itself,
    which is probably for the best, right? Like, it''s a very intricate VM with, like,
    lots of...it''s a big VM, right? It''s a very smart VM, like, with the scheduling
    and the process and the garbage collection has lots of features, and so, like,
    it would be hard, I think, to make it extensible in any significant way when you
    go and touch, like, the depth of the VM. But recently it''s been...like, the releases
    of ODP have been exciting. They''ve added a lot of stuff in the last, just even
    the last two or three years. Being able to call gen servers I think this is OTP
    25 or 26, like very recent, like being able to do asynchronous calls to gen server
    and, like, check for the response later. All this stuff is, like, getting into
    core and that''s awesome because it allows us to build a lot of these, like, lower-level
    abstractions for ourselves.'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：但我在 Erlang 中注意到的一件非常令人兴奋的事情是，我有时候觉得很难扩展 Erlang VM 本身，这可能是最好的，对吧？像它是一个非常复杂的
    VM，有很多...它是一个庞大的 VM，对吧？它是一个非常智能的 VM，具有调度、进程和垃圾回收的许多功能，所以我认为，要使它在任何重要的方式上具有可扩展性可能是很困难的，当你去触及
    VM 的深度时。但最近...像 ODP 的发布就令人兴奋。在过去的两三年中，他们添加了很多东西。我认为能够调用 gen servers，我想这是 OTP 25
    或 26，最近的版本，能够做到异步调用 gen server，并稍后检查响应。所有这些东西都像是进入了核心，这太棒了，因为它允许我们为自己构建许多这些底层抽象。
- en: 'Francesco Cesarini: That is correct.'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：是的，没错。
- en: 'Andrea Leopardi: I''m a big fan.'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：我是一个大粉丝。
- en: '**Challenges in Erlang Development**'
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Erlang 开发中的挑战**'
- en: 'Francesco Cesarini: If you look at an actual BEAM itself, I think the biggest
    challenge in extending and adding things to it is ensuring they don''t disrupt
    the soft real-time properties of the scheduler, which is I think their biggest
    fear.'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：如果你看一下实际的 BEAM 本身，我认为在扩展和添加东西到其中最大的挑战是确保它们不会破坏调度程序的软实时特性，这可能是他们最担心的。
- en: 'Andrea Leopardi: Interestingly, you mentioned this because like one of the
    people that are familiar with the BEAM and Elixir, and Erlang and Elixir, probably
    know this, but one of the...maybe the only shared functional data structure, like
    pure functional data structure lives in shared memories is binaries, right? Like
    bigger, binaries larger than 64 bytes, so they go into, like, a shared memory
    area, so they didn''t have to move them around the process, you just move references.
    And that''s the only data structure that I know of that''s completely shared across.
    Well, now they have Atomics encounters, but...'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：有趣的是，你提到这个，因为像是了解 BEAM 和 Elixir 的人，也许知道这一点，但其中一个...也许是唯一一个共享的函数数据结构，像是纯函数数据结构存在于共享内存中的是二进制，对吧？比如大于
    64 字节的二进制，它们进入一个共享内存区域，所以不需要在进程之间移动它们，只需移动引用。这是我所知道的唯一一个完全跨...好吧，现在它们有原子计数器，但...
- en: 'Francesco Cesarini: ETS tables are another that has destructive operations.'
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：ETS 表是另一个具有破坏性操作的例子。
- en: 'Andrea Leopardi: Right. But ETS tables are sort of like shared memory errors,
    right? But it''s treated as an impure. You can modify its state, right?'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：对。但 ETS 表有点像共享内存错误，对吧？但它被视为不纯的。你可以修改它的状态，对吧？
- en: 'Francesco Cesarini: Correct'
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：正确。
- en: 'Andrea Leopardi: And the stuff with the binaries is not like that. You can''t
    modify the selected binary. And it''s so interesting to me that even just binaries
    which are very pragmatic to be in a, like, separate memory space after 64 bytes
    and all that, they cause many problems because, like, it turns out that like a
    lot of memory leaks in Erlang applications are from parsers copying binaries or,
    like, taking big binaries and splitting them up.'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：而且二进制文件的问题不是这样的。你不能修改选定的二进制文件。对我来说很有趣的是，即使是二进制文件，它们非常实用，放在64字节后的独立内存空间，它们也会引起很多问题，因为原来的问题是，像Erlang应用程序中的许多内存泄漏都是由于解析器复制二进制文件或者像这样，拆分大二进制文件而导致的。
- en: 'Francesco Cesarini: Memory fragmentation.'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：内存碎片化。
- en: 'Andrea Leopardi: Exactly. And, like, creating copies of these, like, smaller
    banners or having, like, memory leaks where you have reference to the binary that
    you don''t clear up or the process doesn''t die or this or that, and then you
    have a memory leak because, like, the binary never gets garbage collected. And
    it''s interesting because you notice that, like, even one day the structure that
    it''s built-in still bubbles up to problems for users in some specific use cases.
    After all, like, it''s hard to do this. Like, the BEAM has wonderful properties
    of software priming per process garbage collection and all this stuff, but they''re
    hard to maintain, you know? Maybe some of it is...'
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：确实如此。像是创建这些小横幅的副本或者像你有引用到永远不会清理或者进程不会死亡或这个或那个二进制文件的内存泄漏一样，然后你有一个内存泄漏因为这样，像二进制文件永远不会被垃圾回收。有趣的是你注意到，即使是结构的一天的构建，它仍然会对用户在某些特定用例中的问题有影响。毕竟，像这样做是困难的。就像BEAM拥有每个进程软件优化的优秀特性和所有这些东西，但是它们很难维护，你知道吗？也许其中的一部分是……
- en: 'Francesco Cesarini: I think yeah, you''ve answered your question as to why
    I think Ericsson has to be very conservative and change. I mean, just the JIT
    compiler, which, you know, that I mean was at least three, four years in the making.
    Extensive research, but when that came out, it allowed WhatsApp to reduce its
    server needs by around 30%. That was when WhatsApp went out and tweeted about
    it thanking Ericsson for it. And that, in turn, you know, translates to huge energy
    savings, which is something that we''re seeing.'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：我认为是的，你已经回答了为什么我认为爱立信必须非常保守地进行改变的问题。我是说，即使是即时编译器，你知道的，至少花了三四年时间才制定完成。进行了广泛的研究，但当它推出时，它使WhatsApp能够减少约30%的服务器需求。这就是WhatsApp发推特感谢爱立信的原因。这反过来又转化为巨大的能源节约，这是我们正在看到的。
- en: 'Andrea Leopardi: It''s interesting that Elixir itself, it''s not in a spot
    where we''re not adding much to it either, right? Like, I think arguably more
    stuff is coming up into Erlang in the past, like, a couple of years maybe because
    Elixir has been very...Elixir''s ecosystem is expanding incredibly. Like, all
    the machine learning stuff is nuts. Like, the live view stuff is nuts but…'
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：有趣的是Elixir本身，它不处于我们没有为其添加很多东西的位置。像我认为可能是过去几年来更多的东西进入了Erlang，因为Elixir一直非常……Elixir的生态系统扩展得令人难以置信。像所有的机器学习的东西都是疯狂的。像实时视图的东西是疯狂的，但是……
- en: 'Francesco Cesarini: But this is the positive. A good part of it is also the
    positive influence Elixir is having back on Erlang.'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：但这也是积极的一面。Elixir对Erlang的积极影响也是其中一部分。
- en: 'Andrea Leopardi: Because people are realizing that a lot of things you have
    to solve in Erlang. Like, for example, Atomics. All these new features that have
    been added a persistent term, those are, like, fantastic features that have been
    added in just the last couple or two or three years, I think, in Erlang. And they,
    you just cannot do them. Like, something like the persistent term, which is like
    this shared persistent storage gets this copied tool processes, very fast to read,
    very painful to write, it''s awesome, like, for so many use cases, but you just
    can''t do it in...like, you have to do it at the VM level, right? You can''t do
    it at the...So, it''s awesome that these features are, like, popping up in Erlang
    because, like, from Elixir, we just get them for free, and from...you know, in
    Erlang, you can just use them. You can use them in Gleam, you can use them. That''s
    the benefit, obviously, of adding features to Erlang.'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：因为人们意识到，在Erlang中有很多事情是你必须解决的。像，例如，原子操作。所有这些新增的特性像持久术语，这些都是，像，最近两三年内添加的一些了不起的特性，在Erlang中。你简直无法做到它们。像，像这种共享的持久存储被复制到进程的工具，读取非常快，写入非常痛苦，这太棒了，适用于如此多的用例，但你不能在...像，你必须在VM级别上做它，对吧？你不能在...所以，这些特性在Erlang中弹出来真是太棒了，因为，像，从Elixir中，我们只需免费得到它们，而从...你知道，在Erlang中，你可以随意使用它们。你可以在Gleam中使用它们。这显然是在Erlang中添加特性的好处。
- en: 'Francesco Cesarini: That''s amusing if you say, oh, nothing''s happening with
    Erlang. No, there''s a lot of work happening. You know, Ericsson is doing an amazing
    job at driving things forward, but it''s not so much the language, it''s the libraries
    where the effort is being put in and on the virtual machine. And...'
  id: totrans-split-52
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：如果你说，哦，Erlang没有什么事情在发生。不，有很多工作正在进行。你知道，Ericsson正在驱动事物前进做了很棒的工作，但这不是语言的问题，而是在库和虚拟机上花费的努力。
- en: 'Andrea Leopardi: I think that''s tricky because, like, the work that the Erlang
    team is putting into Erlang is low-level. Like, something like persistent term
    or something like Atomic or counters, these are low-level stuff that usually you
    need...99% I think of use cases are for, like, library authors or OTP itself.'
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：我认为这有些棘手，因为，像，Erlang团队正在为Erlang做的工作是低级的。像持久术语或原子计数器之类的东西，这些都是低级的东西，通常你需要...我认为99%的用例是为了，像，库作者或OTP本身。
- en: 'Francesco Cesarini: Exactly. And the user doesn''t see it.'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：确实。而用户看不到这一点。
- en: 'Andrea Leopardi: Are mostly used for gen server calls and, like, they''re used
    by OTP itself, right? So, you don''t get to...And the advancements and the news
    that are happening in Elixir are...like, they seem more exciting because they''re,
    like, much easier. It''s like, oh, there''s a new machine learning library that
    lets you, like, pick up models from [inaudible 00:18:47] and run your machine
    learning models. Like, that''s something I can touch very easily that can get
    easily to users or live new features in live view. They get right into the hands
    of users. And instead, the work that Erlang is doing is just as important and
    just as prolific, right? Like, they''re doing a lot of stuff. It''s just that
    it''s so within maybe the depth...'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：主要用于gen server调用，像，它们被OTP本身使用，对吧？所以，你不会去...而在Elixir中正在发生的进展和新闻...像，它们似乎更令人兴奋，因为它们更容易。就像，哦，有一个新的机器学习库，让你可以，像，从[不可听见00:18:47]中挑选模型并运行你的机器学习模型。像，这是我可以很容易接触到的东西，可以很容易地到达用户或在live
    view中添加新功能。它们直接到达用户手中。而相反，Erlang正在做的工作同样重要，同样多产，对吧？像，他们正在做很多事情。只是它可能更深奥一些...
- en: 'Francesco Cesarini: It''s much more low-level. It''s a low level where you
    need to have...'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：它更多地是低级的。这是一个你需要完全控制正在发生的事情的低级领域...
- en: 'Andrea Leopardi: So, it''s harder to get it to users, you know?'
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：所以，要将它传递给用户更难，你知道？
- en: 'Francesco Cesarini: It''s where you need to have full control over what''s
    going on.'
  id: totrans-split-58
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：这是你需要对正在发生的事情有完全控制的地方。
- en: 'Andrea Leopardi: But it does have an impact. I mean, for libraries, I''ve used
    counters, I''ve used Atomics, I''ve used new features, like, and they''ve been
    awesome.'
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：但这确实有影响。我是说，对于库来说，我用过计数器，我用过原子操作，我用过新特性，像，它们都很棒。
- en: '**Match Specifications in Erlang**'
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**Erlang 中的匹配规范**'
- en: 'Francesco Cesarini: An amazing new feature, which I discovered reading the
    manual pages a couple of weeks ago, is the ability to match specifications. So,
    a match specification, for those of you who don''t know, is a program that provides
    a set of...it''s a term, which consists of a set of variables, a set of logical
    operations you can do on these variables, and then a set of actions. And so, it''s
    a very simple program. It has a very, very small subset of operations and actions
    you can take, and it was originally used for tracing local and global function
    calls in runtime. You know, we''re having to trace, and compile the code, and
    you wanted to turn on or turn off the trace or trigger trace messages when certain
    conditions were met.'
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 弗朗切斯科·塞萨里尼：我几周前阅读手册页面时发现的一个令人惊讶的新功能是匹配规范的能力。所以，匹配规范，对于那些不了解的人来说，是一个提供一组...它是一个术语，由一组变量，一组可以对这些变量进行的逻辑操作，以及一组操作组成。因此，它是一个非常简单的程序。它有一个非常非常小的操作和操作集合，最初用于跟踪运行时的本地和全局函数调用。你知道的，我们必须跟踪，并编译代码，并且当满足某些条件时，你希望打开或关闭跟踪或触发跟踪消息。
- en: So, you know, only if, you know, the first argument to a local call was user
    Andrea Leopardi and the second argument was to have them call home, for example.
    At that level of granularity, you could trigger a trace message. If you knew,
    you know, that was where, you know, you needed to go in and troubleshoot. And,
    you know, this has been extended to message passing, to pattern matching. It's
    just been extended to a large variety of things. It also works on ETS tables.
    It has worked on the ETS table for a while, but, you know. So basically, you know,
    the report, the power of tracing off, kind of, sequential calls to a lot of other
    constructs where, again, you know, a process receives a particular message, you
    trigger, you know, you start tracing, you know?
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你知道的，只有当，你知道的，本地调用的第一个参数是用户安德烈亚·莱奥帕尔迪，第二个参数是让他们回家打电话，例如。在这种细粒度水平上，你可以触发一个跟踪消息。如果你知道的，你知道的，那就是你需要进去并解决问题的地方。而且，你知道的，这已经扩展到消息传递，到模式匹配。它只是被扩展到了很多事情。它也适用于ETS表。它在ETS表上已经运行了一段时间，但是，你知道的。所以基本上，你知道的，这个报告，关闭跟踪的功能，有点像，顺序调用到很多其他构造的地方，再次，你知道的，一个进程接收特定消息，你触发，你知道的，你开始跟踪，你知道的？
- en: 'Andrea Leopardi: It''s a very fast way of, like, matching on stuff and extracting
    information, which is why it''s allowed in ETS tables.'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 安德烈亚·莱奥帕尔迪：这是一种非常快速的方法，比如，匹配一些东西并提取信息，这就是为什么它被允许在ETS表中使用。
- en: 'Francesco Cesarini: It''s not for the faint of heart, especially if you''re
    doing it in a live system. But what is kind of hard to reason and hard to figure
    out bugs. Again, one of the points of Erlang was to reduce operational costs.
    And this reduces the time it takes to troubleshoot systems and find that needle
    in a haystack.'
  id: totrans-split-64
  prefs: []
  type: TYPE_NORMAL
  zh: 弗朗切斯科·塞萨里尼：这对于心脏虚弱的人来说并不容易，特别是如果你在现场系统中这样做。但是在一些很难推理和难以找到的错误中。再次强调，Erlang的一个目标是降低运营成本。这减少了系统故障排除所需的时间，找到那根针。
- en: '**Elixir''s Advances in Compiler Tracing & Machine Learning**'
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**Elixir编译器跟踪与机器学习的进展**'
- en: 'Andrea Leopardi: I think Elixir is doing a...I''m not teaming up with any of
    it, that''s why I allow myself to say it, but it''s doing an amazing job at doing
    something similar with compiler tracing and, like, code diagnostics. There has
    been a ton of work really in the last, I don''t know, year to, like, improve Elixir''s
    lexer and parser and, like, all the code compilers.'
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 安德烈亚·莱奥帕尔迪：我认为Elixir在...我没有和它们中的任何一个合作，这就是为什么我允许自己说这个话，但它正在做一个类似于编译器跟踪和，像，代码诊断的惊人工作。真的在最近，我不知道，一年来，像改进Elixir的词法分析器和解析器以及，像，所有的代码编译器。
- en: 'Francesco Cesarini: So, you''re putting hooks into the code.'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 弗朗切斯科·塞萨里尼：所以，你正在在代码中放钩子。
- en: 'Andrea Leopardi: Everywhere. So, essentially, like, the language servers become
    very precise in doing stuff. Like, now Elixir''s able to, for example, partially
    tokenize strings that are...like, all Elixir codes that have syntax errors so
    that, like, we can point you to the syntax error and where it is, you know, like
    all these tools, and that''s really...like, it makes me think of that because,
    like, that''s, like, really precise tracing at the compilation level, right? And
    like, I''m not involved in any of it, sadly, but I''ll benefit from it, you know.'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 'Andrea Leopardi: 到处都是。所以，基本上，语言服务器变得非常精确地执行任务。比如说，现在 Elixir 能够部分标记那些有语法错误的字符串...
    像，所有那些工具，这真的... 像，让我想到那个，因为，像，这真的是在编译层面上非常精确的追踪，对吧？虽然，遗憾的是我没有参与其中，但我会从中受益的，你知道。'
- en: 'Francesco Cesarini: I imagine when they went in and added line numbers in error
    messages, you know, which...'
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'Francesco Cesarini: 我想象他们加入错误信息中的行号时，你知道，这...'
- en: 'Andrea Leopardi: Elixir, especially with this tooling stuff, can have its compiler
    written mostly in Elixir, right? And a little bit of Erlang, like the compiler
    for Elixir itself, is very high level but very easy to...I''ve always, like, felt
    it''s, like, quite easy to contribute to and it''s quite easy to, like, do bigger
    stuff compared to language, like, where you have a lower level compiler that,
    like, has to take care of, like, optimizations and, like, do multiple more passes.
    Like, Elixir''s compilation passes are less, for example, so you have easier opportunities
    for doing this sort of stuff like tracing compilation, compilation hooks, and
    all this stuff for code diagnostics, so it''s been very interesting.'
  id: totrans-split-70
  prefs: []
  type: TYPE_NORMAL
  zh: 'Andrea Leopardi: 特别是借助这些工具，Elixir 的编译器可以大部分用 Elixir 编写，对吧？然后还有一点点 Erlang，比如说，Elixir
    本身的编译器非常高级，但非常容易... 我一直觉得，像，相对于那些需要处理优化和进行多次通过的低级编译器的语言，比如，Elixir 的编译通过更少，所以你有更容易的机会来做这种追踪编译、编译钩子和所有这些用于代码诊断的东西，所以这真的非常有趣。'
- en: 'Francesco Cesarini: Why don''t you tell us, you know, Elixir is making its
    way into a lot of new verticals. I think one of them is machine learning. Can
    you share a little bit about what''s happening in that space?'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 'Francesco Cesarini: 你知道，Elixir 正在进入许多新的垂直领域。我认为其中之一就是机器学习。你能分享一下在这个领域中正在发生的事情吗？'
- en: 'Andrea Leopardi: I am not involved in that space at all, so always a pinch
    of salt, but essentially we have port...like, the Elixir...Sean Moriarty, in particular,
    has been leading all of this, but the Elixir community has been writing the SLs
    for Elixir that compile to this, like, GPU frameworks. You know, like, I don''t
    know any of them. Like, I''ll embarrass myself, but essentially you can do tons
    of operations in Elixir now. And from that, sort of, was born a whole ecosystem
    of things that you can do now in Elixir-related machine learning. The really interesting
    thing to me is that this is not...it''s not necessarily better than Python as
    far as I understand, for example, because they both compile to, like, GPU instructions.
    Eventually, they use like this Google compilers for GPU instructions and stuff.
    So it''s not necessarily, like, better performance, but the thing that''s been
    interesting is this seems to be one of the first languages to challenge Python''s
    dominance over this space, right?'
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 'Andrea Leopardi: 我完全没有涉足那个领域，所以总是保持谨慎，但基本上我们已经移植... 比如说，Elixir... 尤其是肖恩·莫里亚蒂一直在主导所有这些工作，但是
    Elixir 社区一直在为编译到 GPU 框架的 Elixir 编写 SLs。你知道，就像，我不认识其中任何一个。比如说，我会让自己尴尬，但基本上现在你可以在
    Elixir 中做大量操作。从那里开始，就诞生了一整套与 Elixir 相关的机器学习生态系统。对我来说真正有趣的是，这不是... 就我所了解的情况而言，并不一定比
    Python 更好，因为它们都编译成了 GPU 指令。最终，它们使用这些 Google 编译器来编译 GPU 指令之类的东西。所以不一定像性能更好，但有趣的事情是，这似乎是第一种语言挑战
    Python 在这个领域的主导地位，对吧？'
- en: 'Francesco Cesarini: Well, it focuses on user experience and...'
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 'Francesco Cesarini: 嗯，它专注于用户体验和...'
- en: 'Andrea Leopardi: Exactly, yeah. It looks nice.'
  id: totrans-split-74
  prefs: []
  type: TYPE_NORMAL
  zh: 'Andrea Leopardi: 没错，是的。看起来很不错。'
- en: 'Francesco Cesarini: ...adoptability as they do for machine learning what they''ve
    done for web development in Phoenix, where they''ve reduced the barrier to entry
    where you need to know a little, just, you know, a subset of Elixir to be productive
    using Phoenix and not understand, yeah, anything of what''s happening under the
    hood, right? And, in no time, you''ll deploy the website. If they do the same
    for machine learning, I think it''s gonna open up the doors to a whole new set
    of users.'
  id: totrans-split-75
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：……就像他们在机器学习中做的那样，他们在 Web 开发的 Phoenix 中降低了入门门槛，让你只需要了解 Elixir
    的一部分就能高效地使用 Phoenix，而不用理解底层的任何东西，对吧？很快你就能部署网站。如果他们对机器学习也这样做，我认为这将为一整套新用户打开大门。
- en: 'Andrea Leopardi: There''s a lot of focus... There''s a lot of focus on user
    experience again, like we saw with Phoenix, like we saw with LiveView, like all
    these tools, like we saw with...'
  id: totrans-split-76
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：有很多关注点……仍然关注用户体验，就像我们在 Phoenix 中看到的，像我们在 LiveView 中看到的，像所有这些工具中看到的，像我们看到的……
- en: 'Francesco Cesarini: On Nerves as well.'
  id: totrans-split-77
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：也在 Nerves 上。
- en: 'Andrea Leopardi: Nerves, exactly.'
  id: totrans-split-78
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：Nerves，没错。
- en: 'Francesco Cesarini: So Nerves is the embedded framework used'
  id: totrans-split-79
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：所以 Nerves 是用于嵌入式的框架。
- en: 'Andrea Leopardi: For embedded devices and, like, the same thing, like, very,
    very usable, very user-friendly, and they''re doing the same thing with machine
    learning. And to me, it''s very interesting because, like, you can see that the
    ergonomics make a big difference, right? Like having...even if, like, maybe performance''s
    not gonna be better than Python because they''re gonna compile, like, very similar...I
    don''t know anything. I could be saying, like, total lies here, but like, I think
    that''s how it works. And, you know, it turns out that ergonomics developer experience
    and usability matter to developers, right? I think of this, like, it''s interesting
    this is one of the...from my very limited experience, it seems to be one of the
    very few languages that are challenging Python''s because Python''s like, it''s
    the thing in the machine learning sphere, right? Like, you write Python. And instead,
    like, Elixir is coming up with like, oh, hey, you know, you can write this in
    Elixir too. And it''s very, very interesting to see what that will bring in the
    future. I have no clue. I''m not involved sadly because, I don''t know, I don''t
    do anything with machine learning but...'
  id: totrans-split-80
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：用于嵌入式设备，功能非常强大，非常用户友好，他们也在使用机器学习来进行相同的操作。对我来说，这非常有趣，因为你可以看到人体工学的设计差异，正确吗？就像即使性能可能不会比
    Python 更好，因为它们会编译得非常相似……我什么都不知道。我可能在这里说的是完全的谎言，但我认为就是这样的。你知道，事实证明，人体工学的开发者体验和可用性对开发者来说是很重要的，对吧？我觉得这很有意思，这似乎是少数几种挑战
    Python 的语言之一，因为 Python 就是机器学习领域的代表，对吧？你写 Python。相反，Elixir 正在推出，比如说，你知道，你也可以用 Elixir
    来编写。这非常非常有趣，看看未来会带来什么。我完全不知道。很遗憾我没有参与其中，因为我不知道，我也没有做任何机器学习的事情，但……
- en: 'Francesco Cesarini: What really kind of excites me is the ability to run everything
    in the same memory space. So, you know, if you look at Phoenix and you decide
    to use Python as a backend database, you know, you''d have the web server, you''d
    have your business logic, and your database all in the same memory space, which
    makes it extremely fast. I mean, it''s faster to create dynamic pages and to read
    static pages cached in Redis. So, if you can do the same if the same happens with
    machine learning, then it''s gonna be fantastic.'
  id: totrans-split-81
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：真正让我感兴趣的是在同一内存空间中运行所有内容的能力。所以，你知道，如果你看 Phoenix 并决定使用 Python
    作为后端数据库，你知道，你会有 Web 服务器，你会有你的业务逻辑和你的数据库都在同一个内存空间，这使得它极其快速。我的意思是，创建动态页面的速度比读取 Redis
    缓存的静态页面更快。所以，如果机器学习也能做到同样的事情，那么那将会很棒。
- en: 'Andrea Leopardi: We use a lot of ETS at my job for caching and for, like, responding
    very quickly to requests and, you know, like, we have an endpoint for beginning'
  id: totrans-split-82
  prefs: []
  type: TYPE_NORMAL
  zh: 'Andrea Leopardi: 在我的工作中，我们大量使用   Andrea Leopardi：我们在工作中使用很多 ETS 进行缓存和快速响应请求，而且我们有一个用于开始的端点。'
- en: 'Francesco Cesarini: ETS tables are the Redis on the BEAM. The Redis on the
    BEAM.'
  id: totrans-split-83
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：ETS 表是 BEAM 上的 Redis。BEAM 上的 Redis。
- en: 'Andrea Leopardi: Like half a milliseconds and it just queues requests and then
    we flush them out to...'
  id: totrans-split-84
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：就像半毫秒，它会排队请求，然后我们将其刷新到……
- en: 'Francesco Cesarini: You distributed ETS tables?'
  id: totrans-split-85
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：你分布式了 ETS 表吗？
- en: 'Andrea Leopardi: There''s a lot of tools, very powerful tools.'
  id: totrans-split-86
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：有很多工具，非常强大的工具。
- en: '**Future Vision and Interoperability**'
  id: totrans-split-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**未来愿景与互操作性**'
- en: 'Francesco Cesarini: What''s your view over kind of the future of Erlang, Elixir,
    Gleam, and the ecosystem as a whole?'
  id: totrans-split-88
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：你对 Erlang、Elixir、Gleam 和整个生态系统的未来有什么看法？
- en: 'Andrea Leopardi: Good question. I have no clue. My dream is just that, like,
    they become so interoperable that I can write my libraries in...some libraries
    in Elixir, some libraries in Gleam, some libraries in Erlang, and they just like
    all work together. That''s my dream because, like, I think people are gonna have
    preferences. Erlang is a simpler language, for example, and I think a bunch of...in
    that it has fewer features, strictly speaking. Like, there''s less feature surface,
    so it''s, like, simpler. Gleam has completely different directories, like, you
    know, the static type stuff, and I would like to be able to choose which one I
    want to use for different use cases. Like, I want to write, I don''t know, like
    a compression algorithm, like maybe Gleam is nice because it lets me like do it,
    like, have static types and check all this stuff. I need to write something related
    to, I don''t know, like mingling with protocol stuff. It''s nice to have, like,
    static types.'
  id: totrans-split-89
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：好问题。我完全不知道。我的梦想就是，它们变得如此互操作，以至于我可以在...一些库中写 Elixir，一些库中写 Gleam，一些库中写
    Erlang，并且它们能够像一体化一样工作。这是我的梦想，因为，我认为人们会有偏好。例如，Erlang 是一种更简单的语言，严格来说它的功能更少。像 Gleam
    完全不同，它有完全不同的目录结构，你知道，静态类型等等，我想能够根据不同的用例选择使用哪种语言。比如说，我想写一个压缩算法，也许 Gleam 很合适，因为它让我可以使用静态类型并检查所有这些内容。我需要写一些与协议相关的东西。拥有静态类型真是太好了。
- en: I want to write something that, like, is gonna be complex and I want to write
    in Erlang to keep the feature set simple. I wanna write something that, you know,
    like, uses protocols. I want to be able to use Elixir. So my dream would be to
    have...and also to have a single communal. Like, I wrote a bunch of drivers in
    Elixir, for example, Cassandra already. So, like all this stuff, I would love
    it if people could just use them, you know? Because, like, the Cassandra
  id: totrans-split-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我想写一些复杂的东西，我想用 Erlang 来保持功能集的简洁性。我想写一些使用协议的东西。我想能够使用 Elixir。所以我的梦想是拥有一个...也拥有一个单一的共同体。比如说，我已经用
    Elixir 写了很多驱动程序，比如 Cassandra。所以，我希望人们可以随意使用它们，你知道吗？因为，像 Cassandra
- en: 'Francesco Cesarini: Absolutely. Absolutely. I think interoperability is key.'
  id: totrans-split-91
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：完全正确。绝对正确。我认为互操作性是关键。
- en: 'Andrea Leopardi: I hope, that''s my hope.'
  id: totrans-split-92
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：这是我的希望。
- en: 'Francesco Cesarini: And I completely agree with you. From my point of view,
    I''m seeing, kind of, Erlang, Elixir, and other BEAM languages making their way
    to edge networks, and even out on the IOT devices. And that''s for example, where
    I think, you know, Gleam would take off for the simple reason it''s statically
    typed and it makes the language much more secure.'
  id: totrans-split-93
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：我完全同意你的观点。从我的角度来看，我认为像 Erlang、Elixir 和其他 BEAM 语言正在向边缘网络、甚至
    IoT 设备上迈进。例如，我认为 Gleam 将会起飞的一个简单原因是它是静态类型的，这使得语言更加安全。
- en: 'Andrea Leopardi: You can take off a bunch of stuff from round time because'
  id: totrans-split-94
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：你可以在 round time 上节省大量时间，因为
- en: '**Outro**'
  id: totrans-split-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**结语**'
- en: 'Francesco Cesarini: Exactly. You''re reducing the surface of attack and the
    external surface of attack. But the great thing is that all of these languages
    are interoperable and dependent on each other. I''m hoping they''ll thrive and
    continue growing together. Thanks, Andrea.'
  id: totrans-split-96
  prefs: []
  type: TYPE_NORMAL
  zh: Francesco Cesarini：确实。你在减少攻击面和外部攻击面。但最棒的是，所有这些语言都是互操作的，彼此依赖。我希望它们能够共同繁荣并继续共同成长。谢谢，Andrea。
- en: 'Andrea Leopardi: Thank you.'
  id: totrans-split-97
  prefs: []
  type: TYPE_NORMAL
  zh: Andrea Leopardi：谢谢。
