- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:35:10'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Zig defer Patterns
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://matklad.github.io/2024/03/21/defer-patterns.html](https://matklad.github.io/2024/03/21/defer-patterns.html)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Zig defer Patterns Mar 21, 2024
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A short note about some unexpected usages of Zig’s `defer` statement.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: 'This post assumes that you already know the basics about RAII, `defer` and
    `errdefer`. While discussing the differences between them is not the point, I
    will allow myself one high level comment. I don’t like `defer` as a replacement
    for RAII: after writing Zig for some time, I am relatively confident that humans
    are just not good at not forgetting defers, especially when “optional” ownership
    transfer is at play (i.e, this function takes ownership of an argument, unless
    an error is returned). But defer is good at discouraging RAII oriented programming.
    RAII encourages binding lifetime of resources (such as memory) with lifetimes
    of individual domain objects (such as a `String`). But often, in pursuit of performance
    and small code size, you want to separate the two concerns, and let many domain
    objects to share the single pool of resources. Instead of each individual string
    managing its own allocation, you might want to store the contents of all related
    strings into a single continuously allocated buffer. Because RAII with defer is
    painful, Zig naturally pushes you towards batching your resource acquisition and
    release calls, such that you have far fewer resources than objects in your program.'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: 'But, as I’ve said, this post isn’t about all that. This post is about non-resource-oriented
    usages of `defer`. There’s more to defer than just RAII, it’s a nice little powerful
    construct! This is way to much ado already, so here come the patterns:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '`defer` gives you poor man’s contract programming in the form of'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-11
  prefs: []
  type: TYPE_PRE
- en: 'Real life [example](https://github.com/tigerbeetle/tigerbeetle/blob/73bbc1a32ba2513e369764680350c099fe302285/src/vsr/grid.zig#L298-L309):'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-13
  prefs: []
  type: TYPE_PRE
- en: 'This is basically peak Zig:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
- en: '`errdefer` runs when a function returns an error (e.g., when a `try` fails).
    `unreachable` crashes the program (in `ReleaseSafe`). But `comptime unreachable`
    straight up fails compilation if the compiler tries to generate the corresponding
    runtime code. The three together ensure the absence of error-returning paths.'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s [an example](https://github.com/ziglang/zig/blob/1d82d7987acf7f020bcc6a976f9887a3556ef79c/lib/std/hash_map.zig#L1561-L1584)
    from the standard library, the function to grow a hash map:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
- en: Zig’s error handling mechanism provides only error code (a number) and an error
    trace. This is usually plenty to programmatically handle the error in an application
    and for the operator to debug a failure, but this is decidedly not enough to provide
    a nice report for the end user. However, if you are in a business of reporting
    errors to users, you are likely writing an application, and application might
    get away without propagating extra information about the error to the caller.
    Often, there’s enough context at the point where the error originates in the first
    place to produce a user-facing report right there.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: '[Example:](https://github.com/tigerbeetle/tigerbeetle/blob/73bbc1a32ba2513e369764680350c099fe302285/src/tigerbeetle/benchmark_driver.zig#L158-L163)'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-21
  prefs: []
  type: TYPE_PRE
- en: 'Finally, `defer` can be used as an `i++` of sorts. [For example](https://github.com/tigerbeetle/tigerbeetle/blob/0.15.3/src/lsm/scan_buffer.zig#L97-L102),
    here’s how you can pop an item off a free list:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
