- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 12:43:16'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 12:43:16
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Flatpak builds are not reproducible and why that's a practical problem
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flatpak构建不具备复现性，这是一个实际问题
- en: 来源：[https://ranfdev.com/blog/flatpak-builds-are-not-reproducible/](https://ranfdev.com/blog/flatpak-builds-are-not-reproducible/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://ranfdev.com/blog/flatpak-builds-are-not-reproducible/](https://ranfdev.com/blog/flatpak-builds-are-not-reproducible/)
- en: <hgroup>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: Flatpak builds are not reproducible and why that's a practical problem
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flatpak构建不具备复现性，这是一个实际问题
- en: '6 minutes read. Published: 2022-05-09'
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读时间6分钟。发布日期：2022-05-09
- en: </hgroup>
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: <details class="toc"><summary>Table of contents</summary></details>
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: <details class="toc"><summary>目录</summary></details>
- en: '*Update 2022-05-10*'
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*更新 2022-05-10*'
- en: I've just talked to a flatpak contributor, who gave me more information on the
    topic. Flatpaks *technically* **are reproducible!** All the metadata needed to
    reproduce the build is present **inside** the built package.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我刚刚与一个flatpak的贡献者交谈过，他给了我更多关于这个主题的信息。flatpak在*技术上* **是可以复现的！** 所有重现构建所需的元数据都存在于构建的包中
    **内部**。
- en: there is a lockfile that's generated already and its part of the end build.
    You can find them under /usr/manifest.json and /app/manifest.json for runtime
    and application respectively.
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 已经生成了一个锁定文件，并且是最终构建的一部分。您可以在/runtime下找到它们，位于/usr/manifest.json和/app/manifest.json，分别用于运行时和应用程序。
- en: 'Indeed, these files are fixing the exact commits of the runtime, sdk and other
    dependencies:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这些文件修复了运行时、sdk和其他依赖项的确切提交：
- en: '[PRE0]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Also, they acknowledge everything is not perfect yet, but this is just because
    getting reproducibility everywhere is an hard problem (for everyone). There are
    [issues keeping track of reproducibility status](https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/issues/107)
    and they are also working with other technologies designed to respect archiving
    regulations:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，他们承认并非一切都完美，但这只是因为在所有地方都实现复现性是一个难题（对每个人来说都是）。他们正在跟踪复现性状态的问题，并且还在与设计用于遵守归档法规的其他技术合作：
- en: Buildstream, which we use for the runtimes but its also used for things like
    building endlessos and a lot embedded systems, does better in that regard. Its
    designed to be able to deal with archiving regulations in automotive industry
    for example, which doesn't get much more reproducible than that
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Buildstream，我们用于运行时，但也用于构建endlessos和许多嵌入式系统的工具，在这方面做得更好。它被设计用于能够处理例如汽车行业中的归档法规，这是一种更复现性的方法。
- en: BUT...
  id: totrans-split-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 但是...
- en: While the information to reproduce the build is indeed present inside the built
    package itself, **that information is not committed to the source tree**, which
    **brings the problems I listed below in the original article**. Flatpaks are reproducible,
    but the tooling around them could be improved to get a better developer experience
    when building from source.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然重现构建所需的信息确实存在于构建的包内部，但**这些信息未提交到源代码树**，这就是我在原文中列出的问题。Flatpak是可以复现的，但在构建工具方面仍有改进的空间，以提升开发者的体验。
- en: '* * *'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Introduction
  id: totrans-split-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: 'According to [flatpak.org](https://flatpak.org), "Flatpak is a next-generation
    technology for building and distributing desktop applications on Linux". I believe
    flatpak is becoming the de-facto standard app distribution format: Just open [flathub.org](https://flathub.org)
    to see how many flatpaks are already out there; It has broad distro support and
    it''s completely open source (even server-side); overall, it''s well appreciated
    by both users and developers. I want flatpaks to succeed, but I think they got
    some fundamental things wrong. Fortunately, these things can be fixed.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[flatpak.org](https://flatpak.org)，"Flatpak是一种在Linux上构建和分发桌面应用程序的先进技术"。我相信flatpak正在成为事实上的标准应用程序分发格式：只需打开[flathub.org](https://flathub.org)看看已经有多少flatpak可用；它得到了广泛的发行版支持，完全开源（甚至是服务器端）；总体上，它得到了用户和开发者的高度赞赏。我希望flatpak能够成功，但我认为他们在某些基本事项上搞错了。幸运的是，这些问题是可以解决的。
- en: 'To create a flatpak, as a developer, you need two tools: `flatpak` and `flatpak-builder`.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个flatpak，作为开发者，你需要两个工具：`flatpak` 和 `flatpak-builder`。
- en: '"Flatpak-builder is a tool for building flatpaks from sources."'
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"Flatpak-builder是一个从源代码构建flatpaks的工具。"'
- en: The `flatpak` tool instead is mostly used to install flatpaks and managing flatpak
    repositories.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 而`flatpak`工具则主要用于安装flatpaks和管理flatpak仓库。
- en: The flatpak manifest
  id: totrans-split-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: flatpak清单
- en: 'To package a flatpak app, you need to declare a manifest, a JSON file which
    will be read by `flatpak-builder`. This file must declare every dependency your
    app needs: a runtime (a common software bundle), runtime extensions (common software
    to extend a runtime), and custom dependencies.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要打包flatpak应用程序，您需要声明一个清单，即一个JSON文件，将由`flatpak-builder`读取。此文件必须声明您的应用程序需要的每个依赖项：运行时（一个常见的软件捆绑包）、运行时扩展（用于扩展运行时的常见软件）和自定义依赖项。
- en: 'Let''s see a (simplified) example taken from an application of mine, [Geopard](https://ranfdev.com/projects/geopard):'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个（简化的）例子，来自我的一个应用程序，[Geopard](https://ranfdev.com/projects/geopard)：
- en: '[PRE1]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Problem 1: where should I get the runtime from?'
  id: totrans-split-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题1：我应该从哪里获取运行时？
- en: '`flatpak-builder` will parse the previous manifest and complain... The runtime
    `org.gnome.Sdk` is not installed! Ok... but where should I download the runtime
    from? Flatpak software is downloaded from a repository, but in this case, which
    repository? It''s impossible to tell certainly, but when you are unsure, you should
    always try with `https://flathub.org`, which is the biggest public repository.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`flatpak-builder`将解析先前的清单并抱怨... 运行时`org.gnome.Sdk`未安装！好...但是我应该从哪里下载运行时？Flatpak软件是从存储库下载的，但在这种情况下，哪个存储库？无法确定，但当您不确定时，应始终尝试`https://flathub.org`，这是最大的公共存储库。'
- en: 'Let''s setup the repository and install the other required software (notice,
    we have to do this manually!):'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 建立库并安装其他所需软件（请注意，我们必须手动完成！）：
- en: '[PRE2]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Solution
  id: totrans-split-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'There should be a "repos" field in the manifest, so that people (and tools)
    actually know where to get things from: Note: this field isn''t optional. **A
    manifest without the required repos should be considered invalid**.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 清单中应该有一个“repos”字段，以便人们（和工具）确切知道从哪里获取东西：注意：此字段不是可选的。**没有所需存储库的清单应被视为无效**。
- en: '[PRE3]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Problem 2: what version is it?'
  id: totrans-split-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题2：它的版本是多少？
- en: 'While installing the required runtimes and extensions, we''ve arrived at this
    step:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装所需的运行时和扩展时，我们已经到了这一步：
- en: '[PRE4]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Good question... Which "ref" do I want to use?... I don't know.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 好问题... 我想使用哪个“ref”？... 我不知道。
- en: Solution
  id: totrans-split-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: A ref without a version suffix *must* be considered invalid.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 没有版本后缀的ref *必须* 被视为无效。
- en: 'Invalid:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 无效：
- en: '[PRE5]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Valid:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有效：
- en: '[PRE6]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Problem 3: reproducibility'
  id: totrans-split-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题3：可重现性
- en: 'Since there isn''t enough information to know the needed dependencies, it''s
    clear there''s no reproducibility. The text on the official flatpak website is
    misleading: "Develop and test your application in an environment that’s identical
    to the one users have.". Not even the developers have a consistent dev environment.'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有足够的信息来知道所需的依赖关系，很明显没有可重现性。官方flatpak网站上的文字误导：“在与用户相同的环境中开发和测试您的应用程序。”甚至开发人员都没有一致的开发环境。
- en: Solution
  id: totrans-split-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: 'Once `flatpak-builder` succesfully builds a manifest, it should write the exact
    dependencies it used inside a lockfile. This pattern is common to every package
    manager who cares about reproducibility: Nix, cargo, npm... I understand `flatpak-builder`
    isn''t a package manager, but *something* in the flatpak build chain should create
    the lockfile.'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`flatpak-builder`成功构建清单，它应该将所使用的确切依赖项写入锁定文件。这种模式对于关心可重现性的每个软件包管理器都很常见：Nix、cargo、npm等等...
    我明白`flatpak-builder`不是一个软件包管理器，但是在flatpak构建链中的*某个东西*应该创建锁定文件。
- en: 'I also understand why people may actually *don''t want* to lock their runtime
    to a specific version: if the runtime is locked, it can''t be updated without
    programmer intervention, so apps can''t be automatically rebuilt to get security
    updates. This is a problem, indeed, but that can be easily solved by software
    repositories by simply overriding the lockfile. In this way, developers have reproducible
    debug builds (so they can actually track down bugs) and users can receive security
    updates. It''s still better than what we have now.'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我也明白为什么人们可能实际上*不想*锁定他们的运行时到特定版本：如果运行时被锁定，没有程序员的干预就无法更新，因此应用程序无法自动重建以获取安全更新。这确实是一个问题，但可以通过软件存储库轻松解决，方法是简单地覆盖锁定文件。这样，开发人员就可以获得可重现的调试构建（以便实际上可以追踪错误），而用户可以接收安全更新。这仍然比现在好。
- en: Conclusions
  id: totrans-split-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Those are (conceptually) simple solutions, but I think they can greatly improve
    the flatpak ecosystem. Nix, and Guix, the state of the art package managers, have
    already solved these issues. Flatpak is trying to be both a package manager and
    an app distribution system. The latter part is good, the former part is just...
    bad.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些（概念上）是简单的解决方案，但我认为它们可以极大地改善 Flatpak 生态系统。Nix 和 Guix，这两个最先进的包管理器，已经解决了这些问题。Flatpak
    正在尝试成为既是包管理器又是应用分发系统。后者部分很好，前者部分只是…… 糟糕。
- en: '* * *'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Copyright: Ranfdev 2019-2023'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 版权：Ranfdev 2019-2023
