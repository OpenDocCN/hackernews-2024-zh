- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:43:16'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Flatpak builds are not reproducible and why that's a practical problem
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://ranfdev.com/blog/flatpak-builds-are-not-reproducible/](https://ranfdev.com/blog/flatpak-builds-are-not-reproducible/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <hgroup>
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: Flatpak builds are not reproducible and why that's a practical problem
  id: totrans-split-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '6 minutes read. Published: 2022-05-09'
  id: totrans-split-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: <details class="toc"><summary>Table of contents</summary></details>
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: '*Update 2022-05-10*'
  id: totrans-split-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I've just talked to a flatpak contributor, who gave me more information on the
    topic. Flatpaks *technically* **are reproducible!** All the metadata needed to
    reproduce the build is present **inside** the built package.
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: there is a lockfile that's generated already and its part of the end build.
    You can find them under /usr/manifest.json and /app/manifest.json for runtime
    and application respectively.
  id: totrans-split-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Indeed, these files are fixing the exact commits of the runtime, sdk and other
    dependencies:'
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-split-15
  prefs: []
  type: TYPE_PRE
- en: 'Also, they acknowledge everything is not perfect yet, but this is just because
    getting reproducibility everywhere is an hard problem (for everyone). There are
    [issues keeping track of reproducibility status](https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/issues/107)
    and they are also working with other technologies designed to respect archiving
    regulations:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: Buildstream, which we use for the runtimes but its also used for things like
    building endlessos and a lot embedded systems, does better in that regard. Its
    designed to be able to deal with archiving regulations in automotive industry
    for example, which doesn't get much more reproducible than that
  id: totrans-split-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: BUT...
  id: totrans-split-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While the information to reproduce the build is indeed present inside the built
    package itself, **that information is not committed to the source tree**, which
    **brings the problems I listed below in the original article**. Flatpaks are reproducible,
    but the tooling around them could be improved to get a better developer experience
    when building from source.
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-split-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'According to [flatpak.org](https://flatpak.org), "Flatpak is a next-generation
    technology for building and distributing desktop applications on Linux". I believe
    flatpak is becoming the de-facto standard app distribution format: Just open [flathub.org](https://flathub.org)
    to see how many flatpaks are already out there; It has broad distro support and
    it''s completely open source (even server-side); overall, it''s well appreciated
    by both users and developers. I want flatpaks to succeed, but I think they got
    some fundamental things wrong. Fortunately, these things can be fixed.'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a flatpak, as a developer, you need two tools: `flatpak` and `flatpak-builder`.'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: '"Flatpak-builder is a tool for building flatpaks from sources."'
  id: totrans-split-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The `flatpak` tool instead is mostly used to install flatpaks and managing flatpak
    repositories.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: The flatpak manifest
  id: totrans-split-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To package a flatpak app, you need to declare a manifest, a JSON file which
    will be read by `flatpak-builder`. This file must declare every dependency your
    app needs: a runtime (a common software bundle), runtime extensions (common software
    to extend a runtime), and custom dependencies.'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see a (simplified) example taken from an application of mine, [Geopard](https://ranfdev.com/projects/geopard):'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-split-29
  prefs: []
  type: TYPE_PRE
- en: 'Problem 1: where should I get the runtime from?'
  id: totrans-split-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`flatpak-builder` will parse the previous manifest and complain... The runtime
    `org.gnome.Sdk` is not installed! Ok... but where should I download the runtime
    from? Flatpak software is downloaded from a repository, but in this case, which
    repository? It''s impossible to tell certainly, but when you are unsure, you should
    always try with `https://flathub.org`, which is the biggest public repository.'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s setup the repository and install the other required software (notice,
    we have to do this manually!):'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
- en: Solution
  id: totrans-split-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There should be a "repos" field in the manifest, so that people (and tools)
    actually know where to get things from: Note: this field isn''t optional. **A
    manifest without the required repos should be considered invalid**.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-split-36
  prefs: []
  type: TYPE_PRE
- en: 'Problem 2: what version is it?'
  id: totrans-split-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While installing the required runtimes and extensions, we''ve arrived at this
    step:'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
- en: Good question... Which "ref" do I want to use?... I don't know.
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-split-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A ref without a version suffix *must* be considered invalid.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Invalid:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-split-44
  prefs: []
  type: TYPE_PRE
- en: 'Valid:'
  id: totrans-split-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-split-46
  prefs: []
  type: TYPE_PRE
- en: 'Problem 3: reproducibility'
  id: totrans-split-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since there isn''t enough information to know the needed dependencies, it''s
    clear there''s no reproducibility. The text on the official flatpak website is
    misleading: "Develop and test your application in an environment that’s identical
    to the one users have.". Not even the developers have a consistent dev environment.'
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-split-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once `flatpak-builder` succesfully builds a manifest, it should write the exact
    dependencies it used inside a lockfile. This pattern is common to every package
    manager who cares about reproducibility: Nix, cargo, npm... I understand `flatpak-builder`
    isn''t a package manager, but *something* in the flatpak build chain should create
    the lockfile.'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
- en: 'I also understand why people may actually *don''t want* to lock their runtime
    to a specific version: if the runtime is locked, it can''t be updated without
    programmer intervention, so apps can''t be automatically rebuilt to get security
    updates. This is a problem, indeed, but that can be easily solved by software
    repositories by simply overriding the lockfile. In this way, developers have reproducible
    debug builds (so they can actually track down bugs) and users can receive security
    updates. It''s still better than what we have now.'
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  id: totrans-split-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Those are (conceptually) simple solutions, but I think they can greatly improve
    the flatpak ecosystem. Nix, and Guix, the state of the art package managers, have
    already solved these issues. Flatpak is trying to be both a package manager and
    an app distribution system. The latter part is good, the former part is just...
    bad.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
- en: 'Copyright: Ranfdev 2019-2023'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
