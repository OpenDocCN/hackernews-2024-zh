- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 12:32:59'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 12:32:59
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Fast Virtual Functions: Hacking the VTable for Fun and Profit | by Caleb Leak
    | Medium'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速虚函数：通过黑客方式操作VTable获取乐趣和利润 | 作者：Caleb Leak | Medium
- en: 来源：[https://medium.com/@calebleak/fast-virtual-functions-hacking-the-vtable-for-fun-and-profit-25c36409c5e0](https://medium.com/@calebleak/fast-virtual-functions-hacking-the-vtable-for-fun-and-profit-25c36409c5e0)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://medium.com/@calebleak/fast-virtual-functions-hacking-the-vtable-for-fun-and-profit-25c36409c5e0](https://medium.com/@calebleak/fast-virtual-functions-hacking-the-vtable-for-fun-and-profit-25c36409c5e0)
- en: 'Fast Virtual Functions: Hacking the VTable for Fun and Profit'
  id: totrans-split-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速虚函数：通过黑客方式操作VTable获取乐趣和利润
- en: Virtual functions have clear intrinsic value; using them can make architectures
    significantly more flexible and solve a plethora of design problems.
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: 虚函数具有明显的内在价值；使用它们可以使体系结构更加灵活，并解决大量设计问题。
- en: When it comes to virtual functions(or methods, the terminology distinction isn’t
    fruitful in this context) there are two main schools of thought for performance.
    The first is that they’re slow, always have been, and always will be. Folks of
    this school will tell you that they’re too slow to use in games. The second is
    that they were once slow, but modern compilers and architectures have made them
    efficient. Folks of this school will tell you to use them liberally, even in performance
    critical code, as they’re basically free.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到虚函数（或方法，在这个上下文中术语区别并不重要）时，关于性能有两种主流观点。第一种观点认为它们很慢，一直都是，而且将来也会是。这个学派的人会告诉你，在游戏中使用它们太慢了。第二种观点是，它们曾经很慢，但现代编译器和架构已经使它们变得高效了。这个学派的人会告诉你，应该大量使用它们，即使在性能关键的代码中，因为它们基本上是免费的。
- en: 'So, what’s the truth? The unsurprising answer is: it depends. Depends on what?
    Well, I’m glad you asked. The answer is, like most indirections, it depends mostly
    on the cache and how your application interacts with it. In this article I’ll
    dig into three things (with a focus on C++):'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，真相是什么？毫不奇怪的答案是：取决于情况。取决于什么？好吧，我很高兴你问了。答案是，像大多数间接性操作一样，它主要取决于缓存以及你的应用程序如何与其交互。在本文中，我将深入探讨三件事情（重点关注C++）：
- en: '**How to avoid the performance hit of virtual functions.** I’ll show how you
    can call virtual functions directly and avoid the cost of indirection.'
  id: totrans-split-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**如何避免虚函数的性能损失。** 我将展示如何直接调用虚函数并避免间接调用的成本。'
- en: '**How to make large batches of virtual functions fast**. This a common problem
    in game engines where a scene may have thousands of objects, each with several
    not necessarily unique update functions. If these updates happen at framerate,
    then there will be tens to hundreds of thousands of calls per second.'
  id: totrans-split-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**如何使大批量的虚函数快速执行。** 这是游戏引擎中的常见问题，其中一个场景可能有数千个对象，每个对象都有几个不一定是唯一的更新函数。如果这些更新按帧率发生，那么每秒将会有数以十万计的调用。'
- en: '**How to detect if a virtual function has been overridden.** This is another
    common problem in modern game engines where there’s a plethora of functions to
    override. Unity for example has 64 such overrideable methods (they call them *messages*),
    the majority are no-ops for most objects. The engine can avoid calling them at
    all when this is detected.'
  id: totrans-split-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**如何检测虚函数是否已被覆盖。** 这是现代游戏引擎中的另一个常见问题，在那里有大量要重写的函数。例如，Unity拥有64个这样的可重写方法（它们称之为*消息*），其中大多数对大多数对象来说都是空操作。当检测到这种情况时，引擎可以完全避免调用它们。'
- en: I won’t talk about *why* virtual functions are useful.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会讨论虚函数为何有用。
- en: Understanding virtual functions and VTables
  id: totrans-split-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解虚函数和VTables
- en: Before diving into the performance of virtual functions, I’d like to take a
    moment to look at how virtual functions work. If you’re a virtual function guru,
    feel free to skip this section.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨虚函数性能之前，我想花点时间看看虚函数是如何工作的。如果你是虚函数大师，请随意跳过本节。
- en: 'Let’s start by creating a class hierarchy without virtual functions. We’ll
    create greeters that simply greet people by their given name:'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个没有虚函数的类层次结构开始。我们将创建简单地通过给定名称向人们问候的问候者：
- en: 'The output of this is:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 其输出如下：
- en: '[PRE0]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Poor Alice doesn’t get a proper greeting. Notice how we called the same function
    (at least functions with the same name) on the same object, but got different
    results depending on how we cast it. Why is that?
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 可怜的爱丽丝并没有得到合适的问候。请注意，我们如何在相同对象上调用相同函数（至少是同名函数），但根据我们如何进行强制转换而得到不同的结果。这是为什么？
- en: The compiler has no special knowledge about where data came from. To it, a `GenericGreeter*`
    constructed from `FriendlyGreeter` is the same as one constructed from a `GenericGreeter`,
    so it simply calls the base function.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器对数据的来源没有特殊知识。对于它来说，从`FriendlyGreeter`构造的`GenericGreeter*`和从`GenericGreeter`构造的是相同的，因此它只是调用基础函数。
- en: 'Now let’s do the same thing with virtual functions:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们用虚函数做同样的事情：
- en: 'Now the output is:'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输出是：
- en: '[PRE1]'
  id: totrans-split-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The derived function is now called — somehow the compiler knows to do this.
    It still just has a `GenericGreeter` pointer with no special knowledge of how
    that data was constructed, but now there’s more to this pointer than meets the
    eye.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: 派生函数现在被称为——编译器不知道如何做到这一点。它仍然只是一个具有`GenericGreeter`指针的对象，没有特殊知识来构造数据，但是现在这个指针背后有更多的东西。
- en: Hiding inside `GenericGreeter` now is a pointer to a virtual function table
    or *VTable*. This table is simply a bit of static memory with one or more function
    pointers in it. The memory is static (and therefore pointed to, rather than contained)
    because every instance of a particular class will have the exact same VTable —
    so it’s stored somewhere it can be shared.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`GenericGreeter`内部隐藏着一个指向虚函数表或*VTable*的指针。这个表只是一小段静态内存，里面有一个或多个函数指针。这段内存是静态的（因此被指向而不是包含），因为特定类的每个实例都会有完全相同的VTable
    — 所以它被存储在可以共享的地方。
- en: 'I think this is best illustrated with an example. Here is our same set of greeters,
    but this time we’ll create our own VTables:'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为最好用一个例子来说明。这里是我们相同的一组问候者，但这次我们将创建我们自己的VTables：
- en: 'Again, the output is:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，输出是：
- en: '[PRE2]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And that’s the basics of VTables and virtual functions. With deeper hierarchies
    and multi-inheritance there can be multiple VTables, but they all follow this
    pattern.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是VTables和虚函数的基础。在更深的层次结构和多重继承中，可能会有多个VTable，但它们都遵循这个模式。
- en: Poking at the VTable
  id: totrans-split-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索VTable
- en: We saw in the previous section how VTables work, but we didn’t actually access
    any — not directly. Here we’ll go over locating and making use of the VTable.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中看到了VTables的工作原理，但我们实际上没有直接访问任何VTable。在这里，我们将介绍如何定位和利用VTable。
- en: 'Let’s first extend the example from the previous section to include more than
    one virtual function:'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先扩展上一节的示例，以包含多个虚函数：
- en: 'Now let’s define what the VTable looks like. Note that we’re not implementing
    it ourselves, but simply making a convenient struct to understand it:'
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来定义VTable的样子。请注意，我们不是自己实现它，而只是创建一个方便的结构体来理解它：
- en: 'We’re now ready to play with the VTable — but where is it? Well, it’s hiding
    in plain sight. Any class that declares a new virtual function, not just overrides
    an existing one, gets an implicit pointer to a VTable added along side its member
    variables. By convention, VTable pointers come before all other members of the
    class — a stable convention followed by MSVC, gcc, and Clang. This makes them
    very easy to find. Continuing our example, a function to find a VTable pointer
    is as easy as:'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好操作VTable了——但它在哪里？嗯，它就藏在明处。任何声明新虚函数的类，而不仅仅是覆盖现有虚函数的类，都会在其成员变量旁边隐式添加一个指向VTable的指针。按照惯例，VTable指针在类的所有其他成员变量之前
    — 这是MSVC、gcc和Clang遵循的稳定惯例。这使得它们非常容易找到。继续我们的例子，一个查找VTable指针的函数就像这样简单：
- en: 'It’s worth noting that in this case taking in a `void*` would work instead
    of `GenericGreeter*` but is less robust. A VTable pointer is a member of whatever
    class in the hierarchy makes the VTable, like the example in the last section.
    As such they follow all the typical rules of multiple inheritance and `class WeirdGreeter
    : public Weird, public GenericGreeter {…}` would have all of `Weird`''s members
    *before* all of `GenericGreeter`''s, including the VTable pointer. Of course casting
    to the base type, as the function above does, sidesteps this and is the robust
    way to go.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: '值得注意的是，在这种情况下，使用`void*`代替`GenericGreeter*`也可以，但不够健壮。VTable指针是层次结构中使VTable的类的成员，就像上一节的示例一样。因此，它们遵循多重继承和`class
    WeirdGreeter : public Weird, public GenericGreeter {…}`的所有典型规则，包括VTable指针在`Weird`的所有成员*之前*，而不是在`GenericGreeter`的成员之前，包括VTable指针。当然，像上面的函数一样转换为基础类型是绕过此问题的健壮方法。'
- en: 'Finally, let’s put the pieces together and call a virtual function directly,
    bypassing the dispatch:'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们把所有的部分放在一起，直接调用虚函数，绕过分派：
- en: 'The output of this is:'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出是：
- en: '[PRE3]'
  id: totrans-split-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Only the overridden functions were called!
  id: totrans-split-39
  prefs: []
  type: TYPE_NORMAL
  zh: 只调用了重写的函数！
- en: When are virtual functions slow and how slow are they?
  id: totrans-split-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚函数何时慢以及它们有多慢？
- en: We’ve seen how you can call virtual functions directly, now let’s see why you
    might want to.
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何直接调用虚函数，现在让我们看看为什么你可能想要这样做。
- en: Virtual functions are slow when you have a cache miss looking them up. As we’ll
    see through benchmarks, they can be *very* slow. They can also be very fast when
    used carefully — to the point where it’s impossible to measure the overhead.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当你因为缓存未命中而查找虚函数时，虚函数是很慢的。正如我们将在基准测试中看到的那样，它们可能非常*慢*。当小心使用时，它们也可以非常快速，甚至快到无法测量开销的程度。
- en: 'Let’s setup some tests and see for ourselves. We’ll test several things:'
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置一些测试，亲自看看。我们将测试几个方面：
- en: '**Repeatedly calling a non-virtual member function with caching allowed.**
    This will give us a good performance baseline.'
  id: totrans-split-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**允许缓存的重复调用非虚成员函数。** 这将为我们提供一个良好的性能基准。'
- en: '**Repeatedly calling a virtual member function with caching allowed.** This
    will demonstrate the best, albeit unlikely, case with virtual functions. The same
    virtual function is called repeatedly in a tight loop, so we’d expect the VTable
    pointer, the VTable, and the function code itself to all remain cached.'
  id: totrans-split-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**允许缓存的重复调用虚成员函数。** 这将展示虚函数的最佳（尽管不太可能的）情况。同一个虚函数在紧密循环中被重复调用，因此我们期望 VTable 指针、VTable
    和函数代码本身都保持在缓存中。'
- en: '**Repeatedly calling a non-virtual member function without caching.** We’ll
    explicitly flush the cache to achieve another performance baseline. This will
    be our target performance for non-cached virtual functions.'
  id: totrans-split-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**不允许缓存的重复调用非虚成员函数。** 我们将显式刷新缓存以达到另一个性能基准。这将是我们非缓存虚函数的目标性能。'
- en: '**Repeatedly calling a virtual member function without caching.** This is the
    worst case performance scenario for a virtual function. The VTable pointer, VTable,
    and function code will not be in the cache.'
  id: totrans-split-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**重复调用虚成员函数而不进行缓存。** 这是虚函数性能的最坏情况。VTable 指针、VTable 和函数代码都不会在缓存中。'
- en: '**Repeatedly calling a virtual member function directly without caching.**
    The hope here is that we’ll gain back some of the performance lost by virtual
    functions and be close to that of non-virtual functions.'
  id: totrans-split-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**直接重复调用虚成员函数而不进行缓存。** 这里的希望是，我们将通过虚函数恢复一些性能损失，并接近非虚函数的性能。'
- en: To test this this, we’ll use a small hierarchy of incrementers. Each will add
    its value (a randomly initialized int) to a global variable repeatedly via an
    increment function. Adding from a member variable ensures that the object is loaded
    into memory, so we’re playing fair, and being a random number will prevent the
    compiler from optimizing the member variable out.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这一点，我们将使用一个增量器的小层次结构。每个增量器将通过增量函数将其值（随机初始化的 int）重复添加到全局变量中。通过从成员变量添加来确保对象加载到内存中，所以我们公平地进行比较，而由于是随机数，将防止编译器优化掉成员变量。
- en: 'We’re now set to run some tests and see just how slow virtual functions are.
    To do this, we’ll create many objects of each type and call their increment functions
    repeatedly. Below are the results, with number of objects (or calls, since each
    object’s function is called once) vs runtime in seconds:'
  id: totrans-split-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经准备好运行一些测试，看看虚函数有多慢。为了做到这一点，我们将创建每种类型的许多对象，并重复调用它们的增量函数。以下是结果，包括对象数量（或调用次数，因为每个对象的函数只调用一次）与运行时间（秒）：
- en: Amazingly, calling virtual functions directly is the fastest method, though
    it only marginally beats non-virtual functions. Without the direct calls, and
    when these functions aren’t cached, there’s 3x more overhead to the virtual call
    vs non-virtual. Keep in mind that we’re only comparing overhead. For very long
    running functions, the overhead cost will be moot.
  id: totrans-split-51
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，直接调用虚函数是最快的方法，尽管它仅略胜非虚函数。如果没有直接调用，并且这些函数没有被缓存，虚调用的开销将是非虚调用的3倍。请记住，我们只比较了开销。对于运行时间很长的函数来说，开销成本将是无关紧要的。
- en: Avoiding the performance hit of virtual functions
  id: totrans-split-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免虚函数的性能损失
- en: As seen in the previous section, virtual function calls can be quite slow. To
    guarantee speed, we’ll want to call virtual functions directly.
  id: totrans-split-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在前面的部分中所见，虚函数调用可能非常慢。为了保证速度，我们将希望直接调用虚函数。
- en: To call a virtual function directly, we’ll go to the VTable and grab a pointer
    directly to the function we want to call. “But wait,” you say, “won’t that incur
    the same penalty as a regular virtual function call?” And you’re right, it will.
    The key here is that we can reuse this function pointer, either to call it with
    the same instance in the future or (as in the next section) on other instances
    of the same class.
  id: totrans-split-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要直接调用虚函数，我们将访问 VTable 并直接获取我们想要调用的函数的指针。“但等等”，你说，“那不会产生与常规虚函数调用相同的惩罚吗？”是的，确实会。这里的关键是我们可以重用这个函数指针，无论是在将来与相同实例调用它，还是（如下一节所述）在同一类的其他实例上调用它。
- en: 'To get the function pointer, we can first define a generic function to get
    the VTable:'
  id: totrans-split-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取函数指针，我们可以首先定义一个通用函数来获取 VTable：
- en: 'Then it’s as easy as casting the appropriate entry to the desired function
    pointer:'
  id: totrans-split-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后只需将适当的条目强制转换为所需的函数指针即可：
- en: In the case above, it simply invokes the virtual function in slot 1\. Where
    this technique really becomes useful is when a function is called repeatedly,
    either as a batch or on its own.
  id: totrans-split-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，它只是调用第 1 个槽中的虚函数。当一个函数被重复调用时，无论是作为批处理还是单独调用，这种技术真正变得有用。
- en: Running batches of virtual functions efficiently
  id: totrans-split-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高效运行虚函数批处理
- en: In games and other interactive applications, it’s common to run batches of virtual
    functions at a time. For example, running thousands of `Update()` functions from
    various scene objects each frame. We can take some of the tools from the previous
    sections and accomplish this efficiently.
  id: totrans-split-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏和其他交互应用程序中，一次运行多个虚函数批处理是很常见的。例如，每帧从各种场景对象中运行数千个 `Update()` 函数。我们可以从前面的章节中借用一些工具，以高效完成这项任务。
- en: The key insight we can leverage to run these batches efficiently is that cache
    misses on function calls kill performance. So how can we minimize cache misses?
    We can group our function calls to keep code in the cache!
  id: totrans-split-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用的关键洞见是，函数调用时的缓存未命中会降低性能。那么如何最小化缓存未命中呢？我们可以分组我们的函数调用以保持代码在缓存中！
- en: One easy way to group virtual functions is with `std::set`, which maintains
    an ordered set of values. By sorting pairs of { function pointer, object pointer
    }, the set can easily be iterated over to call everything in sorted order. This
    is especially convenient because any scene manager would need this list anyways.
  id: totrans-split-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `std::set` 来分组虚函数是一种简单的方法，它维护一个有序的值集合。通过对 {函数指针，对象指针} 对进行排序，可以轻松地迭代整个集合以按排序顺序调用所有函数。这尤其方便，因为任何场景管理器都需要此列表。
- en: Below is a complete example. It uses `SceneObject` as its base class containing
    the overrideable `Update()` function. `SceneManager` holds these objects and allows
    all update functions be called as a single batch, grouping update functions.
  id: totrans-split-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个完整的示例。它以 `SceneObject` 作为基类，包含可重写的 `Update()` 函数。`SceneManager` 拥有这些对象，并允许所有更新函数作为单个批处理调用，分组更新函数。
- en: 'With a framework like this in place, there’s one more step to take to be truly
    efficient: don’t call empty functions.'
  id: totrans-split-63
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这样一个框架，要真正高效地执行还需要迈出一步：不要调用空函数。
- en: Detecting when virtual functions are overridden
  id: totrans-split-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测虚函数何时被重写
- en: In the previous example, we batched `Update()` functions and grouped repeated
    calls to the same function (but with different objects) for efficiency. This works
    fine if every child class of `SceneObject` needs an update function, but what
    if some don’t? What if we have a plethora of overrideable functions like `LateUpdate`,
    `PhysicsUpdate`, and `DrawImmediate`? Surely we don’t expect most of those to
    be overridden in each object, and it would waste cycles to call empty functions.
    Enter override checking.
  id: totrans-split-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将 `Update()` 函数分批，并以效率的方式分组重复调用同一个函数（但使用不同的对象）。如果 `SceneObject` 的每个子类都需要一个更新函数，这种方法很有效。但如果某些类不需要呢？如果我们有大量可重写的函数，如
    `LateUpdate`、`PhysicsUpdate` 和 `DrawImmediate`，而大多数对象都不需要重写它们，调用空函数将是浪费周期。这时就需要检查重写。
- en: To check if a function is overridden, you simply need to compare the function
    entries in each VTable. The caveat here is that you need an instance of the base
    object (for which the null-object pattern fits nicely) to compare against.
  id: totrans-split-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查一个函数是否被重写，你只需比较每个 VTable 中的函数条目。这里的一个注意点是，你需要一个基本对象的实例（适合空对象模式）来进行比较。
- en: 'Let’s update the example from the previous section with the new functions we
    just mentioned:'
  id: totrans-split-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用刚刚提到的新函数更新前面章节中的示例：
- en: 'Now we can update the scene manager to conditionally add new objects to each
    batch only when they have overridden the appropriate function:'
  id: totrans-split-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以更新场景管理器，以便仅在对象覆盖了适当的函数时才将其添加到每个批处理中。
- en: It’s that easy! Of course, you’d probably want to start wrapping these up in
    nicer classes. You can also use some macro magic to guarantee your VTable struct
    always matches what’s actually defined in the class.
  id: totrans-split-69
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单！当然，你可能希望开始将这些内容封装在更好的类中。你也可以使用一些宏魔术来确保你的VTable结构始终与类中实际定义的内容匹配。
- en: Conclusion
  id: totrans-split-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: 'Hopefully you’ve seen how useful playing with the VTable can be — and also
    that it’s not so hard. I encourage you to try this for yourself. The end result
    will be a faster program and happier developers. There’s something very satisfying
    about being able to write code like this:'
  id: totrans-split-71
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你已经看到了玩弄VTable的有用性，而且也发现这并不难。我鼓励你亲自尝试一下。最终结果将是一个更快的程序和更快乐的开发者。能够像这样编写代码真是一件非常令人满足的事情：
- en: and not worry about undue overhead or registering functions.
  id: totrans-split-72
  prefs: []
  type: TYPE_NORMAL
  zh: 而且不必担心不必要的开销或者注册函数。
- en: The full source for all examples and tests is [on GitHub](https://github.com/cleak/VirtualFunctionPerf).
    Happy hacking!
  id: totrans-split-73
  prefs: []
  type: TYPE_NORMAL
  zh: 所有示例和测试的完整源代码位于[GitHub](https://github.com/cleak/VirtualFunctionPerf)上。祝编程愉快！
