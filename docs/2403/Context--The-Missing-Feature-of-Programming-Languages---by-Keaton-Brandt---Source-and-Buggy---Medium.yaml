- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：未分类
- en: 'date: 2024-05-29 12:40:24'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 12:40:24
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: 'Context: The Missing Feature of Programming Languages | by Keaton Brandt |
    Source and Buggy | Medium'
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上下文：编程语言缺失的特性 | 作者：Keaton Brandt | 来源和错误 | Medium
- en: 来源：[https://medium.com/source-and-buggy/context-the-missing-feature-of-programming-languages-7c1095fe8d32](https://medium.com/source-and-buggy/context-the-missing-feature-of-programming-languages-7c1095fe8d32)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://medium.com/source-and-buggy/context-the-missing-feature-of-programming-languages-7c1095fe8d32](https://medium.com/source-and-buggy/context-the-missing-feature-of-programming-languages-7c1095fe8d32)
- en: 'Modern computer hardware is so capable that we can often simply ignore its
    limitations when writing code. Conceptually though, any function that allocates
    memory is inherently context-dependent: its outcome depends not only on the arguments
    passed in but also on the amount of contiguous RAM the system is able to grant.'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现代计算机硬件如此强大，以至于在编写代码时我们通常可以简单地忽略其限制。但从概念上讲，任何分配内存的函数都是依赖上下文的：其结果不仅取决于传入的参数，还取决于系统能够授予的连续RAM的数量。
- en: '**Context [Noun]:** Any state that can affect a function’s outcome or performance
    without being passed in as an argument.'
  id: totrans-split-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**上下文 [名词]:** 可以影响函数结果或性能的任何状态，而无需作为参数传递。'
- en: 'Other basic examples of context include: Global variables, calls to external
    services, information about the current thread (eg. whether it’s the UI thread),
    and information about the current stack (eg. to create a stack trace for an exception).'
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文的其他基本示例包括：全局变量、调用外部服务、当前线程的信息（例如，是否是UI线程）以及当前堆栈的信息（例如，为异常创建堆栈跟踪）。
- en: The problem with context is that its assumptions and mutations are happening
    in the musty back-alleys of application code — the low-level implementation details,
    not the brightly-lit interface definitions. Compilers simply don’t check what
    context a function relies on (whether it reads from `stdin`, for example), and
    functions don’t report it. It’s not a black market but it is a [dangerously unregulated
    one](https://en.wikipedia.org/wiki/Gun_law_in_the_United_States).
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文的问题在于其假设和变异发生在应用代码的阴暗角落——低级实现细节，而不是明亮的接口定义。编译器简单地不检查函数依赖的上下文（例如，它是否从`stdin`读取），函数也不会报告它。这不是黑市，但它是一个[危险的不受监管的市场](https://en.wikipedia.org/wiki/Gun_law_in_the_United_States)。
- en: When I call `getTimestamp(user.registeredAt, TimeZone.PST)` I can *assume* that
    it’s just doing some simple math and returning a result. It *probably* doesn’t
    make network calls or hold locks or mine bitcoin, so I *probably* don’t have to
    optimize how often I call it. But actually, it *might* have to look up this year’s
    timeline for Daylight Savings Time, either from a database or from the network.
    As programmers we have to rely on intuition for cases like this, which is not
    exactly a strong foundation for stability.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我调用`getTimestamp(user.registeredAt, TimeZone.PST)`时，我可以*假设*它只是进行一些简单的数学运算并返回结果。它*可能*不会进行网络调用或持有锁或挖矿比特币，因此我*可能*不需要优化调用频率。但实际上，它*可能*需要查找今年夏令时的时间表，无论是从数据库还是从网络中获取。作为程序员，我们在这种情况下必须依赖直觉，这并不是稳定性的坚实基础。
- en: If programmers were structural engineers
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序员是结构工程师
- en: Coralling Context
  id: totrans-split-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制上下文
- en: Context is only dangerous because it is absent from a function’s arguments and
    so is opaque to the caller. The caller, for example, has no way to know if a function
    could cause a deadlock because it cannot know if the implementation of that function
    relies on locking. The simplest way to deal with context is to simply get rid
    of it, and pass *everything* as function arguments.
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文之所以危险，仅因为它缺乏函数参数并且对调用者不透明。例如，调用者无法知道函数是否可能引发死锁，因为它无法知道该函数的实现是否依赖于锁定。处理上下文的最简单方法是简单地摆脱它，并将*所有东西*作为函数参数传递。
- en: For example, we could require that all locks in our codebase must only be grabbed
    using a passed-in `LockGrabber` object, and have all `synchronized` code blocks
    adamantly refuse to pass that LockGrabber to any of their child functions, thereby
    cutting off their ability to grab nested locks. Conversely, services that perform
    computationally-expensive operations could be constructed on a background thread
    and only passed to functions called from within that thread, preventing those
    services from blocking work on the UI thread. Problem solved!
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以要求代码库中所有的锁只能通过传入的 `LockGrabber` 对象来获取，并且所有的 `synchronized` 代码块坚决拒绝将该
    LockGrabber 传递给任何子函数，从而阻止它们获取嵌套锁的能力。相反，执行计算密集型操作的服务可以在后台线程中构建，并且只能传递给在该线程内调用的函数，从而防止这些服务阻塞
    UI 线程上的工作。问题解决了！
- en: Crap, I did it again. *Actually this still kind of sucks.*
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 糟糕，我又犯了同样的错误。*其实这还是有点糟糕的。*
- en: Setting aside the fact that this will quickly result in functions with *dozens*
    of arguments, which are just plain ugly and bad — this approach is still putting
    all the onus of context-management onto programmers. It would be so easy to accidentally
    pass an argument where it doesn’t belong, and it wouldn’t necessarily cause a
    compiler error or a runtime error or a test failure. All it takes is one person
    to accidentally pass a `LockGrabber` to another function while holding a lock
    and suddenly all the carefully-crafted architectural guarantees go out the window.
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
  zh: 撇开这将很快导致拥有 *数十个* 参数的函数，这不仅难看且糟糕 —— 这种方法仍然将所有上下文管理的责任都放在程序员身上。很容易在不应该的地方意外传递一个参数，而这并不一定会引起编译器错误、运行时错误或测试失败。只需一个人在持有锁的同时意外将
    `LockGrabber` 传递给另一个函数，所有精心设计的架构保证就会毁于一旦。
- en: 'This idea of moving away from implicit context and towards explicit arguments
    for everything is a good start, but it’s untenable without help from the compiler.
    Here’s an example of how a context-aware compiler could work:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 远离隐式上下文，转向一切显式参数的想法是一个良好的开始，但如果没有编译器的帮助，这是不可持续的。以下是一个上下文感知编译器如何工作的示例：
- en: The `with` and `without` functions here change the context, allowing the compiler
    to identify a deadlock. The syntax is inspired by Kotlin’s Context Receivers (more
    on that later).
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的 `with` 和 `without` 函数改变了上下文，允许编译器识别死锁。语法灵感来自 Kotlin 的上下文接收器（稍后详述）。
- en: 'Behind the scenes the compiler is basically just passing extra arguments around,
    but with constraints automatically enforced and without cluttering up the code.
    A polite compiler would even give us a helpful error message, like:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，编译器基本上只是在传递额外的参数，但会自动强制执行约束条件，而不会使代码混乱。一个有礼貌的编译器甚至会给我们一个有用的错误消息，例如：
- en: '[PRE0]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It’s not always wise to integrate new features directly into a programming language,
    since third-party libraries are more nimble and can compete with each-other in
    a sort of free market. In this case though, I believe that managing context is
    foundational to good software and so must be foundational to good programming
    languages as well — not tacked on top. The standard library should be context-aware,
    as should IDEs and debuggers and build tools. The complexity introduced by managing
    context is bad, but the complexity introduced by ignoring it is so much worse.
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将新功能直接集成到编程语言中并不总是明智的选择，因为第三方库更为灵活，可以在某种自由市场中相互竞争。但在这种情况下，我认为管理上下文对于良好的软件至关重要，因此也必须成为良好编程语言的基础，而不是后来添加的功能。标准库应该具备上下文感知能力，IDE、调试器和构建工具也应如此。管理上下文带来的复杂性不好，但忽略它所带来的复杂性则更糟糕。
- en: 'Kotlin: A (partial) case study'
  id: totrans-split-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kotlin：一个（部分）案例研究
- en: Kotlin is arguably one of the world’s most underrated programming languages.
    It’s often described, by me, as “Java, but good” — which isn’t exactly a gripping
    headline. But looking past the long shadow cast by Java and the JVM, Kotlin is
    a language packed with novel ideas. In fact, though Kotlin is sometimes seen as
    Android’s clone of Swift, it actually *predates* Swift. (This is the part where
    I disclose that I work on the Android team at Google so this is a bit of a sore
    spot for me personally)
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 可能是世界上最被低估的编程语言之一。通常情况下，我会说它是“Java，但更好” —— 这并不是一个引人入胜的标题。但是，抛开 Java 和
    JVM 长时间笼罩的阴影，Kotlin 是一个充满新思想的语言。事实上，尽管 Kotlin 有时被视为 Android 上的 Swift 克隆，但实际上它比
    Swift 更早诞生。（在此，我需要说明我在 Google 的 Android 团队工作，因此这对我个人而言有点敏感）
- en: 'There are two features in Kotlin relating to context:'
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
  zh: Kotlin 中与上下文相关的两个特性：
- en: '[**CoroutineContext**](https://kotlinlang.org/docs/coroutine-context-and-dispatchers.html)
    is a runtime mechanism that allows [coroutines](https://kotlinlang.org/docs/coroutines-overview.html)
    to access contextual data such as their async stack trace or the current thread.
    It can technically be used as an arbitrary key-value store to pass other data
    around, but that usage cannot be checked at compile time and so is generally discouraged.
    I have nothing against it, but it’s not what this article is about.'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[**CoroutineContext**](https://kotlinlang.org/docs/coroutine-context-and-dispatchers.html)
    是一种运行时机制，允许 [协程](https://kotlinlang.org/docs/coroutines-overview.html) 访问上下文数据，如其异步堆栈跟踪或当前线程。它可以在理论上用作传递其他数据的任意键值存储，但这种用法无法在编译时检查，因此通常不建议使用。我对此没有意见，但本文不讨论这个问题。'
- en: '**The experimental** [**Context Receivers**](https://github.com/Kotlin/KEEP/blob/master/proposals/context-receivers.md)
    **API** is a compile-time language feature that allows function arguments to be
    supplied from context rather than being passed in manually. Could this be exactly
    what I’ve been waiting for? It looks pretty close!'
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**实验性** [**上下文接收器**](https://github.com/Kotlin/KEEP/blob/master/proposals/context-receivers.md)
    **API** 是一种编译时语言特性，允许从上下文中提供函数参数，而不是手动传递。这可能正是我一直在等待的东西？看起来非常接近！'
- en: 'This working example prints “LOG: Hi Keaton!”'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: '这个工作示例打印出“LOG: Hi Keaton!”'
- en: 'While this does make the pass-everything-as-an-argument approach more feasible,
    it has two major drawbacks:'
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这确实使“将一切作为参数传递”的方法更为可行，但它有两个主要缺点：
- en: '**There is no** `**without**` **function.** I can add the user and the logger
    to the context with `with`, but `sayHi` has no option to call other functions
    without that same context being present. You win this time, deadlocks.'
  id: totrans-split-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有 `**without**` **函数。** 我可以用 `with` 将用户和记录器添加到上下文中，但 `sayHi` 没有调用其他函数的选项，除非存在相同的上下文。这次你赢了，死锁。
- en: '**Context is explicit.** Any function that calls `sayHi` needs to specify `UserAccount`
    and `Logger` as context for itself in order to forward that context to `sayHi`.
    The compiler isn’t smart enough to do that itself. As an example, this won’t work:'
  id: totrans-split-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文显式。** 调用 `sayHi` 的任何函数需要为自身指定 `UserAccount` 和 `Logger` 作为上下文，以便将该上下文转发给
    `sayHi`。编译器本身并不足够智能来完成这一点。例如，这种方式行不通：'
- en: Here, `processOnAppStartup` would need to include in its context `UserAccount`
    and `Logger` and `Database` and `SyncApi` and anything that `someOtherHeavyComputation`
    needs and anything that `somethingElseAsWell` needs *and anything that any of
    their child functions need*. Adding a new piece of context to a function would
    require updating all of functions that call it, transitively. So we haven’t avoided
    the inevitable function-with-a-dozen-arguments problem, only glazed it with some
    syntactic sugar.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`processOnAppStartup` 需要在其上下文中包含 `UserAccount`、`Logger`、`Database`、`SyncApi`，以及
    `someOtherHeavyComputation` 需要的任何内容，以及 `somethingElseAsWell` 需要的内容，*及其所有子函数需要的任何内容*。向函数添加新的上下文部分将需要更新调用它的所有函数，这是不可避免的，因此我们并没有避免像“带有十几个参数的函数”问题，只是在其上披了一层语法糖。
- en: There’s still a big gap between my ideal solution and the reality of what’s
    possible with Context Receivers. I understand the hesitation. A line of code that
    reads “this function gets access to a Logger from *somewhere* up the call stack”
    is unsettlingly vague without the proper tools in place to scrutinize it. In that
    way, though, Kotlin is a perfect testing ground for this kind of feature. Kotlin
    is maintained by JetBrains, makers of IntelliJ and other IDEs. It is very much
    designed to be used within an IDE that can decorate its code with information
    that would be explicitly stated in other languages (Kotlin elides most data types,
    some `return` statements, and doesn’t even *have* `await` statements). Context
    would be just another thing to decorate.
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我理解对理想解决方案与实际情况之间仍然存在很大差距的犹豫。一行代码读作“此函数从调用堆栈中的*某处*获取Logger”的想法，如果没有适当的工具来仔细分析，将会令人不安。然而，在这种情况下，Kotlin
    是这类功能的完美测试场所。Kotlin 由 JetBrains 维护，他们是 IntelliJ 及其他 IDE 的制造商。它非常适合在可以用其他语言明确说明的信息装饰其代码的
    IDE 中使用（Kotlin 省略大多数数据类型，某些 `return` 语句，甚至*没有* `await` 语句）。上下文只是另一种装饰的东西。
- en: 'Addendum: Other case studies in Context'
  id: totrans-split-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 补充：上下文中的其他案例研究
- en: I don’t usually edit posts after I publish them, but I got a lot of interesting
    feedback about academic work in this area and I wanted to briefly share some of
    it. I’m not a programming-language researcher so I won’t attempt anything more
    than a high-level overview, but I will link out to some great in-depth sources.
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常不会在发布后编辑帖子，但我得到了很多关于这个领域学术工作的有趣反馈，我想简要分享一些。我不是编程语言研究者，所以我不会尝试更多的高级概述，但我会链接到一些优秀的深度资源。
- en: 'First, the bad news: Nobody I’ve talked to knows of any real-world production-ready
    programming language that does what I want. The only language I’ve encountered
    that supports something like `without` is [Flix](https://flix.dev/), a neat little
    research language. Functional languages like Haskell, OCaml, and Scala have strongly-typed
    Effects that can do everything else, just not `without`.'
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，坏消息是：我与之交谈的人都不知道有任何真实世界的生产就绪编程语言可以做我想要的事情。我遇到的唯一支持类似`without`的语言是[Flix](https://flix.dev/)，一个小巧而有趣的研究语言。像Haskell、OCaml和Scala这样的函数式语言有强类型的效果，可以做其他所有事情，只是没有`without`。
- en: In Programming Language jargon an Effect is anything a function *does* beyond
    just returning a value. Modifying state, eg. printing to the console or making
    a network call, is an Effect. Knowing when a function modifies state is half the
    battle, the other half is knowing when a function *reads* state. This is not an
    Effect, but rather a [Coeffect](https://tomasp.net/coeffects/) — although sometimes
    it all gets lumped together under the banner of ‘Effects’ or ‘Effect Systems’.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程语言的行话中，Effect 是函数返回值之外的任何函数*做的*事情。修改状态，例如：打印到控制台或进行网络调用，都是 Effect。知道函数何时修改状态是一半的战斗，另一半是知道函数何时*读取*状态。这不是
    Effect，而是一个[Coeffect](https://tomasp.net/coeffects/) — 虽然有时它都被统称为‘Effects’或‘Effect
    Systems’。
- en: 'Examples of research languages that have explored different approaches to Effects
    include: [Eff](https://www.eff-lang.org/try/), [Effekt](https://effekt-lang.org/docs/concepts/effect-safety),
    [Flix](https://flix.dev/), and [Koka](https://koka-lang.github.io/koka/doc/book.html).
    There’s a gigantic list of work [here](https://github.com/yallop/effects-bibliography),
    although much of it takes the form of runtime libraries which I don’t find particularly
    helpful. After all, if “the best integration test is a good compiler”, a useful
    corollary would be “the worst integration test is crashing the production build
    and hoping somebody emails you about it”.'
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 Effects 不同方法的研究语言示例包括：[Eff](https://www.eff-lang.org/try/)、[Effekt](https://effekt-lang.org/docs/concepts/effect-safety)、[Flix](https://flix.dev/)
    和 [Koka](https://koka-lang.github.io/koka/doc/book.html)。在这里有一个巨大的工作列表[here](https://github.com/yallop/effects-bibliography)，尽管其中大部分采用运行时库的形式，我并不特别喜欢。毕竟，“最好的集成测试是一个好的编译器”，一个有用的推论将是“最糟糕的集成测试是崩溃的生产版本，希望有人给你发邮件”。
- en: There are plenty of academic papers on this subject, my favorites are this [Coeffect](https://tomasp.net/coeffects/)
    website based on a PhD thesis and [Effects as Capabilities](https://dl.acm.org/doi/10.1145/3428194).
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个主题有很多学术论文，我最喜欢的是基于博士论文的[Coeffect](https://tomasp.net/coeffects/)网站和[Effects
    as Capabilities](https://dl.acm.org/doi/10.1145/3428194)。
- en: Exception Handling is Context
  id: totrans-split-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常处理是上下文。
- en: 'One interesting insight I got from the research is that exception handling
    is basically a special case of context. A thrown Exception propagates up the call
    stack until it finds a `catch` block that accepts it. We could hack this system
    to accomplish something that looks an awful lot like context:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我从研究中得到的一个有趣的见解是，异常处理基本上是上下文的一个特殊情况。抛出的异常会在调用堆栈上传播，直到找到一个接受它的`catch`块。我们可以修改这个系统以实现看起来非常像上下文的某些功能：
- en: 'This example prints: “Hi!” then “HI!”'
  id: totrans-split-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例打印：“Hi！”然后是“HI！”
- en: This would work for `sayHi` and any functions it calls internally, without having
    to pass a `Logger` around as an argument! The obvious problem is that any code
    after the `throw LogText()` line will never run. The other problem is that this
    still isn’t actually checked at compile-time. Calling `sayHi` without a catch
    block for `LogText` will just … crash the entire program. Oof.
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于`sayHi`及其内部调用的任何函数都有效，无需将`Logger`作为参数传递！明显的问题是，`throw LogText()`行后的任何代码都将永远不会运行。另一个问题是，这实际上仍然没有在编译时进行检查。调用没有`LogText`的catch块的`sayHi`将会导致整个程序崩溃。
- en: Neither of those is a fundamental problem, just a language design choice. Exception
    handlers could have a `continue` keyword that resumes the throwing function as
    though it had never thrown an exception. Compilers could ensure that every thrown
    exception is caught somewhere — Java does this already, although it ignores RuntimeExceptions.
  id: totrans-split-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者都不是根本问题，只是语言设计的选择。异常处理程序可以有一个 `continue` 关键字，恢复抛出异常的函数，就好像它从未抛出异常一样。编译器可以确保每个抛出的异常都在某处被捕获
    —— Java 已经做到了，尽管它忽略了 RuntimeExceptions。
- en: Personally I don’t think hacking try/catch blocks is a great way to implement
    context management, but it does go to show that context is not a wild new paradigm
    that will totally break every existing language feature and slow compilers down
    to a crawl. It’s just exception handling on steroids.
  id: totrans-split-44
  prefs: []
  type: TYPE_NORMAL
  zh: 就个人而言，我不认为通过黑客方式处理 try/catch 块是实现上下文管理的好方法，但这确实表明上下文并非一个完全破坏每个现有语言特性并使编译器速度减慢到龟速的全新范式。这只是异常处理的强化版。
- en: Conclusion
  id: totrans-split-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'This post is a spiritual sequel to [“Zoom Out”: The missing feature of IDEs](/source-and-buggy/zoom-out-the-missing-feature-of-ides-f32d0f36f392).
    Both are about the same problem: that we can see the individual pieces of our
    codebase but not how they fit together. Code is not just a collection of text
    files but also an interconnected graph of logic that is often too vast to fit
    within our feeble human minds. It is hubris to think we can catch all deadlocks
    or optimize thread utilization without some computational help.'
  id: totrans-split-46
  prefs: []
  type: TYPE_NORMAL
  zh: '这篇文章是[“Zoom Out”: The missing feature of IDEs](/source-and-buggy/zoom-out-the-missing-feature-of-ides-f32d0f36f392)的精神续篇。两者都涉及同样的问题：我们可以看到代码库的各个部分，但却看不到它们如何相互关联。代码不仅仅是一堆文本文件，还是一个逻辑互联的图形，往往太过庞大，难以在我们脆弱的人类大脑中完全理解。认为我们可以在没有计算机帮助的情况下捕获所有死锁或优化线程利用率，是傲慢的想法。'
- en: As with everything, there are tradeoffs. My ideal solution here adds complexity
    to programming languages and slows down compilers. It would require developing
    a new set of Best Practices, which can only be identified once people have failed
    in every conceivable way.
  id: totrans-split-47
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何事情一样，都存在权衡。在这里，我理想的解决方案增加了编程语言的复杂性并减慢了编译器的速度。这将需要开发一套新的最佳实践，只有在人们以各种可想象的方式失败之后才能确定。
- en: The advantage is that it enables programmers to have more expressive power,
    in particular allowing us to constrain what future programmers are allowed to
    do to our codebases. *In this house, we don’t make network calls from the UI thread*.
    I could write that in code review guidelines but even the smartest engineers make
    mistakes sometimes. The only real guarantee is a compile-time guarantee.
  id: totrans-split-48
  prefs: []
  type: TYPE_NORMAL
  zh: 优点在于它使程序员拥有更多的表达能力，特别是允许我们限制未来程序员对我们代码库的操作。*在这个项目中，我们不允许从 UI 线程进行网络调用*。我可以在代码审查指南中写上这句话，但即使是最聪明的工程师有时也会犯错。唯一真正的保证是编译时的保证。
- en: Of course, writing a blog post is very different from solving a problem. The
    best case scenario is that you read this and start to think about how context
    applies to your work. Maybe you share it with somebody else who shares it with
    somebody else who writes a proposal that ends up getting incorporated into a production
    language. It’s not an easy path from Point A to Point B, there’s a lot of odd
    and improbable steps in between. The path from an idea to a product is, like so
    many things, a Rube Goldberg Machine.
  id: totrans-split-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，写博客文章与解决问题是非常不同的。最理想的情况是，你读到这篇文章，并开始思考上下文如何应用到你的工作中。也许你会与他人分享，他们又会与他人分享，最终写出一个提案，被纳入一个生产语言中。从
    A 点到 B 点的路径并不容易，中间还有许多奇怪和不可思议的步骤。从想法到产品的路径，像许多事情一样，是一个鲁伯·戈尔德伯格机器。
