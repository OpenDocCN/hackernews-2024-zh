["```\n// CodeGenerator.swift\n\nprivate let secret = Data(base64Encoded: \"AAAAAAAAAAAAAAAAAAAAAAAAAAA\")!\n\nfunc otpCode(date: Date = Date()) -> String {\n    let digits = 6\n    let period = TimeInterval(30)\n    let counter = UInt64(date.timeIntervalSince1970 / period)\n    let counterBytes = (0..<8).reversed().map { UInt8(counter >> (8 * $0) & 0xff) }\n    let hash = HMAC<Insecure.SHA1>.authenticationCode(for: counterBytes, using: SymmetricKey(data: secret))\n    let offset = Int(hash.suffix(1)[0] & 0x0f)\n    let hash32 = hash\n        .dropFirst(offset)\n        .prefix(4)\n        .reduce(0, { ($0 << 8) | UInt32($1) })\n    let hash31 = hash32 & 0x7FFF_FFFF\n    let pad = String(repeating: \"0\", count: digits)\n    return String((pad + String(hash31)).suffix(digits))\n}\n```", "```\n// ContentView.swift\n\nstruct ContentView: View {\n\n    var body: some View {\n        List {\n            ForEach(makeOTPs(), id: \\.self) {\n                Text($0)\n                    .fontDesign(.monospaced)\n                    .font(.title)\n                    .kerning(4)\n            }\n            .frame(maxWidth: .infinity)\n        }\n    }\n\n    func makeOTPs() -> [String] {\n        (0..<10_000).map {\n            otpCode(increment: $0)\n        }\n    }\n}\n```", "```\nextension String {\n    func checkThoseTrips() -> Bool {\n        (try? /(\\d)\\1\\1/.firstMatch(in: self)) != nil\n    }\n}\n```", "```\nText($0)\n    .fontWeight($0.checkThoseTrips() ? .heavy : .light)\n```", "```\nForEach<Array<String>, String, Text>: the ID 312678 occurs multiple \ntimes within the collection, this will give undefined results!\n```", "```\n// TOTP.swift\n\nstruct OTP {\n    let date: Date\n    let code: String\n}\n\nfunc otpCode(date: Date = Date(), increment: Int = 0) -> OTP {\n    let digits = 6\n    let period = TimeInterval(30)\n    let adjustedDate = date.addingTimeInterval(period * Double(increment))\n    let counter = UInt64(adjustedDate.timeIntervalSince1970 / period)\n    let counterBytes = (0..<8).reversed().map { UInt8(counter >> (8 * $0) & 0xff) }\n    let hash = HMAC<Insecure.SHA1>.authenticationCode(for: counterBytes, using: SymmetricKey(data: secret))\n    let offset = Int(hash.suffix(1)[0] & 0x0f)\n    let hash32 = hash\n        .dropFirst(offset)\n        .prefix(4)\n        .reduce(0, { ($0 << 8) | UInt32($1) })\n    let hash31 = hash32 & 0x7FFF_FFFF\n    let pad = String(repeating: \"0\", count: digits)\n    let code = String((pad + String(hash31)).suffix(digits))\n    return OTP(date: adjustedDate, code: code)\n}\n```", "```\nfunc interestingCodes() -> [OTP] {\n    (0..<1_000_000)\n        .map { otpCode(increment: $0) }\n        .filter { $0.code.checkThoseQuints() }\n}\n```", "```\n// NotificationScheduler.swift\n\nprivate func createNotification(for otp: OTP) {\n    let center = UNUserNotificationCenter.current()\n    let content = UNMutableNotificationContent()\n    content.title = \"Quads GET!!\"\n    content.body = otp.code\n    content.sound = UNNotificationSound.default\n    let components = Calendar.current.dateComponents([.year, .month, .day, .hour, .minute, .second], from: otp.date)\n    let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: false)\n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n    center.add(request) { (error) in\n        // ... \n    }\n}\n```", "```\n// Interestingness.swift\n\nenum Interestingness {\n\n    case sexts\n    case quints\n    case quads\n\n    init?(code: String) {\n        if code.checkThoseSexts() {\n            self = .sexts\n        // ...\n\n    var title: String {\n        switch self {\n        case .sexts: return \"Sextuples GET!!!\"\n        // ...\n\n    func body(code: String) -> String {\n        switch self {\n        case .sexts: return \"Check those sexts: \\(code)\"\n        // ...\n```", "```\notpauth://totp/Google%3Atest%40gmail.com?secret=bv7exx7sltbcqffec1qyxscueydwsu5h&issuer=Google\n```", "```\n// CodeView.swift\n\nvar body: some View {  \n    // ... \n    .sheet(isPresented: $showSettings) {\n        SettingsView(onDisappear: {\n            viewModel.recomputeNotifications()\n        })\n    }\n}\n```", "```\n// KeychainManager.swift \n\nself.keychain = Keychain().synchronizable(true)\n```", "```\n// AccountManager.swift \n\nfunc fetchAccounts() throws -> [Account] {\n    try KeychainManager.shared.fetchAll()\n        .compactMap { createAccount(from: $0) }\n}\n\nprivate func createAccount(from urlString: String) -> Account? {\n    guard let url = URL(string: urlString),\n          let account = SecretURLParser.shared.account2FA(from: url) else {\n        return nil\n    }\n    return account\n}\n```", "```\nstruct FavIcon {\n\n    let url: URL\n\n    init(issuer: String) {\n        let domain = \"\\(issuer).com\"\n        let url = URL(string: \"https://www.google.com/s2/favicons?sz=128&domain=\\(domain)\")!\n        self.url = url\n    }\n}\n```", "```\n//  View+ColorEffect.swift\n\nimport SwiftUI\n\nextension View {\n\n    func eraseBackground(backgroundColor: Color = Color(uiColor: UIColor.secondarySystemBackground)) -> some View {\n        modifier(EraseBackgroundShader(backgroundColor: backgroundColor))\n    }\n}\n\nstruct EraseBackgroundShader: ViewModifier {\n\n    let backgroundColor: Color\n\n    func body(content: Content) -> some View {\n        content\n            .colorEffect(ShaderLibrary.eraseBackground(\n                .color(backgroundColor)\n            ))\n    }\n}\n```", "```\n#include <metal_stdlib>\n#include <SwiftUI/SwiftUI_Metal.h>\nusing namespace metal;\n\n[[ stitchable ]]\nhalf4 eraseBackground(\n    float2 position,\n    half4 color,\n    half4 backgroundColor\n) {\n\n    if (color.r >= 0.95 && color.g >= 0.95 && color.b >= 0.95) {\n        return backgroundColor;\n    }\n\n    return color;\n}\n```", "```\n// AccountView.swift\n\n@ScaledMetric(relativeTo: .largeTitle) private var iconSize: CGFloat = 36\n\nprivate var icon: some View {\n    CachedAsyncImage(url: FavIcon(issuer: account.issuer).url, content: {\n        $0\n            .resizable()\n            .aspectRatio(contentMode: .fit)\n\n    }, placeholder: {\n        Text(String(account.issuer.first?.uppercased() ?? account.name.first?.uppercased() ?? \"\"))\n            .font(.largeTitle)\n            .monospaced()\n    })\n    .frame(width: iconSize, height: iconSize, alignment: .center)\n}\n\nprivate var code: some View {\n    ViewThatFits {\n        HStack(alignment: .center, spacing: 16) {\n            codeText\n        }\n        VStack(alignment: .leading, spacing: 4) {\n            codeText\n        }\n    }\n}\n```", "```\nfunc checkThatCounting() -> Bool {\n    let characters = Array(self)\n    for i in 1..<characters.count {\n        if let prevDigit = Int(String(characters[i - 1])),\n           let currentDigit = Int(String(characters[i])),\n           currentDigit != prevDigit + 1 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc checkThatPalindrome() -> Bool {\n    self == String(self.reversed())\n}\n\nfunc checkThoseRepeatedThrees() -> Bool {\n    self.prefix(3) == self.suffix(3)\n}\n\nfunc checkThoseHunderedThousands() -> Bool {\n    suffix(5) == \"00000\"\n}\n```", "```\n// CodeGenerator.swift \n\nvar codeSubject = PassthroughSubject<OTP, Never>()\n\nfunc generateCodes(accounts: [Account]) { \n    // ...\n    codeSubject.send(otp)\n}\n```", "```\n// CodeViewModel.swift\n\nprivate var otpComputationTask: Task<Void, Never>?\nprivate var notificationSchedulingTask: Task<Void, Never>?\n\nfunc recomputeNotifications() {\n    handleNotificationScheduling()\n    handleOTPComputation()\n}\n\nprivate func handleNotificationScheduling() {\n    notificationSchedulingTask?.cancel()\n    notificationSchedulingTask = Task.detached(priority: .high) {\n        guard await NotificationScheduler.shared.isAuthorized() else { return }\n        NotificationScheduler.shared.cancelNotifications()\n        for await (code, count) in CodeGenerator.shared.codeSubject.values {\n            try? await NotificationScheduler.shared.scheduleNotification(for: code)\n        }\n    }\n}\n\nprivate func handleOTPComputation() {\n    let accounts = accounts\n    otpComputationTask?.cancel()\n    otpComputationTask = Task.detached(priority: .high) {\n        guard await NotificationScheduler.shared.isAuthorized() else { return }\n        CodeGenerator.shared.generateCodes(accounts: accounts)\n    }\n}\n```", "```\nScheduled repeatedTwos: 292929 @ 2024-02-25 23:33:30 +0000\nScheduled repeatedTwos: 878787 @ 2024-02-26 06:03:30 +0000\nScheduled quints: 666660 @ 2024-02-26 10:54:00 +0000\nScheduled quints: 255555 @ 2024-02-26 21:11:00 +0000\nScheduled repeatedTwos: 606060 @ 2024-02-26 23:27:00 +0000\nScheduled sexts: 666666 @ 2024-04-16 23:22:00 +0000\nScheduled boltzmannConstant: 141023 @ 2024-04-19 02:05:00 +0000\nScheduled counting: 012345 @ 2024-04-20 04:51:30 +0000\nScheduled planksConstant: 661034 @ 2024-04-20 05:38:00 +0000\n```", "```\n// High priority -\n// TODO: - Add ordering as a query item to the stored URL in the keychain\n// TODO: - Haptic buzz on refresh\n// TODO: - Only request push notifications when they have entered the Settings Screen\n// TODO: - Add settings link to enable notifications \n// TODO: - Bug - Ignore scanned duplicates in the view model accounts - don't append scans to accounts if it's already there\n// TODO: - Cancel processing tasks when opening Settings view\n// TODO: - Push notification deep links to an app review prompt, when the GET is still present\n// TODO: - Ultra-rare GETs not being sent?? Can't make them happen locally in simulator, but quints are fine - they appear to be queued\n// TODO: - Bug - Progress view doesn't appear on the second load\n// TODO: - Bug - Ignore scanned duplicates in the view model accounts - don't append scans to accounts if it's already there\n// TODO: - Bug - There's a bug where the percentage fluctuates up and down when there are 2 concurrent calculations\n// TODO: - Add TipKit to QR and Settings\n\n// Low priority -\n// TODO: - Use @SceneStorage for state restoration; so we aren't waiting ages for the keychain operations\n// TODO: - Look back/forwards one code \n// TODO: - Create a \"collection\" screen using deep links - collecting the seen GETs as stored items (with a dictionary on the keychain)\n```", "```\n// Notifications.swift\n\n// ... \ncontent.userInfo = [\"deepLink\": \"checkem://\\(otp.code)\"]\n```", "```\n// AppDelegate.swift\n\nfunc userNotificationCenter(_ center: UNUserNotificationCenter,\n                            didReceive response: UNNotificationResponse,\n                            withCompletionHandler completionHandler: @escaping () -> Void) {\n\n    let userInfo = response.notification.request.content.userInfo\n\n    if let deepLinkString = userInfo[\"deepLink\"] as? String,\n       let deepLinkURL = URL(string: deepLinkString) {\n        guard let code = deepLinkURL.code else { return }\n        try? CollectionManager.shared.save(code: code)\n    }\n\n    completionHandler()\n}\n```", "```\n// KeychainManager.swift   \n\nfunc storeCollectionItem(code: String) throws {\n    var collection = try keychain.get(Constants.collectionKey) ?? \"\"\n    if !collection.isEmpty {\n        collection.append(\",\")\n    }\n    collection.append(code)\n    try keychain.set(collection, key: Constants.collectionKey)\n}\n```", "```\n// CodeView.swift\n\n.onReceive(timer) { _ in\n    let didChange = viewModel.refresh()\n    if didChange {\n        HapticEngine.shared.play(haptic: .refresh)\n    }\n}\n```", "```\n// TODO: - Bug - Ignore scanned duplicates in the view model accounts - don't append scans to accounts if it's already there\n```", "```\n// CodeViewModel.swift\n\nfunc create(account: Account, url: URL) throws {\n    guard !accounts.contains(where: { $0.name == account.name }) else { return }\n    // ... \n}\n```", "```\n// TODO: - Ultra-rare GETs not being sent?? Can't make them happen locally in simulator, but quints are fine - they appear to be queued\n```", "```\n// SettingsView.swift\n\n@AppStorage(\"sexts\") private var sexts: Bool = true\n```", "```\n// CheckEmApp.swift \n\n@main\nstruct CheckEmApp: App {\n\n    init() {\n        initializeDefaultsIfRequired()\n    }\n\n    // ...\n\n    func initializeDefaultsIfRequired() {\n        guard UserDefaults.standard.object(forKey: \"sexts\") == nil else { return }\n        CodeGenerator.shared.initializeDefaults()\n    }\n```", "```\n// CodeView.swift\n\n@ViewBuilder\nprivate var tips: some View {\n    TipView(QRTip()).tipImageSize(CGSize(width: tipImageSize, height: tipImageSize))\n    TipView(SettingsTip()).tipImageSize(CGSize(width: tipImageSize, height: tipImageSize))\n    TipView(CollectionTip()).tipImageSize(CGSize(width: tipImageSize, height: tipImageSize))\n}\n```"]