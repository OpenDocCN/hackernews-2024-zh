- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-27 14:38:32'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-27 14:38:32
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Protecting paths in macro expansions by extending UTF-8
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过扩展UTF-8保护宏扩展中的路径
- en: 来源：[https://nullprogram.com/blog/2024/03/05/](https://nullprogram.com/blog/2024/03/05/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://nullprogram.com/blog/2024/03/05/](https://nullprogram.com/blog/2024/03/05/)
- en: March 05, 2024
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 2024年3月5日
- en: nullprogram.com/blog/2024/03/05/
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: nullprogram.com/blog/2024/03/05/
- en: After a year I’ve finally came up with an elegant solution to a vexing [u-config](/blog/2023/01/18/)
    problem. The pkg-config format uses macros to generate build flags through recursive
    expansion. Some flags embed file system paths, but to the macro system it’s all
    strings. The output is also ultimately just one big string, which the receiving
    shell [splits into fields](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05).
    If a path contains spaces, or shell metacharacters, u-config must escape them
    so that shells treat them as part of a token. But how can u-config itself distinguish
    incidental spaces in paths from deliberate spaces between flags? What about other
    shell metacharacters in paths? My solution is to extend UTF-8 to encode metadata
    that survives macro expansion.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一年后，我终于为一个令人烦恼的[u-config](/blog/2023/01/18/)问题找到了一个优雅的解决方案。pkg-config格式使用宏通过递归扩展生成构建标志。一些标志嵌入文件系统路径，但对于宏系统来说，它们仅仅是字符串。输出最终也只是一个大字符串，接收shell将其[分割成字段](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_05)。如果路径包含空格或shell元字符，u-config必须对它们进行转义，以便shell将它们视为标记的一部分。但是，u-config本身如何区分路径中的偶发空格与标志之间的意图空格？路径中的其他shell元字符呢？我的解决方案是扩展UTF-8以编码在宏扩展中生存的元数据。
- en: 'As usual, it helps to begin with a concrete example of the problem. The following
    is a conventional `.pc` file much like you’d find on your own system:'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，从一个具体的问题例子开始会有所帮助。以下是一个类似于你在自己系统上找到的传统`.pc`文件：
- en: '[PRE0]'
  id: totrans-split-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It begins by defining the library’s installation prefix from which it derives
    additional paths, which are finally used in the package fields that generate build
    flags (`Cflags`, `Libs`). If I run u-config against this configuration:'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它从定义库的安装前缀开始，从中派生额外的路径，最终用于生成构建标志（`Cflags`，`Libs`）的包字段。如果我对这个配置运行u-config：
- en: '[PRE1]'
  id: totrans-split-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Typically `prefix` is populated by the library’s build system, which knows
    where the library is to be installed. In some situations that’s not possible,
    and there is no opportunity to set `prefix` to a meaningful path. In that case,
    pkg-config can automatically override it (`--define-prefix`) with a path relative
    to the `.pc` file, making the installation relocatable. This works quite well
    [on Windows, where it’s the default](/blog/2020/09/25/):'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通常`prefix`由库的构建系统填充，它知道库应该安装在哪里。在某些情况下，这是不可能的，并且没有机会将`prefix`设置为有意义的路径。在这种情况下，pkg-config可以自动覆盖它（`--define-prefix`）为相对于`.pc`文件的路径，使安装可以重定位。这在[Windows上效果非常好，因为它是默认设置](/blog/2020/09/25/)的。
- en: '[PRE2]'
  id: totrans-split-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This just works… *so long as the path does not contain spaces*. If so, it risks
    splitting into separate fields. The `.pc` format supports quoting to control how
    such output is escaped. Regions between quotes are escaped in the output so that
    they retain their spaces when field split in the shell. If a `.pc` file author
    is careful, they’d write it with quotes:'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是起作用…… *只要路径中不包含空格*。如果包含空格，它有可能会分裂成独立的字段。`.pc`格式支持引用来控制如何转义这样的输出。在引号之间的区域在输出中被转义，这样它们在shell中的字段分割时保留它们的空格。如果一个`.pc`文件的作者小心的话，他们会使用引号来编写：
- en: '[PRE3]'
  id: totrans-split-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The paths are carefully placed within [quoted regions](/blog/2021/12/04/) so
    that they come out properly:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
  zh: 路径被小心地放置在[引用区域](/blog/2021/12/04/)中，以便它们正确地输出：
- en: '[PRE4]'
  id: totrans-split-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Almost nobody writes their `.pc` files this way*! The convention is not to
    quote. My original solution was to implicitly wrap `prefix` in quotes on assignment,
    which fixes the vast majority of `.pc` files. That effectively looks like this
    in the “virtual” `.pc` file:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*几乎没有人以这种方式编写他们的`.pc`文件*！约定是不使用引号。我的最初解决方案是在分配时隐式包裹`prefix`在引号中，这修复了绝大多数`.pc`文件。在“虚拟”的`.pc`文件中，它实际上看起来像这样：'
- en: '[PRE5]'
  id: totrans-split-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'So the important region is quoted, its spaces preserved. However, the occasional
    library author actively supporting Windows inevitably runs into this problem,
    and their system’s pkg-config implementation does not quote `prefix`. They soon
    figure out explicit quoting and apply it, which then undermines u-config’s implicit
    quoting. The quotes essentially cancel out:'
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，重要区域被引用，其空格得以保留。然而，偶尔会有支持Windows的库作者遇到这个问题，他们系统的pkg-config实现不会引用`prefix`。他们很快就会意识到显式引用并应用它，这将削弱u-config的隐式引用。引号本质上会取消掉：
- en: '[PRE6]'
  id: totrans-split-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The quoted regions are inverted and nothing happens. Though this is a small
    minority, the libraries that do this and the ones you’re likely to use on Windows
    are correlated. I was stumped: How to support quoted and unquoted `.pc` files
    simultaneously?'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
  zh: 引用的区域被颠倒，什么也没有发生。尽管这只是少数情况，但这些库和你在Windows上可能使用的库是相关的。我曾感到困惑：如何同时支持带引号和不带引号的`.pc`文件？
- en: Extending UTF-8
  id: totrans-split-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展UTF-8
- en: 'I recently had the thought: What if somehow u-config tracked which spans of
    string were paths. `prefix` is initially a path span, and then track it through
    macro-expansion and concatenation. Soon after that I realized it’s even simpler:
    **Encode the spaces in a path as a value other than space**, but also a value
    that cannot appear in the input. Recall that [certain octets can never appear
    in UTF-8 text](/blog/2017/10/06/): the 8 values whose highest 5 bits are set.
    That would be the first octet of 5-octet, or longer, code point, but those are
    forbidden.'
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近想到了这个问题：如果u-config以某种方式追踪哪些字符串区域是路径呢。`prefix`最初是一个路径区域，然后通过宏扩展和连接进行跟踪。不久后我意识到更简单的方法：**将路径中的空格编码为除空格外的值**，但也是不能出现在输入中的值。请记住，[UTF-8文本中绝对不能出现某些八位组](/blog/2017/10/06/)：其最高5位为设置位的8个值。这将是5字节或更长代码点的第一个八位组，但这些都是被禁止的。
- en: When paths enter the macro system, special characters are encoded as one of
    these 8 values. They’re converted back to their original ASCII values during output
    encoding, escaped. It doesn’t interact with the pkg-config quoting mechanism,
    so there’s no quote cancellation. Both quoting cases are supported equally.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当路径进入宏系统时，特殊字符被编码为这8个值之一。它们在输出编码时会被转换回它们原始的ASCII值，并进行转义。它与pkg-config的引用机制无关，因此不会发生引号取消。两种引号情况都得到了支持。
- en: 'For example, if space is mapped onto `\xff` (255), then:'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果空格映射到`\xff`（255），那么：
- en: '[PRE7]'
  id: totrans-split-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Which prints the same regardless of `${includedir}` or `"${includedir}"`. Problem
    solved!
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
  zh: 无论`${includedir}`还是`"${includedir}"`都打印相同的内容。问题解决！
- en: That’s not the only complication. Outputs may *deliberately* include shell metacharacters,
    though typically these are [Makefile](/blog/2017/08/20/) fragments. For example,
    the default value of `${pc_top_builddir}` is `$(top_builddir)`, which `make` will
    later expand. While these characters are special to a shell, and certainly special
    to `make`, they must not be escaped.
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是唯一的复杂情况。输出可能会*故意*包含shell元字符，尽管通常这些是[Makefile](/blog/2017/08/20/)片段。例如，`${pc_top_builddir}`的默认值是`$(top_builddir)`，稍后`make`将会扩展它。虽然这些字符对shell来说是特殊的，对`make`来说也是特殊的，但它们不应该被转义。
- en: What if a path contains these characters? The pkg-config quoting mechanism won’t
    help. It’s only concerned with spaces, and `$(...)` prints the same quoted nor
    not. As before, u-config must track provenance — whether or not such characters
    originated from a path.
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果路径包含这些字符怎么办？pkg-config的引用机制无济于事。它只关心空格，而`$(...)`无论是否引用都会打印相同的内容。与之前一样，u-config必须追踪来源——这些字符是否起源于路径。
- en: If `$PKG_CONFIG_TOP_BUILD_DIR` is set, then `pc_top_builddir` is set to this
    environment variable, useful when the result isn’t processed by `make`. In this
    case it’s a path, and `$(...)` ought to be escaped. Even without `$` it must be
    quoted, because the parentheses would still invoke a subshell. But who would put
    parenthesis in a path? Lo and behold!
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置了`$PKG_CONFIG_TOP_BUILD_DIR`，则`pc_top_builddir`将设置为此环境变量，当结果不被`make`处理时非常有用。在这种情况下，它是一个路径，并且应该转义`$(...)`。即使没有`$`，也必须加引号，因为括号仍然会调用一个子shell。但是谁会在路径中放括号？瞧瞧！
- en: '[PRE8]'
  id: totrans-split-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Again, extending UTF-8 solves this as well: Encode `$`, `(`, and `)` in paths
    using three of those forbidden octets, and escape them on the way out, allowing
    unencoded instances to go straight through.'
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，扩展UTF-8也解决了这个问题：使用三个被禁用的八位组来编码路径中的`$`、`(`和`)`，并在输出时对它们进行转义，允许未编码的实例直接通过。
- en: '[PRE9]'
  id: totrans-split-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This makes `pc_top_builddir` straightforward: default to a raw string, otherwise
    a path-encoded environment variable (note: `s8` [is a string type](/blog/2023/10/08/)
    and `upsert` is [a hash map](/blog/2023/09/30/)):'
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得`pc_top_builddir`非常直观：默认为原始字符串，否则为路径编码的环境变量（注意：`s8`[是字符串类型](/blog/2023/10/08/)，而`upsert`是[hash映射](/blog/2023/09/30/)）：
- en: '[PRE10]'
  id: totrans-split-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For a particularly wild case, consider deliberately using a `uname -m` command
    substitution to construct a path, i.e. the path contains the target machine architecture
    (`i686`, `x86_64`, etc.):'
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个特别复杂的情况，考虑有意使用`uname -m`命令替换来构造路径，即路径包含目标机器架构（`i686`，`x86_64`等）：
- en: '[PRE11]'
  id: totrans-split-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '(Not that condone such nonsense. This is merely a reality of real world `.pc`
    files.) With `prefix` automatically set as above, this will print:'
  id: totrans-split-40
  prefs: []
  type: TYPE_NORMAL
  zh: （不是说赞成这种无稽之谈。这只是真实世界`.pc`文件的现实。）自动设置如上述的`prefix`后，将打印出：
- en: '[PRE12]'
  id: totrans-split-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Path parentheses are escaped because they came from a path, but command substitution
    passes through because it came from the `.pc` source. Quite cool!
  id: totrans-split-42
  prefs: []
  type: TYPE_NORMAL
  zh: 路径括号被转义，因为它们来自路径，但命令替换会通过，因为它来自`.pc`源。非常酷！
