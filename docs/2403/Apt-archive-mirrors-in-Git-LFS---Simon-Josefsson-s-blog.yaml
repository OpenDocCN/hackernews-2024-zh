- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
  zh: 类别：未分类
- en: 'date: 2024-05-29 12:29:45'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024-05-29 12:29:45
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: Apt archive mirrors in Git-LFS – Simon Josefsson's blog
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apt 仓库镜像使用 Git-LFS – Simon Josefsson's blog
- en: 来源：[https://blog.josefsson.org/2024/03/18/apt-archive-mirrors-in-git-lfs/](https://blog.josefsson.org/2024/03/18/apt-archive-mirrors-in-git-lfs/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://blog.josefsson.org/2024/03/18/apt-archive-mirrors-in-git-lfs/](https://blog.josefsson.org/2024/03/18/apt-archive-mirrors-in-git-lfs/)
- en: My effort to improve transparency and confidence of public apt archives continues.
    I started to work on this in “[Apt Archive Transparency](https://blog.josefsson.org/2023/02/01/apt-archive-transparency-debdistdiff-apt-canary/)”
    in which I mention the [debdistget](https://gitlab.com/debdistutils/debdistget/)
    project in passing. **Debdistget** is responsible for mirroring index files for
    some public apt archives. I’ve realized that having a publicly auditable and preserved
    mirror of the apt repositories is central to being able to do apt transparency
    work, so the debdistget project has become more central to my project than I thought.
    Currently I track [Trisquel](https://trisquel.info/), [PureOS](https://pureos.net/),
    [Gnuinos](https://www.gnuinos.org/) and their upstreams [Ubuntu](https://ubuntu.com/),
    [Debian](https://www.debian.org/) and [Devuan](https://www.devuan.org/).
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我努力提高公共 apt 存档的透明度和信任度。我开始在 “[Apt Archive Transparency](https://blog.josefsson.org/2023/02/01/apt-archive-transparency-debdistdiff-apt-canary/)”
    中工作，在其中提到了 [debdistget](https://gitlab.com/debdistutils/debdistget/) 项目。我意识到，拥有公开可审计和保留的
    apt 仓库镜像对于能够进行 apt 透明度工作至关重要，因此 debdistget 项目比我想象的更加核心。目前我跟踪 [Trisquel](https://trisquel.info/)、[PureOS](https://pureos.net/)、[Gnuinos](https://www.gnuinos.org/)
    及其上游 [Ubuntu](https://ubuntu.com/)、[Debian](https://www.debian.org/) 和 [Devuan](https://www.devuan.org/)。
- en: 'Debdistget download **Release/Package/Sources** files and store them in a git
    repository published on [GitLab](https://about.gitlab.com/). Due to size constraints,
    it uses two repositories: one for the **Release/InRelease** files (which are small)
    and one that also include the **Package/Sources** files (which are large). See
    for example the repository for [Trisquel release files](https://gitlab.com/debdistutils/archives/trisquel/releases)
    and the [Trisquel package/sources files](https://gitlab.com/debdistutils/archives/trisquel/packages).
    Repositories for all distributions can be found in [debdistutils’ archives GitLab
    sub-group](https://gitlab.com/debdistutils/archives).'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Debdistget** 下载 **Release/Package/Sources** 文件并将其存储在发布在 [GitLab](https://about.gitlab.com/)
    上的 Git 仓库中。由于大小限制，它使用了两个仓库：一个用于 **Release/InRelease** 文件（较小），另一个也包括 **Package/Sources**
    文件（较大）。例如，可以查看 [Trisquel 发布文件的仓库](https://gitlab.com/debdistutils/archives/trisquel/releases)
    和 [Trisquel 包/源文件的仓库](https://gitlab.com/debdistutils/archives/trisquel/packages)。所有发行版的仓库可以在
    [debdistutils 的归档 GitLab 子组](https://gitlab.com/debdistutils/archives) 中找到。'
- en: The reason for splitting into two repositories was that the git repository for
    the combined files become large, and that some of my use-cases only needed the
    release files. Currently the repositories with packages (which contain a couple
    of months worth of data now) are 9GB for [Ubuntu](https://gitlab.com/debdistutils/archives/ubuntu/packages),
    2.5GB for [Trisquel](https://gitlab.com/debdistutils/archives/trisquel/packages)/[Debian](https://gitlab.com/debdistutils/archives/debian/packages)/[PureOS](https://gitlab.com/debdistutils/archives/pureos/packages),
    970MB for [Devuan](https://gitlab.com/debdistutils/archives/devuan/packages) and
    450MB for [Gnuinos](https://gitlab.com/debdistutils/archives/gnuinos/packages).
    The repository size is correlated to the size of the archive (for the initial
    import) plus the frequency and size of updates. Ubuntu’s use of [Apt Phased Updates](https://wiki.ubuntu.com/PhasedUpdates)
    (which triggers a higher churn of Packages file modifications) appears to be the
    primary reason for its larger size.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
  zh: 分成两个仓库的原因是，合并文件的 Git 仓库变得很大，并且我的一些用例只需要发布文件。当前包含包（现在包含几个月的数据）的仓库为[Ubuntu](https://gitlab.com/debdistutils/archives/ubuntu/packages)为
    9GB，[Trisquel](https://gitlab.com/debdistutils/archives/trisquel/packages)/[Debian](https://gitlab.com/debdistutils/archives/debian/packages)/[PureOS](https://gitlab.com/debdistutils/archives/pureos/packages)为
    2.5GB，[Devuan](https://gitlab.com/debdistutils/archives/devuan/packages)为 970MB，[Gnuinos](https://gitlab.com/debdistutils/archives/gnuinos/packages)为
    450MB。仓库大小与存档的大小（用于初始导入）以及更新的频率和大小相关联。Ubuntu 使用 [Apt Phased Updates](https://wiki.ubuntu.com/PhasedUpdates)（触发更高频率的
    Packages 文件修改）似乎是其较大大小的主要原因。
- en: Working with large Git repositories is inefficient and the GitLab CI/CD jobs
    generate quite some network traffic downloading the git repository over and over
    again. The most heavy user is the [debdistdiff](https://gitlab.com/debdistutils/debdistdiff)
    project that download all distribution package repositories to do diff operations
    on the package lists between distributions. The daily job takes around **80 minutes**
    to run, with the majority of time is spent on downloading the archives. Yes I
    know I could look into runner-side caching but I dislike complexity caused by
    caching.
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
  zh: 处理大型 Git 存储库效率低下，GitLab CI/CD 基准下产生大量的网络流量，反复下载 Git 存储库。其中最明显的用户是 [debdistdiff](https://gitlab.com/debdistutils/debdistdiff)
    项目，它下载所有分布包存储库以对不同分布中的包清单进行差异操作。每日任务运行时间大约为 **80 分钟**，其中大部分时间都用于下载存档。诚然，我知道我可以研究运行者侧缓存，但我不喜欢由缓存引发的复杂性。
- en: Fortunately not all use-cases requires the package files. The [debdistcanary](https://gitlab.com/debdistutils/debdistcanary)
    project only needs the **Release/InRelease** files, in order to commit signatures
    to the [Sigstore](https://docs.sigstore.dev/) and [Sigsum](https://www.sigsum.org/)
    transparency logs. These jobs still run fairly quickly, but watching the repository
    size growth worries me. Currently these repositories are at [Debian](https://gitlab.com/debdistutils/canary/debian)
    440MB, [PureOS](https://gitlab.com/debdistutils/canary/pureos) 130MB, [Ubuntu](https://gitlab.com/debdistutils/canary/ubuntu)/[Devuan](https://gitlab.com/debdistutils/canary/devuan)
    90MB, [Trisquel](https://gitlab.com/debdistutils/canary/trisquel) 12MB, [Gnuinos](https://gitlab.com/debdistutils/canary/gnuinos)
    2MB. Here I believe the main size correlation is update frequency, and Debian
    is large because I track the volatile unstable.
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，并非所有用例都需要包文件。[debdistcanary](https://gitlab.com/debdistutils/debdistcanary)
    项目只需 **Release/InRelease** 文件，以便向 [Sigstore](https://docs.sigstore.dev/) 和 [Sigsum](https://www.sigsum.org/)
    透明日志添加签名。这些工作仍然相当快速，但观察存储库大小的增长让我感到担忧。目前这些存储库的大小分别为：Debian 对应的 [Canary](https://gitlab.com/debdistutils/canary/debian)
    为 440MB、PureOS 为 130MB、Ubuntu/Devuan 为 90MB、Trisquel 为 12MB、Gnuinos 为 2MB。我确信主要的大小相关因素是更新频率，Debian
    较大是因为我追踪了不稳定的 volatile。
- en: So I hit a scalability end with my first approach. A couple of months ago I
    “solved” this by discarding and resetting these archival repositories. The GitLab
    CI/CD jobs were fast again and all was well. However this meant discarding precious
    historic information. A couple of days ago I was reaching the limits of practicality
    again, and started to explore ways to fix this. I like having data stored in git
    (it allows easy integration with software integrity tools such as [GnuPG](https://gnupg.org/)
    and Sigstore, and the git log provides a kind of temporal ordering of data), so
    it felt like giving up on nice properties to use a traditional database with on-disk
    approach. So I started to learn about [Git-LFS](https://git-lfs.com/) and understanding
    that it was able to [handle multi-GB worth of data](https://devblogs.microsoft.com/bharry/the-largest-git-repo-on-the-planet/)
    that looked promising.
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我的第一种方法在扩展性上遇到了瓶颈。几个月前，通过删除和重置这些归档存储库，我“解决了”这个问题。GitLab CI/CD 基准再次快速运行而且一切都很顺利。然而，这意味着丢弃宝贵的历史信息。几天前，我再次接近了实际使用范围的极限，开始探索解决方法。我喜欢将数据存储在
    git 中（它允许集成到如 GnuPG 和 Sigstore 这样的软件完整性工具中，并且 git 日志提供了数据的某种程度的时间排序），所以我觉得放弃美观的属性而使用传统的在磁盘上的数据库似乎是错误的。因此，我开始学习
    [Git-LFS](https://git-lfs.com/) 并理解它能够处理多达数 GB 的数据，这看起来很有希望。
- en: 'Fairly quickly I scripted up a [GitLab CI/CD job](https://gitlab.com/debdistutils/debdistget/-/blob/main/ci-debdistget-dists.yml)
    that incrementally update the **Release/Package/Sources** files in a git repository
    that uses Git-LFS to store all the files. The repository size is now at [Ubuntu
    650kb](https://gitlab.com/debdistutils/dists/ubuntu), [Debian 300kb](https://gitlab.com/debdistutils/dists/debian),
    [Trisquel 50kb](https://gitlab.com/debdistutils/dists/trisquel), [Devuan 250kb](https://gitlab.com/debdistutils/dists/devuan),
    [PureOS 172kb](https://gitlab.com/debdistutils/dists/pureos) and [Gnuinos 17kb](https://gitlab.com/debdistutils/dists/gnuinos).
    As can be expected, jobs are quick to clone the git archives: [debdistdiff pipelines](https://gitlab.com/debdistutils/debdistdiff/-/pipelines)
    went from a **run-time of 80 minutes down to 10 minutes** which more reasonable
    correlate with the archive size and CPU run-time.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我很快编写了一个 [GitLab CI/CD 作业](https://gitlab.com/debdistutils/debdistget/-/blob/main/ci-debdistget-dists.yml)，用于逐步更新**Release/Package/Sources**文件，这些文件存储在一个使用
    Git-LFS 存储所有文件的 Git 仓库中。现在仓库的大小分别为 [Ubuntu 650kb](https://gitlab.com/debdistutils/dists/ubuntu)，[Debian
    300kb](https://gitlab.com/debdistutils/dists/debian)，[Trisquel 50kb](https://gitlab.com/debdistutils/dists/trisquel)，[Devuan
    250kb](https://gitlab.com/debdistutils/dists/devuan)，[PureOS 172kb](https://gitlab.com/debdistutils/dists/pureos)
    和 [Gnuinos 17kb](https://gitlab.com/debdistutils/dists/gnuinos)。可以预期的是，作业快速克隆
    Git 存档：[debdistdiff 管道](https://gitlab.com/debdistutils/debdistdiff/-/pipelines)的运行时间从
    80 分钟缩短到了 10 分钟，这与存档大小和 CPU 运行时间更为合理地对应。
- en: 'The LFS storage size for those repositories are at [Ubuntu 15GB](https://gitlab.com/debdistutils/dists/ubuntu),
    [Debian 8GB](https://gitlab.com/debdistutils/dists/debian), [Trisquel 1.7GB](https://gitlab.com/debdistutils/dists/trisquel),
    [Devuan 1.1GB](https://gitlab.com/debdistutils/dists/devuan), [PureOS](https://gitlab.com/debdistutils/dists/pureos)/[Gnuinos](https://gitlab.com/debdistutils/dists/gnuinos)
    420MB. This is for a couple of days worth of data. It seems native Git is better
    at compressing/deduplicating data than Git-LFS is: the combined size for Ubuntu
    is already 15GB for a couple of days data compared to 8GB for a couple of months
    worth of data with pure Git. This may be a sub-optimal implementation of Git-LFS
    in GitLab but it does worry me that this new approach will be difficult to scale
    too. At some level the difference is understandable, Git-LFS probably store two
    different **Packages** files — around 90MB each for Trisquel — as two 90MB files,
    but native Git would store it as one compressed version of the 90MB file and one
    relatively small patch to turn the old files into the next file. So the Git-LFS
    approach surprisingly scale less well for overall storage-size. Still, the original
    repository is much smaller, and you usually don’t have to pull all LFS files anyway.
    So it is net win.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些仓库的 LFS 存储大小分别为 [Ubuntu 15GB](https://gitlab.com/debdistutils/dists/ubuntu)，[Debian
    8GB](https://gitlab.com/debdistutils/dists/debian)，[Trisquel 1.7GB](https://gitlab.com/debdistutils/dists/trisquel)，[Devuan
    1.1GB](https://gitlab.com/debdistutils/dists/devuan)，[PureOS](https://gitlab.com/debdistutils/dists/pureos)/[Gnuinos](https://gitlab.com/debdistutils/dists/gnuinos)
    420MB。这些数据仅为几天的量。似乎本地 Git 在压缩/去重数据方面优于 Git-LFS：Ubuntu 的综合大小已经达到了 15GB，而纯 Git 的几个月数据仅为
    8GB。这可能是 GitLab 中 Git-LFS 的一个次优实现，但我担心这种新方法在扩展性上可能存在困难。在某种程度上，这种差异是可以理解的，Git-LFS
    可能会将两个不同的**Packages**文件（比如 Trisquel 中每个约为 90MB）存储为两个 90MB 文件，而本地 Git 则会将其存储为一个压缩版本的
    90MB 文件和一个相对较小的补丁文件以转换旧文件为新文件。因此，总体存储大小而言，Git-LFS 的方法似乎不那么优秀。尽管如此，原始仓库要小得多，而且通常不必拉取所有
    LFS 文件。因此，这仍然是一个优势。
- en: Throughout this work, I kept thinking about how my approach relates to [Debian’s
    snapshot service](https://snapshot.debian.org/). Ultimately what I would want
    is a combination of these two services. To have a good foundation to do transparency
    work I would want to have a collection of all **Release/Packages/Sources** files
    ever published, and ultimately also the source code and binaries. While it makes
    sense to start on the latest stable releases of distributions, this effort should
    scale backwards in time as well. For reproducing binaries from source code, I
    need to be able to securely find earlier versions of binary packages used for
    rebuilds. So I need to import all the **Release/Packages/Sources** packages from
    snapshot into my repositories. The latency to retrieve files from that server
    is slow so I haven’t been able to find an efficient/parallelized way to download
    the files. If I’m able to finish this, I would have confidence that my new Git-LFS
    based approach to store these files will scale over many years to come. This remains
    to be seen. Perhaps the repository has to be split up per release or per architecture
    or similar.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个工作过程中，我一直在思考我的方法如何与[Debian快照服务](https://snapshot.debian.org/)相关联。最终，我希望能够结合这两种服务。为了在透明工作方面有一个良好的基础，我希望拥有所有曾经发布的**Release/Packages/Sources**文件的集合，最终还包括源代码和二进制文件。虽然从最新的稳定发行版开始是有意义的，但这一努力也应该向过去扩展。为了从源代码重现二进制文件，我需要能够安全地找到用于重建的早期版本的二进制包。因此，我需要将来自快照的所有**Release/Packages/Sources**包导入我的存储库。从该服务器检索文件的延迟很慢，因此我还没有找到有效/并行下载文件的方法。如果我能完成这个任务，我对基于新的Git-LFS存储这些文件的方法能够持续多年感到有信心。这还有待验证。也许存储库必须按发行版或架构等方式分割。
- en: Another factor is storage costs. While the git repository size for a Git-LFS
    based repository with files from several years may be possible to sustain, the
    Git-LFS storage size surely won’t be. It seems GitLab charges the same for files
    in repositories and in Git-LFS, and it is around **$500 per 100GB** per year.
    It may be possible to setup a separate Git-LFS backend not hosted at GitLab to
    serve the LFS files. Does anyone know of a suitable server implementation for
    this? I had a quick look at the [Git-LFS implementation list](https://github.com/git-lfs/git-lfs/wiki/Implementations)
    and it seems the closest reasonable approach would be to setup the Gitea-clone
    [Forgejo](https://forgejo.org/) as a self-hosted server. Perhaps a cloud storage
    approach a’la S3 is the way to go? The cost to host this on GitLab will be manageable
    for up to **~1TB ($5000/year)** but scaling it to storing say **500TB** of data
    would mean an yearly fee of **$2.5M** which seems like poor value for the money.
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个因素是存储成本。虽然具有多年文件的基于Git-LFS的存储库的Git存储库大小可能是可以接受的，但Git-LFS存储大小肯定不会。看起来GitLab对存储库和Git-LFS中的文件收费相同，大约是每年**每100GB约$500**。也许可以设置一个独立的Git-LFS后端，不是由GitLab托管来提供LFS文件。有没有人知道一个适合此用途的服务器实现？我快速查看了[Git-LFS实现列表](https://github.com/git-lfs/git-lfs/wiki/Implementations)，似乎最接近的合理方法是设置Gitea-clone
    [Forgejo](https://forgejo.org/)作为自托管服务器。也许类似S3的云存储方法是正确的选择？在GitLab上托管这个的费用对于**~1TB（每年$5000）**还能接受，但将其扩展到存储约**500TB**的数据将意味着每年**$2.5M**的费用，这似乎物有所值较差。
- en: 'I realized that ultimately I would want a git repository locally with the entire
    content of all apt archives, including their binary and source packages, ever
    published. The storage requirements for a service like snapshot (~300TB of data?)
    is today not prohibitly expensive: 20TB disks are $500 a piece, so a storage enclosure
    with 36 disks would be around **$18.000 for 720TB** and using RAID1 means 360TB
    which is a good start. While I have heard about ~TB-sized Git-LFS repositories,
    would Git-LFS scale to 1PB? Perhaps the size of a git repository with multi-millions
    number of Git-LFS pointer files will become unmanageable? To get started on this
    approach, I decided to import a mirror of **Debian’s bookworm for amd64** into
    a Git-LFS repository. That is around **175GB** so reasonable cheap to host even
    on GitLab ($1000/year for 200GB). Having this repository publicly available will
    make it possible to write software that uses this approach (e.g., porting [debdistreproduce](https://gitlab.com/debdistutils/debdistreproduce)),
    to find out if this is useful and if it could scale. Distributing the apt repository
    via Git-LFS would also enable other interesting ideas to protecting the data.
    Consider configuring apt to use a local **file://** URL to this git repository,
    and verifying the git checkout using some method similar to [Guix’s approach to
    trusting git](https://archive.fosdem.org/2023/schedule/event/security_where_does_that_code_come_from/)
    content or [Sigstore’s gitsign](https://github.com/sigstore/gitsign).'
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: 'A naive push of the **175GB** archive in a single git commit ran into pack
    size limitations:'
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: '`remote: fatal: pack exceeds maximum allowed size (4.88 GiB)`'
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: 'however breaking up the commit into smaller commits for parts of the archive
    made it possible to push the entire archive. Here are the commands to create this
    repository:'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: '`git init'
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: git lfs install
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: git lfs track 'dists/**' 'pool/**'
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: git add .gitattributes
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: git commit -m"Add Git-LFS track attributes." .gitattributes
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: time debmirror --method=rsync --host ftp.se.debian.org --root :debian --arch=amd64
    --source --dist=bookworm,bookworm-updates --section=main --verbose --diff=none
    --keyring /usr/share/keyrings/debian-archive-keyring.gpg --ignore .git .
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: git add dists project
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: git commit -m"Add." -a
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: git remote add origin git@gitlab.com:debdistutils/archives/debian/mirror.git
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: git push --set-upstream origin --all
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: for d in pool/*/*; do
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: echo $d;
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: time git add $d;
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
- en: git commit -m"Add $d." -a
  id: totrans-split-33
  prefs: []
  type: TYPE_NORMAL
- en: git push
  id: totrans-split-34
  prefs: []
  type: TYPE_NORMAL
- en: done`
  id: totrans-split-35
  prefs: []
  type: TYPE_NORMAL
- en: The [resulting repository](https://gitlab.com/debdistutils/archives/debian/mirror)
    size is around 27MB with Git LFS object storage around 174GB. I think this approach
    would scale to handle all architectures for one release, but working with a single
    git repository for all releases for all architectures may lead to a too large
    git repository (>1GB). So maybe one repository per release? These repositories
    could also be split up on a subset of **pool/** files, or there could be one repository
    per release per architecture or sources.
  id: totrans-split-36
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的[存储库](https://gitlab.com/debdistutils/archives/debian/mirror)大小约为27MB，Git
    LFS对象存储约为174GB。我认为这种方法能够扩展以处理一个发布的所有架构，但使用一个单一的git存储库来处理所有版本的所有架构可能会导致一个过大的git存储库（>1GB）。所以也许每个发布一个存储库？这些存储库还可以根据**pool/**文件的子集进行拆分，或者可以每个版本每个架构或源一个存储库。
- en: Finally, I have concerns about using SHA1 for identifying objects. It seems
    both Git and Debian’s snapshot service is currently using SHA1\. For Git there
    is [SHA-256 transition](https://git-scm.com/docs/hash-function-transition) and
    it seems GitLab is working on support for SHA256-based repositories. For serious
    long-term deployment of these concepts, it would be nice to go for SHA256 identifiers
    directly. Git-LFS already uses SHA256 but Git internally uses SHA1 as does the
    Debian snapshot service.
  id: totrans-split-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我对使用SHA1来标识对象有所顾虑。目前Git和Debian的快照服务都在使用SHA1。对于Git来说，有关[SHA-256过渡](https://git-scm.com/docs/hash-function-transition)，而GitLab正在开发支持基于SHA256的存储库。对于这些概念的长期严肃部署，直接采用SHA256标识符将是不错的选择。Git-LFS已经在使用SHA256，但Git内部和Debian的快照服务仍使用SHA1。
- en: What do you think? Happy Hacking!
  id: totrans-split-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你怎么看？愉快编程！
