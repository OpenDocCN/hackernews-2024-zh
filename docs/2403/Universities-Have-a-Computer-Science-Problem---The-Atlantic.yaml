- en: <!--yml
  id: totrans-split-0
  prefs: []
  type: TYPE_NORMAL
- en: 'category: 未分类'
  id: totrans-split-1
  prefs: []
  type: TYPE_NORMAL
- en: 'date: 2024-05-29 12:32:04'
  id: totrans-split-2
  prefs: []
  type: TYPE_NORMAL
- en: -->
  id: totrans-split-3
  prefs: []
  type: TYPE_NORMAL
- en: Universities Have a Computer-Science Problem - The Atlantic
  id: totrans-split-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 来源：[https://www.theatlantic.com/technology/archive/2024/03/computing-college-cs-majors/677792/](https://www.theatlantic.com/technology/archive/2024/03/computing-college-cs-majors/677792/)
  id: totrans-split-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Updated at 5:37 p.m. ET on March 22, 2024*'
  id: totrans-split-6
  prefs: []
  type: TYPE_NORMAL
- en: 'Last year, 18 percent of Stanford University seniors graduated with a degree
    in computer science, [more than double](https://stanforddaily.com/2020/04/25/stanford-in-the-2010s-trends-in-undergrad-majors-visualized/)
    the proportion of just a decade earlier. Over the same period at MIT, that rate
    went up from [23 percent](https://registrar.mit.edu/stats-reports/degrees-awarded/2012-2013)
    to [42 percent](https://registrar.mit.edu/stats-reports/degrees-awarded). These
    increases are common everywhere: The average number of undergraduate CS majors
    at universities in the U.S. and Canada [tripled](https://cra.org/data/generation-cs/phenomenal-growth-cs-majors-since-2006/)
    in the decade after 2005, and it [keeps growing](https://cra.org/crn/wp-content/uploads/sites/7/2023/05/2022-Taulbee-Survey-Final.pdf).
    Students’ interest in CS is intellectual—culture moves through computation these
    days—but it is also professional. Young people hope to access the wealth, power,
    and influence of the technology sector.'
  id: totrans-split-7
  prefs: []
  type: TYPE_NORMAL
- en: That ambition has created both enormous administrative strain and a competition
    for prestige. At Washington University in St. Louis, where I serve on the faculty
    of the Computer Science & Engineering department, each semester brings another
    set of waitlists for enrollment in CS classes. On many campuses, students may
    choose to study computer science at any of several different academic outposts,
    strewn throughout various departments. At MIT, for example, they might get a degree
    in “Urban Studies and Planning With Computer Science” from the School of Architecture,
    or one in “Mathematics With Computer Science” from the School of Science, or they
    might choose from among four CS-related fields within the School of Engineering.
    This seepage of computing throughout the university has helped address students’
    booming interest, but it also serves to bolster their demand.
  id: totrans-split-8
  prefs: []
  type: TYPE_NORMAL
- en: 'Another approach has gained in popularity. Universities are consolidating the
    formal study of CS into a new administrative structure: the college of computing.
    MIT opened one in 2019\. Cornell set one up in 2020\. And just last year, UC Berkeley
    announced that its own would be that university’s first new college in more than
    half a century. The importance of this trend—its significance for the practice
    of education, and also of technology—must not be overlooked. Universities are
    conservative institutions, steeped in tradition. When they elevate computing to
    the status of a college, with departments and a budget, they are declaring it
    a higher-order domain of knowledge and practice, akin to law or engineering. That
    decision will inform a fundamental question: whether computing ought to be seen
    as a superfield that lords over all others, or just a servant of other domains,
    subordinated to their interests and control. This is, by no happenstance, also
    the basic question about computing in our society writ large.'
  id: totrans-split-9
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-10
  prefs: []
  type: TYPE_NORMAL
- en: 'When I was an undergraduate at the University of Southern California in the
    1990s, students interested in computer science could choose between two different
    majors: one offered by the College of Letters, Arts and Sciences, and one from
    the School of Engineering. The two degrees were similar, but many students picked
    the latter because it didn’t require three semesters’ worth of study of a (human)
    language, such as French. I chose the former, because I like French.'
  id: totrans-split-11
  prefs: []
  type: TYPE_NORMAL
- en: 'An American university is organized like this, into divisions that are sometimes
    called *colleges*, and sometimes *schools*. These typically enjoy a good deal
    of independence to define their courses of study and requirements as well as research
    practices for their constituent disciplines. Included in this purview: whether
    a CS student really needs to learn French.'
  id: totrans-split-12
  prefs: []
  type: TYPE_NORMAL
- en: 'The positioning of computer science at USC was not uncommon at the time. The
    first academic departments of CS had arisen in the early 1960s, and they typically
    evolved in one of two ways: as an offshoot of electrical engineering (where transistors
    got their start), housed in a college of engineering; or as an offshoot of mathematics
    (where formal logic lived), housed in a college of the arts and sciences. At some
    universities, including USC, CS found its way into both places at once.'
  id: totrans-split-13
  prefs: []
  type: TYPE_NORMAL
- en: The contexts in which CS matured had an impact on its nature, values, and aspirations.
    Engineering schools are traditionally the venue for a family of professional disciplines,
    regulated with licensure requirements for practice. Civil engineers, mechanical
    engineers, nuclear engineers, and others are tasked to build infrastructure that
    humankind relies on, and they are expected to solve problems. The liberal-arts
    field of mathematics, by contrast, is concerned with theory and abstraction. The
    relationship between the theoretical computer scientists in mathematics and the
    applied ones in engineers is a little like the relationship between biologists
    and doctors, or physicists and bridge builders. Keeping applied and pure versions
    of a discipline separate allows each to focus on its expertise, but limits the
    degree to which one can learn from the other.
  id: totrans-split-14
  prefs: []
  type: TYPE_NORMAL
- en: '[Read: Programmers, stop calling yourself engineers](https://www.theatlantic.com/technology/archive/2015/11/programmers-should-not-call-themselves-engineers/414271/)'
  id: totrans-split-15
  prefs: []
  type: TYPE_NORMAL
- en: By the time I arrived at USC, some universities had already started down a different
    path. In 1988, Carnegie Mellon University created what it says was one of the
    first dedicated schools of computer science. Georgia Institute of Technology followed
    two years later. “Computing was going to be a big deal,” says Charles Isbell,
    a former dean of Georgia Tech’s college of computing and now the provost at the
    University of Wisconsin-Madison. Emancipating the field from its prior home within
    the college of engineering gave it room to grow, he told me. Within a decade,
    Georgia Tech had used this structure to establish new research and teaching efforts
    in computer graphics, human-computer interaction, and robotics. (I spent 17 years
    on the faculty there, working for Isbell and his predecessors, and teaching computational
    media.)
  id: totrans-split-16
  prefs: []
  type: TYPE_NORMAL
- en: Kavita Bala, Cornell University’s dean of computing, told me that the autonomy
    and scale of a college allows her to avoid jockeying for influence and resources.
    MIT’s computing dean, Daniel Huttenlocher, says that the speed at which computing
    evolves justifies the new structure.
  id: totrans-split-17
  prefs: []
  type: TYPE_NORMAL
- en: But the computing industry isn’t just fast-moving. It’s also reckless. Technology
    tycoons say they need space for growth, and warn that too much oversight will
    stifle innovation. Yet we might all be better off, in certain ways, if their ambitions
    were held back even just a little. Instead of operating with a deep understanding
    or respect for law, policy, justice, health, or cohesion, tech firms tend to do
    [whatever they want](https://www.theguardian.com/news/2022/jul/10/uber-files-leak-reveals-global-lobbying-campaign).
    Facebook sought growth at all costs, even if its take on connecting people [tore
    society apart](https://www.theatlantic.com/technology/archive/2020/12/facebook-doomsday-machine/617384/).
    If colleges of computing serve to isolate young, future tech professionals from
    any classrooms where they might imbibe another school’s culture and values—engineering’s
    studied prudence, for example, or the humanities’ focus on deliberation—this tendency
    might only worsen.
  id: totrans-split-18
  prefs: []
  type: TYPE_NORMAL
- en: '[Read: The moral failure of computer scientists](https://www.theatlantic.com/technology/archive/2015/12/the-moral-failure-of-computer-science/420012/)'
  id: totrans-split-19
  prefs: []
  type: TYPE_NORMAL
- en: When I raised this concern with Isbell, he said that the same reasoning could
    apply to any influential discipline, including medicine and business. He’s probably
    right, but that’s cold comfort. The mere fact that universities allow some other
    powerful fiefdoms to exist doesn’t make computing’s centralization less concerning.
    Isbell admitted that setting up colleges of computing “absolutely runs the risk”
    of empowering a generation of professionals who may already be disengaged from
    consequences to train the next one in their image. Inside a computing college,
    there may be fewer critics around who can slow down bad ideas. Disengagement might
    redouble. But he said that dedicated colleges could also have the opposite effect.
    A traditional CS department in a school of engineering would be populated entirely
    by computer scientists, while the faculty for a college of computing like the
    one he led at Georgia Tech might also house lawyers, ethnographers, psychologists,
    and even philosophers like me. Huttenlocher repeatedly emphasized that the role
    of the computing college is to foster collaboration between CS and other disciplines
    across the university. Bala told me that her college was established not to teach
    CS on its own but to incorporate policy, law, sociology, and other fields into
    its practice. “I think there are no downsides,” she said.
  id: totrans-split-20
  prefs: []
  type: TYPE_NORMAL
- en: Mark Guzdial is a former faculty member in Georgia Tech’s computing college,
    and he now teaches computer science in the University of Michigan’s College of
    Engineering. At Michigan, CS wasn’t always housed in engineering—Guzdial says
    it started out inside the philosophy department, as part of the College of Literature,
    Science and the Arts. Now that college “wants it back,” as one administrator told
    Guzdial. Having been asked to start a program that teaches computing to liberal-arts
    students, Guzdial has a new perspective on these administrative structures. He
    learned that Michigan’s Computer Science and Engineering program and its faculty
    are “despised” by their counterparts in the humanities and social sciences. “They’re
    seen as arrogant, narrowly focused on machines rather than people, and unwilling
    to meet other programs’ needs,” he told me. “I had faculty refuse to talk to me
    because I was from CSE.”
  id: totrans-split-21
  prefs: []
  type: TYPE_NORMAL
- en: In other words, there may be downsides just to placing CS within an engineering
    school, let alone making it an independent college. Left entirely to themselves,
    computer scientists can forget that computers are supposed to be tools that help
    people. Georgia Tech’s College of Computing worked “because the culture was always
    outward-looking. We sought to use computing to solve others’ problems,” Guzdial
    said. But that may have been a momentary success. Now, at Michigan, he is trying
    to rebuild computing education from scratch, for students in fields such as French
    and sociology. He wants them to understand it as a means of self-expression or
    achieving justice—and not just a way of making software, or money.
  id: totrans-split-22
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-23
  prefs: []
  type: TYPE_NORMAL
- en: Early in my undergraduate career, I decided to abandon CS as a major. Even as
    an undergraduate, I already had a side job in what would become the internet industry,
    and computer science, as an academic field, felt theoretical and unnecessary.
    Reasoning that I could easily get a job as a computer professional no matter what
    it said on my degree, I decided to study other things while I had the chance.
  id: totrans-split-24
  prefs: []
  type: TYPE_NORMAL
- en: I have a strong memory of processing the paperwork to drop my computer-science
    major in college, in favor of philosophy. I walked down a quiet, blue-tiled hallway
    of the engineering building. All the faculty doors were closed, although the click-click
    of mechanical keyboards could be heard behind many of them. I knocked on my adviser’s
    door; she opened it, silently signed my paperwork without inviting me in, and
    closed the door again. The keyboard tapping resumed.
  id: totrans-split-25
  prefs: []
  type: TYPE_NORMAL
- en: The whole experience was a product of its time, when computer science was a
    field composed of oddball characters, working by themselves, and largely disconnected
    from what was happening in the world at large. Almost 30 years later, their projects
    have turned into the infrastructure of our daily lives. Want to find a job? That’s
    LinkedIn. Keep in touch? Gmail, or Instagram. Get news? A website like this one,
    we hope, but perhaps TikTok. My university uses a software service sold by a tech
    company to run its courses. Some things have been made easier with computing.
    Others have been changed to serve another end, like scaling up an online business.
  id: totrans-split-26
  prefs: []
  type: TYPE_NORMAL
- en: '[Read: So much for ‘learn to code’](https://www.theatlantic.com/technology/archive/2023/09/computer-science-degree-value-generative-ai-age/675452/)'
  id: totrans-split-27
  prefs: []
  type: TYPE_NORMAL
- en: The struggle to figure out the best organizational structure for computing education
    is, in a way, a microcosm of the struggle under way in the computing sector at
    large. For decades, computers were tools used to accomplish tasks better and more
    efficiently. Then computing became the way we work and live. It became our culture,
    and we began doing what computers made possible, rather than using computers to
    solve problems defined outside their purview. Tech moguls became famous, wealthy,
    and powerful. So did CS academics (relatively speaking). The success of the latter—in
    terms of rising student enrollments, research output, and fundraising dollars—both
    sustains and justifies their growing influence on campus.
  id: totrans-split-28
  prefs: []
  type: TYPE_NORMAL
- en: If computing colleges have erred, it may be in failing to exert their power
    with even greater zeal. For all their talk of growth and expansion within academia,
    the computing deans’ ambitions seem remarkably modest. Martial Hebert, the dean
    of Carnegie Mellon’s computing school, almost sounded like he was talking about
    the liberal arts when he told me that CS is “a rich tapestry of disciplines” that
    “goes far beyond computers and coding.” But the seven departments in his school
    correspond to the traditional, core aspects of computing plus computational biology.
    They do not include history, for example, or finance. Bala and Isbell talked about
    incorporating law, policy, and psychology into their programs of study, but only
    in the form of hiring individual professors into more traditional CS divisions.
    None of the deans I spoke with aspires to launch, say, a department of art within
    their college of computing, or one of politics, sociology, or film. Their vision
    does not reflect the idea that computing can or should be a superordinate realm
    of scholarship, on the order of the arts or engineering. Rather, they are proceeding
    as though it were a technical school for producing a certain variety of very well-paid
    professionals. A computing college deserving of the name wouldn’t just provide
    deeper coursework in CS and its closely adjacent fields; it would expand and reinvent
    other, seemingly remote disciplines for the age of computation.
  id: totrans-split-29
  prefs: []
  type: TYPE_NORMAL
- en: 'Near the end of our conversation, Isbell mentioned the engineering fallacy,
    which he summarized like this: Someone asks you to solve a problem, and you solve
    it without asking if it’s a problem worth solving. I used to think computing education
    might be stuck in a nesting-doll version of the engineer’s fallacy, in which CS
    departments have been asked to train more software engineers without considering
    whether more software engineers are really what the world needs. Now I worry that
    they have a bigger problem to address: how to make computer people care about
    everything else as much as they care about computers.'
  id: totrans-split-30
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-split-31
  prefs: []
  type: TYPE_NORMAL
- en: '*This article originally mischaracterized the views of MIT’s computing dean,
    Daniel Huttenlocher. He did not say that computer science would be held back in
    an arts-and-science or engineering context, or that it needs to be independent.*'
  id: totrans-split-32
  prefs: []
  type: TYPE_NORMAL
