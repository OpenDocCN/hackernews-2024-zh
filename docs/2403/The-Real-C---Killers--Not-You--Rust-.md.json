["```\n// version 1\nauto y = std::sin(x);\n\n// version 2\ny = -0.000182690409228785*x*x*x*x*x*x*x\n    +0.00830460224186793*x*x*x*x*x\n    -0.166651012143690*x*x*x\n    +x;\n\n```", "```\n// version 1\t\n  if (xs[i] == 1 \n   && xs[i+1] == 1 \n   && xs[i+2] == 1 \n   && xs[i+3] == 1) // xs are bools stored as ints\n\n// version 2\n  inline int sq(int x) {\n      return x*x;\n  }\n\n  if(sq(xs[i] - 1) \n   + sq(xs[i+1] - 1) \n   + sq(xs[i+2] - 1) \n   + sq(xs[i+3] - 1) == 0)\n\n```", "```\n// version 1\n    if(s[0] > s[1])\n        swap(s[0], s[1]);\n    if(s[1] > s[2])\n        swap(s[1], s[2]);\n    if(s[0] > s[1])\n        swap(s[0], s[1]);\n\n// version 2\n    const auto a = s[0];\n    const auto b = s[1];\n    const auto c = s[2];\n    s[int(a > b) + int(a > c)] = a;\n    s[int(b >= a) + int(b > c)] = b;\n    s[int(c >= a) + int(c >= b)] = c;\n\n```", "```\n@cuda.jit\ndef matmul(A, B, C):\n    \"\"\"Perform square matrix multiplication of C = A * B.\"\"\"\n    i, j = cuda.grid(2)\n    if i < C.shape[0] and j < C.shape[1]:\n        tmp = 0.\n        for k in range(A.shape[1]):\n                tmp += A[i, k] * B[k, j]\n        C[i, j] = tmp\n\n```", "```\n    invoke RegisterClassEx, addr wc     ; register our window class\n    invoke CreateWindowEx,NULL,\n        ADDR ClassName, ADDR AppName,\\\n        WS_OVERLAPPEDWINDOW,\\\n        CW_USEDEFAULT, CW_USEDEFAULT,\\\n        CW_USEDEFAULT, CW_USEDEFAULT,\\\n        NULL, NULL, hInst, NULL\n        mov   hwnd,eax\n    invoke ShowWindow, hwnd,CmdShow     ; display our window on desktop\n    invoke UpdateWindow, hwnd           ; refresh the client area\n\n    .while TRUE                         ; Enter message loop\n        invoke GetMessage, ADDR msg,NULL,0,0\n        .break .if (!eax)\n        invoke TranslateMessage, ADDR msg\n        invoke DispatchMessage, ADDR msg\n   .endw\n\n```", "```\n(module\n  (func $add (param $lhs i32) (param $rhs i32) (result i32)\n        get_local $lhs\n        get_local $rhs\n        i32.add)\n  (export \"add\" (func $add)))\n\n```", "```\nv0 = my_vector  // we want the horizontal sum of this\nint64 r0 = get_len ( v0 )\nint64 r0 = round_u2 ( r0 )\nfloat v0 = set_len ( r0 , v0 )\nwhile ( uint64 r0 > 4) {\n        uint64 r0 >>= 1\n        float v1 = shift_reduce ( r0 , v0 )\n        float v0 = v1 + v0\n}\n\n```"]